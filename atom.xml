<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TaurusHome]]></title>
  <link href="http://agenge.github.io/atom.xml" rel="self"/>
  <link href="http://agenge.github.io/"/>
  <updated>2013-11-28T21:15:02+08:00</updated>
  <id>http://agenge.github.io/</id>
  <author>
    <name><![CDATA[agenge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS安装redmine]]></title>
    <link href="http://agenge.github.io/blog/2013/11/18/redmine-install-for-centos/"/>
    <updated>2013-11-18T00:04:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/11/18/redmine-install-for-centos</id>
    <content type="html"><![CDATA[<p>Redmine安装与配置</p>

<h2>介绍</h2>

<p>redmine是一个开源的项目管理套件。而且能运行绝大部分平台：Linux、Uinx、Windows等平台。</p>

<h2>安装Redmine</h2>

<h3>安装依赖包</h3>

<p>安装redmine之前，必须安装ruby和gem，下载地址：</p>

<ul>
<li><a href="http://rubyforge.org/frs/?group_id=1850">redmine 2.4.0</a></li>
<li><a href="ftp://ftp.ruby-lang.org/pub/ruby/1.8/">ruby 1.8.7</a></li>
<li><a href="https://rubyforge.org/frs/?group_id=126&amp;release_id=46730">rubygems 1.8.24</a></li>
<li>Mysql、Apache httpd</li>
</ul>


<p>CentOS 6.3 默认安装的ruby已经是1.8.7，所在可以直接yum安装，如果你想源码进行安装，请自行Google：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://rubyforge.org/frs/download.php/77242/redmine-2.4.0.tar.gz --no-check-certificate
</span><span class='line'>wget https://rubyforge.org/frs/download.php/76073/rubygems-1.8.24.tgz --no-check-certificate
</span><span class='line'>yum install -y ruby-libs ruby rdoc ruby-devel gcc-c++ curl-devel</span></code></pre></td></tr></table></div></figure>


<h3>安装rubygems</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar zxvf rubygems-1.8.24.tgz 
</span><span class='line'>cd rubygems-1.8.24
</span><span class='line'>ruby setup.rb </span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>为了与apache结合使用，需要创建apache用户与组；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd apache
</span><span class='line'>useradd -g apache -s /sbin/nologin apache</span></code></pre></td></tr></table></div></figure>


<h3>安装 redmine</h3>

<p>安装 redmine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar zxvf redmine-2.4.0.tar.gz 
</span><span class='line'>chown -R apache:apache redmine-2.4.0
</span><span class='line'>cd redmine-2.4.0</span></code></pre></td></tr></table></div></figure>


<p>安装依赖包(使用淘宝的gem源)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --remove http://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install --without development test postgresql sqlite rmagick    </span></code></pre></td></tr></table></div></figure>


<p>without 表示后面的模块都不需要安装</p>

<h3>安装Mysql</h3>

<p>本示例为了简便，直接使用的yum安装，需要源码安装的见 <a href="http://agenge.com/blog/2013/08/09/drbd_heartbeat_mysql_ha/">这里</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install mysql-server mysql-devel mysql
</span><span class='line'>/etc/init.d/mysqld restart
</span><span class='line'>/usr/bin/mysqladmin -u root password '123456'</span></code></pre></td></tr></table></div></figure>


<p>创建redmine数据库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# mysql -uroot -p
</span><span class='line'>Enter password: 
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 3
</span><span class='line'>Server version: 5.1.69 Source distribution
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; create database redmine character set utf8;
</span><span class='line'>Query OK, 1 row affected (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; create user 'redmine'@'localhost' identified by 'redmine';
</span><span class='line'>Query OK, 0 rows affected (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; grant all privileges on redmine.* to 'redmine'@'%';
</span><span class='line'>Query OK, 0 rows affected (0.00 sec)</span></code></pre></td></tr></table></div></figure>


<p>测试是否可以用redmine登录；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# mysql -uredmine -p
</span><span class='line'>Enter password: 
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 5
</span><span class='line'>Server version: 5.1.69 Source distribution
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; use redmine;
</span><span class='line'>Database changed</span></code></pre></td></tr></table></div></figure>


<h3>配置redmine的数据库连接</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd redmine-2.4.0/config
</span><span class='line'>cp database.yml.example database.yml
</span><span class='line'>vi database.yml</span></code></pre></td></tr></table></div></figure>


<p>修改后的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>production:
</span><span class='line'>  adapter: mysql2
</span><span class='line'>  database: redmine
</span><span class='line'>  host: localhost
</span><span class='line'>  username: redmine
</span><span class='line'>  password: redmine
</span><span class='line'>  encoding: utf8
</span></code></pre></td></tr></table></div></figure>


<p>修改redmine的配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp configuration.yml.example configuration.yml
</span><span class='line'>vi configuration.yml</span></code></pre></td></tr></table></div></figure>


<p>修改default和production的内容如下，其他的值都保持不变或根据你自己的需求而变：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default:
</span><span class='line'>  # Outgoing emails configuration (see examples above)
</span><span class='line'>  email_delivery:
</span><span class='line'>    delivery_method: :smtp
</span><span class='line'>    smtp_settings:
</span><span class='line'>      address: 127.0.0.1
</span><span class='line'>      port: 25
</span><span class='line'>      domain: localhost
</span><span class='line'>      authentication: :login
</span><span class='line'>      user_name: "redmine@example.net"
</span><span class='line'>      password: "redmine"
</span><span class='line'>    
</span><span class='line'>...
</span><span class='line'>production:
</span><span class='line'>  email_delivery:
</span><span class='line'>    delivery_method: :smtp
</span><span class='line'>    smtp_settings:
</span><span class='line'>      address: 127.0.0.1
</span><span class='line'>      port: 25
</span><span class='line'>      domain: localhost</span></code></pre></td></tr></table></div></figure>


<h3>生成token</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd redmine-2.4.0
</span><span class='line'>rake generate_secret_token</span></code></pre></td></tr></table></div></figure>


<h3>初始化数据库</h3>

<p>这步主要是创建所需要的表：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production rake db:migrate </span></code></pre></td></tr></table></div></figure>


<h3>导入数据</h3>

<p>现在开始导入数据到数据库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAILS_ENV=production rake redmine:load_default_data
</span><span class='line'>Select language: ar, az, bg, bs, ca, cs, da, de, el, en, en-GB, es, et, eu, fa, fi, fr, gl, he, hr, hu, id, it, ja, ko, lt, lv, mk, mn, nl, no, pl, pt, pt-BR, ro, ru, sk, sl, sq, sr, sr-YU, sv, th, tr, uk, vi, zh, zh-TW [en] zh
</span><span class='line'>====================================
</span><span class='line'>Default configuration data loaded.</span></code></pre></td></tr></table></div></figure>


<p>回车之后会让你做一个选择，直接输入zh即可。</p>

<h3>修改文件系统权限</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chown -R apache:apache files log tmp public/plugin_assets
</span><span class='line'>chmod -R 755 files log tmp public/plugin_assets</span></code></pre></td></tr></table></div></figure>


<h2>整合apache</h2>

<p>首先安装apache http，如果你已经安装，请忽略此步。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install httpd httpd-devel</span></code></pre></td></tr></table></div></figure>


<h3>绑定apache</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install passenger
</span><span class='line'>passenger-install-apache2-module </span></code></pre></td></tr></table></div></figure>


<p>直接按回车。安装完之后创建redmine.conf：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch /etc/httpd/conf.d/redmine.con</span></code></pre></td></tr></table></div></figure>


<p>并添加以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LoadModule passenger_module /usr/lib64/ruby/gems/1.8/gems/passenger-4.0.24/buildout/apache2/mod_passenger.so
</span><span class='line'>PassengerRoot /usr/lib64/ruby/gems/1.8/gems/passenger-4.0.24
</span><span class='line'>PassengerRuby /usr/bin/ruby
</span><span class='line'>
</span><span class='line'>Listen 8888
</span><span class='line'>&lt;VirtualHost *:8888&gt;
</span><span class='line'>   ServerName 192.168.1.108
</span><span class='line'>   DocumentRoot /var/www/html/redmine-2.4.0/public
</span><span class='line'>  &lt;Directory /var/www/html/redmine-2.4.0/public &gt;
</span><span class='line'># This relaxes Apache security settings.
</span><span class='line'>    AllowOverride all
</span><span class='line'> # MultiViews must be turned off.
</span><span class='line'>    Options -MultiViews
</span><span class='line'>   &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>上面有些内容需要你根据实际情况而修改：passenger路径、DocumentRoot</p>

<h3>　启动Apache</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/httpd start</span></code></pre></td></tr></table></div></figure>


<p>通过浏览器访问：<a href="http://ip:8888">http://ip:8888</a>
默认的用户名和密码为：admin     以下是登录后的主页：
<img src="http://agenge.github.io/images/2013/11/redmine-main.jpg"></p>

<p>至于redmine的详细使用，期待下次吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 6 安装RabbitMQ]]></title>
    <link href="http://agenge.github.io/blog/2013/11/17/centos-install-rabbitmq/"/>
    <updated>2013-11-17T21:18:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/11/17/centos-install-rabbitmq</id>
    <content type="html"><![CDATA[<h2>系统信息</h2>

<ul>
<li>操作系统:  CentOS 6.3 64位</li>
<li>Erlang:    5.8.5 64位</li>
<li>RabbitMQ:  3.1.5</li>
</ul>


<h2>安装依赖包</h2>

<h3>启用并安装EPEL(Extra Packeages for Enterprise Linux)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://mirror.neu.edu.cn/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class='line'>rpm -ivh epel-release-6-8.noarch.rpm</span></code></pre></td></tr></table></div></figure>


<p>添加 erlang 仓库源
由于 RabbitMQ 是erlang编写，所以要依赖它</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -O /etc/yum.repos.d/epel-erlang.repo http://repos.fedorapeople.org/repos/peter/erlang/epel-erlang.repo</span></code></pre></td></tr></table></div></figure>


<h3>安装erlang</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum clear all
</span><span class='line'>yum install -y erlang</span></code></pre></td></tr></table></div></figure>


<p>然后测试下erlang是否成功：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>erl -v
</span><span class='line'>Erlang R14B04 (erts-5.8.5) [source] [64-bit] [rq:1] [async-threads:0] [kernel-poll:false]
</span><span class='line'>
</span><span class='line'>Eshell V5.8.5  (abort with ^G)</span></code></pre></td></tr></table></div></figure>


<p>从输出结果来看，已经安装成功，版本信息为：V5.8.5</p>

<hr />

<h2>安装 RabbitMQ</h2>

<p>把依赖包安装好，就可以进行rabbitmq的安装，包名为：rabbitmq-server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install rabbitmq-server</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>启动与设置rabbitmq</h3>

<p>安装之后，我们就可以来启动rabbitmq server，启动方式有两种：
&ndash; 通过系统服务启动</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service rabbitmq-server start
</span><span class='line'>Starting rabbitmq-server: SUCCESS
</span><span class='line'>rabbitmq-server.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>直接运行启动脚本(推荐使用)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/rabbitmq-server start
</span><span class='line'>Starting rabbitmq-server: SUCCESS
</span><span class='line'>rabbitmq-server.</span></code></pre></td></tr></table></div></figure>


<p>除了在终端输出的信息外，还可以通过日志来查看更详细的信息，默认路径为：/var/log/rabbitmq/<a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#114;&#97;&#98;&#x62;&#105;&#x74;&#x40;&#108;&#x6f;&#99;&#97;&#x6c;&#x68;&#x6f;&#115;&#x74;&#46;&#x6c;&#111;&#x67;">&#114;&#x61;&#98;&#x62;&#105;&#x74;&#64;&#108;&#111;&#99;&#x61;&#x6c;&#x68;&#x6f;&#115;&#116;&#46;&#x6c;&#111;&#103;</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>Starting RabbitMQ 3.1.5 on Erlang R14B04
</span><span class='line'>Copyright (C) 2007-2013 GoPivotal, Inc.
</span><span class='line'>Licensed under the MPL.  See http://www.rabbitmq.com/
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>node           : rabbit@localhost
</span><span class='line'>home dir       : /var/lib/rabbitmq
</span><span class='line'>config file(s) : (none)
</span><span class='line'>cookie hash    : GA+C2KHxoRs776SK+Ki+qg==
</span><span class='line'>log            : /var/log/rabbitmq/rabbit@localhost.log
</span><span class='line'>sasl log       : /var/log/rabbitmq/rabbit@localhost-sasl.log
</span><span class='line'>database dir   : /var/lib/rabbitmq/mnesia/rabbit@localhost
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>Limiting to approx 924 file handles (829 sockets)
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>Memory limit set to 398MB of 996MB total.
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>Disk free limit set to 1000MB
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>msg_store_transient: using rabbit_msg_store_ets_index to provide index
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>msg_store_persistent: using rabbit_msg_store_ets_index to provide index
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>started TCP Listener on [::]:5672
</span><span class='line'>
</span><span class='line'>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
</span><span class='line'>Server startup complete; 0 plugins started.</span></code></pre></td></tr></table></div></figure>


<p>除了这个日志，平常在维护及故障排除时，还可以查看其他更多的日志：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tree /var/log/rabbitmq/
</span><span class='line'>/var/log/rabbitmq/
</span><span class='line'>├── rabbit@localhost.log
</span><span class='line'>├── rabbit@localhost-sasl.log
</span><span class='line'>├── shutdown_err
</span><span class='line'>├── shutdown_log
</span><span class='line'>├── startup_err
</span><span class='line'>└── startup_log
</span><span class='line'>
</span><span class='line'>0 directories, 6 files</span></code></pre></td></tr></table></div></figure>


<h3>设置开机启动</h3>

<p>RabbitMQ安装的默认配置是没有开机自启动的，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chkconfig --list rabbitmq-server
</span><span class='line'>rabbitmq-server 0:off   1:off   2:off   3:off   4:off   5:off   6:off</span></code></pre></td></tr></table></div></figure>


<p>设置下rabbitmq为on即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chkconfig --list rabbitmq-server
</span><span class='line'>rabbitmq-server 0:off   1:off   2:on    3:on    4:on    5:on    6:off</span></code></pre></td></tr></table></div></figure>


<p>或者直接指定启动级别：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chkconfig --level 35 rabbitmq-server on
</span><span class='line'>chkconfig --list rabbitmq-server    
</span><span class='line'>rabbitmq-server 0:off   1:off   2:off   3:on    4:off   5:on    6:off</span></code></pre></td></tr></table></div></figure>


<p>另外，RabbitMQ默认还提供一个强大的工具：rabbitmqctl，例如查看RabbitMQ状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rabbitmqctl status</span></code></pre></td></tr></table></div></figure>


<p>输出结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Status of node rabbit@localhost ...
</span><span class='line'>[{pid,1961},
</span><span class='line'> {running_applications,[{rabbit,"RabbitMQ","3.1.5"},
</span><span class='line'>                        {os_mon,"CPO  CXC 138 46","2.2.7"},
</span><span class='line'>                        {xmerl,"XML parser","1.2.10"},
</span><span class='line'>                        {mnesia,"MNESIA  CXC 138 12","4.5"},
</span><span class='line'>                        {sasl,"SASL  CXC 138 11","2.1.10"},
</span><span class='line'>                        {stdlib,"ERTS  CXC 138 10","1.17.5"},
</span><span class='line'>                        {kernel,"ERTS  CXC 138 10","2.14.5"}]},
</span><span class='line'> {os,{unix,linux}},
</span><span class='line'> {erlang_version,"Erlang R14B04 (erts-5.8.5) [source] [64-bit] [rq:1] [async-threads:30] [kernel-poll:true]\n"},
</span><span class='line'> {memory,[{total,26976648},
</span><span class='line'>          {connection_procs,2648},
</span><span class='line'>          {queue_procs,5296},
</span><span class='line'>          {plugins,0},
</span><span class='line'>          {other_proc,9052880},
</span><span class='line'>          {mnesia,56656},
</span><span class='line'>          {mgmt_db,0},
</span><span class='line'>          {msg_index,33664},
</span><span class='line'>          {other_ets,761160},
</span><span class='line'>          {binary,1872},
</span><span class='line'>          {code,14419185},
</span><span class='line'>          {atom,1354457},
</span><span class='line'>          {other_system,1288830}]},
</span><span class='line'> {vm_memory_high_watermark,0.4},
</span><span class='line'> {vm_memory_limit,418077081},
</span><span class='line'> {disk_free_limit,1000000000},
</span><span class='line'> {disk_free,49057206272},
</span><span class='line'> {file_descriptors,[{total_limit,924},
</span><span class='line'>                    {total_used,3},
</span><span class='line'>                    {sockets_limit,829},
</span><span class='line'>                    {sockets_used,1}]},
</span><span class='line'> {processes,[{limit,1048576},{used,122}]},
</span><span class='line'> {run_queue,0},
</span><span class='line'> {uptime,836}]
</span><span class='line'>...done.</span></code></pre></td></tr></table></div></figure>


<h3>安装管理界面插件</h3>

<p>除了命令行管理工具，还提供了一个WEB管理界面，该管理界面是以插件的方式存在，不过默认没有启用，要启用它也很简单：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/lib/rabbitmq/bin/rabbitmq-plugins enable rabbitmq_management</span></code></pre></td></tr></table></div></figure>


<p>如果启用成功，将会提示如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The following plugins have been enabled:
</span><span class='line'>  mochiweb
</span><span class='line'>  webmachine
</span><span class='line'>  rabbitmq_web_dispatch
</span><span class='line'>  amqp_client
</span><span class='line'>  rabbitmq_management_agent
</span><span class='line'>  rabbitmq_management
</span><span class='line'>Plugin configuration has changed. Restart RabbitMQ for changes to take effect.</span></code></pre></td></tr></table></div></figure>


<p>提示重启rabbitmq server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/rabbitmq-server restart
</span><span class='line'>Restarting rabbitmq-server: SUCCESS
</span><span class='line'>rabbitmq-server.</span></code></pre></td></tr></table></div></figure>


<p>通过浏览器打开: <a href="http://192.168.1.108:55672/mgmt/">http://192.168.1.108:55672/mgmt/</a> ，默认的用户名和密码都是guest.</p>

<p>RabbitMQ管理界面的截图：
<img src="http://agenge.github.io/images/2013/11/rabbitmq-mg.jpg"></p>

<p>如果无法打开，可能会是以下几个问题造成的：</p>

<ul>
<li>RabbitMQ Server可能启动失败，进一步的排错可通过查看详细的日志。</li>
<li>防火墙阻挡，包括iptables和企业内部防火墙。</li>
<li>SELinux开启，禁用它即可。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Centos 6.X 安装KVM与安装实例]]></title>
    <link href="http://agenge.github.io/blog/2013/11/15/centos-install-kvm-and-install-vm/"/>
    <updated>2013-11-15T21:58:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/11/15/centos-install-kvm-and-install-vm</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>虚拟化已经不是一个新鲜话题，不过仍然看到很多新手连KVM都没有入门，甚至是先接触OpenStack才遇到KVM，所以今天给各位新手提供一个安装教程。</p>

<h2>安装KVM依赖包</h2>

<p>目前绝大部分的CPU都支持Intel VT或AMD-V ，此处检查步骤略过。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install -y bridge-utils kvm kmod-kvm qemu kvm-qemu-img virt-viewer virt-manager libvirt libvirt-python python-virtinst</span></code></pre></td></tr></table></div></figure>


<p>创建一个叫 br0 的网桥：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /etc/sysconfig/network-scripts/
</span><span class='line'>cp ifcfg-eth0 ifcfg-br0
</span><span class='line'>vi ifcfg-eth0 </span></code></pre></td></tr></table></div></figure>


<p>增加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BRIDGE=br0</span></code></pre></td></tr></table></div></figure>


<p>将ifcfg-br0 修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE="br0"
</span><span class='line'>TYPE="Bridge"</span></code></pre></td></tr></table></div></figure>


<p>然后重启网络：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/network restart
</span><span class='line'>ifconfig br0
</span><span class='line'>/etc/init.d/libvirtd restart</span></code></pre></td></tr></table></div></figure>


<p>经过上面的简单安装与设置之后，KVM就已经安装完成，但怎么通过命令行创建虚拟机呢？</p>

<h2>创建虚拟机</h2>

<!-- more -->


<p>创建一个磁盘文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu-img create -f qcow2 /data/kvm_data/centos5.img 8g</span></code></pre></td></tr></table></div></figure>


<p>创建一个新的虚拟机</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># -n 虚拟机名称  
</span><span class='line'># --vcpus 分配虚拟机CPU个数
</span><span class='line'># -r 分配内存大小 默认为MB
</span><span class='line'># -f 指定虚拟机的磁盘文件路径
</span><span class='line'># -s 磁盘文件固定大小，例如-s 10 立即扩展到10G
</span><span class='line'># -c 镜像文件位置
</span><span class='line'># --vnc --vncport=590X --vnclisten=0.0.0.0  通过VNC连接安装操作系统
</span><span class='line'># --os-type linux 安装一个linux虚拟机
</span><span class='line'># --network=bridge:br0  网络连接方式：使用一个叫br0的网桥 
</span><span class='line'>virt-install --connect qemu:///system -n test01 --vcpus=1 \
</span><span class='line'>  -r 1024 --virt-type=kvm -f /data/kvm_data/centos5.img -s 10 \
</span><span class='line'>  -c /data/iso/CentOS-5.5-x86_64-bin-DVD-1of2.iso \
</span><span class='line'>  --vnc --vncport=5903 --vnclisten=0.0.0.0 --os-type linux --accelerate \
</span><span class='line'>  --network=bridge:br0 </span></code></pre></td></tr></table></div></figure>


<p>自动安装CentOS 6.3
由于我在公司内部搭建了个无人值守服务，所幸可以直接安装使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virt-install --connect qemu:///system -n test03 --vcpus=1 \
</span><span class='line'>  -r 2048 --virt-type=kvm -f /data/kvm_data/test03.img -s 20 \
</span><span class='line'>  --vnc --vncport=5902 --vnclisten=0.0.0.0 \
</span><span class='line'>  --os-type linux --accelerate \
</span><span class='line'>  --network=bridge:br0 \
</span><span class='line'>  -x ks=ftp://192.168.30.33/pub/ks/64/centos6.3/ks.cfg \
</span><span class='line'>  --location ftp://192.168.30.33/pub/centos/6.3/x86_64/</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>查看所有虚拟机(包括已经关闭的虚拟机)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh list --all
</span><span class='line'>virsh destroy ID/NAME  关闭虚拟机
</span><span class='line'>virsh start NAME   启动虚拟机
</span><span class='line'>virsh console ID/NAME  控制台连接虚拟机</span></code></pre></td></tr></table></div></figure>


<p>安装虚拟机之后如何连接呢？ 有两种选择：VNC和Console，由于偶工作时不太喜欢图形界面，还是命令行吧
实现控制台连接需要在虚拟机做一些配置，如下：</p>

<ul>
<li>修改etc/grub.conf 添加“console=ttyS0</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>title CentOS (2.6.18-128.1.10.el5)
</span><span class='line'>    root (hd0,0)
</span><span class='line'>    kernel /boot/vmlinuz-2.6.18-128.1.10.el5 ro root=LABEL=/ console=ttyS0
</span><span class='line'>    initrd /boot/initrd-2.6.18-128.1.10.el5.img</span></code></pre></td></tr></table></div></figure>


<p>添加ttyS0到/etc/securetty</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo ttyS0 &gt;&gt; /etc/securetty</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改/etc/inittab添加下面这行：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>S0:12345:respawn:/sbin/agetty ttyS0 115200</span></code></pre></td></tr></table></div></figure>


<p>重启系统之后，使用语法为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh console vm_name</span></code></pre></td></tr></table></div></figure>


<p>你还可以任何时刻退出控制台，快捷键为：ctrl+]</p>

<p>今天就暂时分享这些内容，下次有机会将分享一个关于Xen相关的教程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack安装与部署(Havana)]]></title>
    <link href="http://agenge.github.io/blog/2013/11/10/openstack-install-with-deploy-for-havana/"/>
    <updated>2013-11-10T13:19:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/11/10/openstack-install-with-deploy-for-havana</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>首先得说明一下，此教程是基于H版部署，由于时间关系，文章可能会有错误，如果有发现错误之处，请直接回复，感谢。</p>

<h2>环境准备</h2>

<h3>资源列表</h3>

<p> <img src="http://agenge.github.io/images/2013/11/openstack-host-list.png" title="" ></p>

<h3>网络配置</h3>

<p>控制节点controller网络配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Internal Network
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>address 10.0.0.11
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>
</span><span class='line'>#External Netwok
</span><span class='line'>auto eth1
</span><span class='line'>iface eth1 inet static
</span><span class='line'>address 192.168.30.150
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.30.1
</span><span class='line'>dns-nameservers 218.201.4.3</span></code></pre></td></tr></table></div></figure>


<p>计算节点compute01网络配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Internal Network
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>address 10.0.0.13
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>
</span><span class='line'>#External Netwok
</span><span class='line'>auto eth1
</span><span class='line'>iface eth1 inet static
</span><span class='line'>address 192.168.30.151
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.30.1
</span><span class='line'>dns-nameservers 218.201.4.3</span></code></pre></td></tr></table></div></figure>


<p>设置hostname，在所有节点的/etc/hosts中加入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.0.0.11       controller
</span><span class='line'>10.0.0.13       compute01</span></code></pre></td></tr></table></div></figure>


<p>重启网络</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service networking restart</span></code></pre></td></tr></table></div></figure>


<p>IP转发</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
</span><span class='line'>sysctl -p</span></code></pre></td></tr></table></div></figure>


<h3>时间同步</h3>

<p>安装NTP：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y ntp
</span><span class='line'>sed -i 's/server ntp.ubuntu.com/server ntp.ubuntu.com\nserver 127.127.1.0\nfudge 127.127.1.0 stratum 10/g' /etc/ntp.conf
</span><span class='line'>sudo /etc/init.d/ntp restart</span></code></pre></td></tr></table></div></figure>


<p>其他节点的server都指向控制节点：10.0.0.11</p>

<h3>Mysql和rabbitmq安装</h3>

<p>在控制节点执行，安装过程中会提示输入几个密码，此处为了方便，密码统一设置为openstack (是不是应该打马赛克？)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y mysql-server python-mysqldb 
</span><span class='line'>sed -i 's/127.0.0.1/10.0.0.11/g' /etc/mysql/my.cnf
</span><span class='line'>/etc/init.d/mysql restart
</span><span class='line'>
</span><span class='line'>apt-get install -y rabbitmq-server</span></code></pre></td></tr></table></div></figure>


<h3>添加Havana 仓库</h3>

<p>安装 Keyring</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install ubuntu-cloud-keyring</span></code></pre></td></tr></table></div></figure>


<p>添加仓库源</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/havana main" &gt;&gt; /etc/apt/sources.list.d/cloudarchive-havana.list
</span><span class='line'>echo "deb-src http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/havana main" &gt;&gt; /etc/apt/sources.list.d/cloudarchive-havana.list</span></code></pre></td></tr></table></div></figure>


<p>更新系统</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get update
</span><span class='line'>apt-get dist-upgrade</span></code></pre></td></tr></table></div></figure>


<p>如果遇到无法update，多半是网络运营商缓存问题导致的，这时使用代理搞定吧：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get -o Acquire::http::proxy="http://127.0.0.1:8087/" update</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>初始化数据库</h3>

<p>在控制节点执行，创建数据库，并设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -uroot -p</span></code></pre></td></tr></table></div></figure>


<p>输入密码后执行以下SQL语句</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE DATABASE keystone;
</span><span class='line'>CREATE DATABASE nova;
</span><span class='line'>CREATE DATABASE cinder;
</span><span class='line'>CREATE DATABASE glance;
</span><span class='line'>CREATE DATABASE neutron;
</span><span class='line'>CREATE DATABASE heat;
</span><span class='line'>GRANT ALL ON neutron.* TO neutron@'%' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON neutron.* TO neutron@'10.0.0.11' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON keystone.* TO neutron@'%' IDENTIFIED BY 'openstack';
</span><span class='line'>
</span><span class='line'>GRANT ALL ON keystone.* TO keystone@'%' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON keystone.* TO keystone@'10.0.0.11' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON nova.* TO nova@'%' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON nova.* TO nova@'10.0.0.11' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON cinder.* TO cinder@'%' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON cinder.* TO cinder@'10.0.0.11' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON glance.* TO glance@'%' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON glance.* TO glance@'10.0.0.11' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON heat.* TO heat@'%' IDENTIFIED BY 'openstack';
</span><span class='line'>GRANT ALL ON heat.* TO heat@'10.0.0.11' IDENTIFIED BY 'openstack';
</span><span class='line'>
</span><span class='line'>flush privileges;</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是以上的IP需要你自己根据实际情况而修改。</p>

<hr />

<h2>控制节点</h2>

<h3>Identity Service(Keystone)安装</h3>

<p>在控制节点安装认证服务keystone</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y keystone python-keystone python-keystoneclient</span></code></pre></td></tr></table></div></figure>


<h4>Keystone配置</h4>

<p>keystone支持mysql、sqlite及LDAP，以下示例我们将使用Mysql来存储keystone认证信息。</p>

<p>在控制节点修改/etc/keystone/keystone.conf配置文件，注释第78行：</p>

<pre><code>connection = sqlite:////var/lib/keystone/keystone.db
</code></pre>

<p>加入：</p>

<pre><code>connection = mysql://keystone:openstack@10.0.0.11/keystone
</code></pre>

<p>重启keystone后，初始化数据库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone-manage db_sync
</span><span class='line'>/etc/init.d/keystone restart</span></code></pre></td></tr></table></div></figure>


<p>配置openssl
在keystone与OpenStack服务之间如果要使用ssl进行token认证，就需要使用到openssl</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl rand -hex 10
</span><span class='line'>8ac14959ce3d1a4fe213</span></code></pre></td></tr></table></div></figure>


<p>修改/etc/keystone/keystone.conf的 [DEFAULT]章节
将 admin_token = admin 修改成：</p>

<pre><code>admin_token = 8ac14959ce3d1a4fe213
</code></pre>

<p>再次重启keystone，使其生效</p>

<pre><code>/etc/init.d/keystone restart
</code></pre>

<p>创建User、Tenant、Role、Endpoint、Service
首先创建两个环境变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export SERVICE_TOKEN=8ac14959ce3d1a4fe213 
</span><span class='line'>export SERVICE_ENDPOINT=http://10.0.0.11:35357/v2.0</span></code></pre></td></tr></table></div></figure>


<h4>创建租户</h4>

<p>创建两个租户分别是：admin和service</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone tenant-create --name=admin --description="Admin Tenant"
</span><span class='line'>keystone tenant-create --name=service --description="Service Tenant"</span></code></pre></td></tr></table></div></figure>


<p>上面2个id 暂时需要记录下来，后面将会用到，例如这里是：</p>

<pre><code>admin   a2ba2a4cd7f54d3b9bed90e16def2b8f
service 208807d34ff7455e93b39a2820265349
</code></pre>

<h4>创建用户</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-create --name=admin --pass=openstack \
</span><span class='line'>--email=admin@domain.com --tenant_id=a2ba2a4cd7f54d3b9bed90e16def2b8f \
</span><span class='line'>--enable=True</span></code></pre></td></tr></table></div></figure>


<p>user id同样需要记录下来，例如这里是：
UserId  4fe9772510254b1083962b77d72643c3</p>

<h4>创建角色</h4>

<p>创建一个名称为admin的角色</p>

<pre><code>keystone role-create --name=admin
</code></pre>

<p>截止到目前，已经分别创建 Tenant、User、Role，先不管Service这个租户，分别是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tenant ID: a2ba2a4cd7f54d3b9bed90e16def2b8f
</span><span class='line'>User ID:  133e4aa56bba4400a2ccfd4a3ec08b18
</span><span class='line'>Role ID:  0a788b82f9bb4e849af2b402931f58d2</span></code></pre></td></tr></table></div></figure>


<p>H版现在不需要我们记录具体的id，貌似只需要指定 名称 即可。</p>

<h4>关联用户、角色、租户</h4>

<p>光创建上面那些身份还不够，最终需要将它们关联起来才能正常使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-role-add --user admin --role admin --tenant admin</span></code></pre></td></tr></table></div></figure>


<h4>创建Services 及 API endpoints</h4>

<p>首先创建一个类型为identity的keystone服务，名称为keystone：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone service-create --name=keystone --type=identity \
</span><span class='line'>--description="Keystone Identity Service"</span></code></pre></td></tr></table></div></figure>


<p>创建endpoint，同样只需要记住service name即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone endpoint-create --region regionOne \
</span><span class='line'>--service  keystone  \
</span><span class='line'>--publicurl http://10.0.0.11:5000/v2.0 \
</span><span class='line'>--internalurl http://10.0.0.11:5000/v2.0 \
</span><span class='line'>--adminurl http://10.0.0.11:35357/v2.0</span></code></pre></td></tr></table></div></figure>


<p>验证认证服务(Keystone)安装是否成功
先unset之前的环境变量：</p>

<pre><code>unset OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT
</code></pre>

<p>创建keystonerc(环境变量)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export OS_REGION_NAME=regionOne
</span><span class='line'>export OS_USERNAME=admin
</span><span class='line'>#export OS_AUTH_STRATEGE=keystone
</span><span class='line'>export OS_PASSWORD=openstack
</span><span class='line'>export OS_TENANT_NAME=admin
</span><span class='line'>export OS_AUTH_URL=http://10.0.0.11:35357/v2.0
</span><span class='line'>OS_NO_CACHE=true</span></code></pre></td></tr></table></div></figure>


<p>添加环境变量
为避免我们每次登录都要设置环境变量，现在将上面参数直接写到一个文件中，在每天登录时使其自动生效，这样我们后期就可以直接通过  keystone subcommand 来使用，创建keystonerc文件，并将下列信息写入keystonerc ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export OS_USERNAME=admin
</span><span class='line'>export OS_PASSWORD=openstack
</span><span class='line'>export OS_TENANT_NAME=admin
</span><span class='line'>export OS_AUTH_URL=http://10.0.0.11:35357/v2.0</span></code></pre></td></tr></table></div></figure>


<p>保存之后并使环境变量立即生效：</p>

<pre><code>source keystonerc
</code></pre>

<p>如果没问题，就能看到token信息。但如果有错误，建议注销当前用户，重新登录后测试一下。</p>

<p>测试是否正常：</p>

<pre><code>keystone token-get
</code></pre>

<p>如果配置正常，将会显示token expires\id\tenant_id\user_id四行。
下一步，我们加一个 &mdash;os_tenant_name参数试下：</p>

<pre><code>keystone --os_tenant_name admin token-get
</code></pre>

<p>如果没问题，将会响应和上面类似的输出信息，区别仅是多一行 tenant_id</p>

<hr />

<h3>Image Service(Glance)安装</h3>

<p>镜像服务我们安装在keystone同一台机器，首先直接安装 镜像服务：</p>

<pre><code>apt-get install -y glance
</code></pre>

<h4>Glance配置</h4>

<p>更新glance配置文件glance-registry.conf：</p>

<pre><code>vim /etc/glance/glance-registry.conf
</code></pre>

<p>修改mysql数据库连接字符串：</p>

<pre><code>sql_connection = mysql://glance:openstack@10.0.0.11/glance
</code></pre>

<p>更新glance配置文件：</p>

<pre><code>vim /etc/glance/glance-api.conf
</code></pre>

<p>在[DEFAULT]章节加入：</p>

<pre><code>sql_connection = mysql://glance:openstack@10.0.0.11/glance
</code></pre>

<p>同步数据库，将会创建镜像服务相关的表：</p>

<pre><code>glance-manage db_sync
</code></pre>

<h4>创建用户</h4>

<p>创建名称为glance的认证用户</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-create --name=glance --pass=glance \
</span><span class='line'>--email=glance@domain.com \
</span><span class='line'>--tenant service --enable=True</span></code></pre></td></tr></table></div></figure>


<p>注意，此处的 tenant 就是租户service。</p>

<p>配置Glance与 Keystone访问
编辑配置文件/etc/glance/glance-api.conf 和 /etc/glance/glance-registry.conf，在最后加入以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[keystone_authtoken]
</span><span class='line'>auth_host = 10.0.0.11
</span><span class='line'>auth_port = 35357
</span><span class='line'>auth_protocol = http
</span><span class='line'>admin_tenant_name = service
</span><span class='line'>admin_user = glance
</span><span class='line'>admin_password = glance</span></code></pre></td></tr></table></div></figure>


<p>编辑配置文件/etc/glance/glance-api-paste.ini和/etc/glance/glance-registry-paste.ini，将最后几行修改成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[filter:authtoken]
</span><span class='line'>paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
</span><span class='line'>service_protocol = http
</span><span class='line'>service_host = 10.0.0.11
</span><span class='line'>service_port = 5000
</span><span class='line'>auth_host = 10.0.0.11
</span><span class='line'>auth_port = 35357
</span><span class='line'>auth_protocol = http
</span><span class='line'>auth_uri = http://10.0.0.11:5000/
</span><span class='line'>admin_tenant_name = service
</span><span class='line'>admin_user = glance
</span><span class='line'>admin_password = glance</span></code></pre></td></tr></table></div></figure>


<h4>创建service服务和endpoint</h4>

<pre><code>keystone service-create --name=glance --type=image --description="Glance Image Service"
</code></pre>

<p>记录service id，下面创建endpoint将会用到。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone endpoint-create --region regionOne \
</span><span class='line'>--service glance \
</span><span class='line'>--publicurl=http://10.0.0.11:9292 \
</span><span class='line'>--internalurl=http://10.0.0.11:9292 \
</span><span class='line'>--adminurl=http://10.0.0.11:9292</span></code></pre></td></tr></table></div></figure>


<h4>重启glance服务</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/glance-registry restart
</span><span class='line'>/etc/init.d/glance-api restart</span></code></pre></td></tr></table></div></figure>


<p>测试镜像服务是否安装成功
镜像文件可以从互联网下载，或自己制作，centos-63.x86_64-cloud.qcow2是偶自己制作的一个镜像文件，即创建一个名称为 centos-63.x86_64-cloud的镜像文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>glance image-create --name centos-63.x86_64-cloud \
</span><span class='line'>--is-public true --container-format bare \
</span><span class='line'>--disk-format qcow2 &lt; /home/openstack/centos-63.x86_64-cloud.qcow2</span></code></pre></td></tr></table></div></figure>


<p>如果一切正常，会输出类似以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+------------------+--------------------------------------+
</span><span class='line'>| Property         | Value                                |
</span><span class='line'>+------------------+--------------------------------------+
</span><span class='line'>| checksum         | 5c80ad5a5667308b74f6f024317f9924     |
</span><span class='line'>| container_format | bare                                 |
</span><span class='line'>| created_at       | 2013-10-21T12:21:24                  |
</span><span class='line'>| deleted          | False                                |
</span><span class='line'>| deleted_at       | None                                 |
</span><span class='line'>| disk_format      | qcow2                                |
</span><span class='line'>| id               | 79a7fe9f-7f0a-480f-a60d-68f9271ce230 |
</span><span class='line'>| is_public        | True                                 |
</span><span class='line'>| min_disk         | 0                                    |
</span><span class='line'>| min_ram          | 0                                    |
</span><span class='line'>| name             | centos-63.x86_64-cloud               |
</span><span class='line'>| owner            | None                                 |
</span><span class='line'>| protected        | False                                |
</span><span class='line'>| size             | 462219776                            |
</span><span class='line'>| status           | active                               |
</span><span class='line'>| updated_at       | 2013-10-21T12:21:27                  |
</span><span class='line'>+------------------+--------------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>检查上传是否成功</p>

<pre><code>glance image-list
</code></pre>

<p>如果 Status字段为 active表示上传成功。</p>

<h3>Compute Service(Nova)安装</h3>

<p>控制节点如果在管理并控制计算服务，需要依赖nova，首先安装以下nova包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y nova-novncproxy novnc nova-api \
</span><span class='line'>nova-ajax-console-proxy nova-cert nova-conductor \
</span><span class='line'>nova-consoleauth nova-doc nova-scheduler python-novaclient</span></code></pre></td></tr></table></div></figure>


<h4>Nova配置</h4>

<p>修改/etc/nova/nova.conf配置文件，在最后加入：</p>

<pre><code>sql_connection=mysql://nova:openstack@10.0.0.11/nova
</code></pre>

<p>为nova服务创建数据库表：</p>

<pre><code>nova-manage db sync
</code></pre>

<p>配置VNC，修改配置文件/etc/nova/nova.conf，在最后加入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># VNC 
</span><span class='line'>novnc_enabled=True
</span><span class='line'>my_ip=192.168.30.150
</span><span class='line'>novncproxy_base_url=http://192.168.30.150:6080/vnc_auto.html
</span><span class='line'>vncserver_listen=0.0.0.0</span></code></pre></td></tr></table></div></figure>


<h4>创建用户与角色</h4>

<p>现在创建一个名称为nova的认证用户和角色</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-create --name=nova --pass=nova \
</span><span class='line'>--email=nova@domain.com \
</span><span class='line'>--tenant service --enable=True
</span><span class='line'>keystone user-role-add --user=nova --tenant=service --role=admin</span></code></pre></td></tr></table></div></figure>


<p>修改配置文件/etc/nova/nova.conf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>
</span><span class='line'>auth_strategy=keystone</span></code></pre></td></tr></table></div></figure>


<p>修改配置文件/etc/nova/api-paste.ini,并修改以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[filter:authtoken]
</span><span class='line'>paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
</span><span class='line'>auth_host = 10.0.0.11
</span><span class='line'>auth_host = 10.0.0.11
</span><span class='line'>auth_port = 35357
</span><span class='line'>admin_tenant_name = service
</span><span class='line'>admin_user = nova
</span><span class='line'>admin_password = nova</span></code></pre></td></tr></table></div></figure>


<h4>创建service服务和endpoint</h4>

<pre><code>keystone service-create --name=nova --type=compute --description="Nova Compute Service"
</code></pre>

<p>创建endpoint</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone endpoint-create --service nova \
</span><span class='line'> --publicurl=http://10.0.0.11:8774/v2/%\(tenant_id\)s \
</span><span class='line'> --internalurl=http://10.0.0.11:8774/v2/%\(tenant_id\)s \
</span><span class='line'> --adminurl=http://10.0.0.11:8774/v2/%\(tenant_id\)s</span></code></pre></td></tr></table></div></figure>


<p>配置计算服务使用RabbitMQ,修改配置文件/etc/nova/nova.conf，添加以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpc_backend=nova.rpc.impl_kombu
</span><span class='line'>rabbit_host = 10.0.0.11</span></code></pre></td></tr></table></div></figure>


<p>nova.conf全部内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>dhcpbridge_flagfile=/etc/nova/nova.conf
</span><span class='line'>dhcpbridge=/usr/bin/nova-dhcpbridge
</span><span class='line'>logdir=/var/log/nova
</span><span class='line'>state_path=/var/lib/nova
</span><span class='line'>lock_path=/var/lock/nova
</span><span class='line'>force_dhcp_release=True
</span><span class='line'>iscsi_helper=tgtadm
</span><span class='line'>libvirt_use_virtio_for_bridges=True
</span><span class='line'>libvirt_type=qemu
</span><span class='line'>connection_type=libvirt
</span><span class='line'>root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf
</span><span class='line'>verbose=True
</span><span class='line'>ec2_private_dns_show_ip=True
</span><span class='line'>api_paste_config=/etc/nova/api-paste.ini
</span><span class='line'>volumes_path=/var/lib/nova/volumes
</span><span class='line'>enabled_apis=ec2,osapi_compute,metadata
</span><span class='line'>sql_connection=mysql://nova:openstack@10.0.0.11/nova
</span><span class='line'>
</span><span class='line'>#Metadata
</span><span class='line'>metadata_host=10.0.0.11
</span><span class='line'>metadata_manager=nova.api.manager.MetadataManager
</span><span class='line'>metadata_listen=10.0.0.11
</span><span class='line'>metadata_listen_port=8775
</span><span class='line'>#service_neutron_metadata_proxy=True
</span><span class='line'>#neutron_metadata_proxy_shared_secret=helloOpenStack
</span><span class='line'>
</span><span class='line'># Cinder 
</span><span class='line'>volume_api_class=nova.volume.cinder.API
</span><span class='line'>osapi_volume_listen_port=5900
</span><span class='line'>
</span><span class='line'>auth_strategy=keystone
</span><span class='line'>rpc_backend=nova.rpc.impl_kombu
</span><span class='line'>rabbit_host = 10.0.0.11
</span><span class='line'>
</span><span class='line'># VNC 
</span><span class='line'>novnc_enabled=True
</span><span class='line'>my_ip=192.168.30.150
</span><span class='line'>novncproxy_base_url=http://192.168.30.150:6080/vnc_auto.html
</span><span class='line'>vncserver_listen=0.0.0.0
</span><span class='line'>#vncserver_proxyclient_address=192.168.30.150
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#Network settings
</span><span class='line'>network_manager=nova.network.manager.FlatDHCPManager
</span><span class='line'>force_dhcp_release=True
</span><span class='line'>dhcpbridge_flagfile=/etc/nova/nova.conf
</span><span class='line'>dhcpbridge=/usr/bin/nova-dhcpbridge
</span><span class='line'>firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver
</span><span class='line'>public_interface=eth1
</span><span class='line'>flat_interface=eth0
</span><span class='line'>floating_range=192.168.30.0/24
</span><span class='line'>flat_network_bridge=br100
</span><span class='line'>fixed_range=10.0.0.0/24   
</span><span class='line'>network_size=256
</span><span class='line'># disabled ipv6
</span><span class='line'>flat_injected=False
</span><span class='line'>connection_type=libvirt
</span><span class='line'>multi_host=True</span></code></pre></td></tr></table></div></figure>


<p>重启所有nova服务</p>

<pre><code>cd /etc/init.d/; for i in $( ls nova-* ); do sudo service $i restart; done
</code></pre>

<p>测试nova是否安装正常</p>

<pre><code>nova image-list
</code></pre>

<p>如果正常，输出的信息和glance image-list是一样的。</p>

<h3>Dashborad(Horizon)安装</h3>

<h4>安装dashboard</h4>

<p>这一步相对容易多了，请看操作：</p>

<pre><code>apt-get install -y memcached libapache2-mod-wsgi openstack-dashboard
</code></pre>

<p>修改/etc/openstack-dashboard/local_settings.py
将OPENSTACK_HOST修改为：</p>

<pre><code>OPENSTACK_HOST = "10.0.0.11"
</code></pre>

<p>登陆dashborad：<a href="http://192.168.30.150/horizon">http://192.168.30.150/horizon</a></p>

<hr />

<h2>计算节点</h2>

<p>以下的示例暂时以一台计算节点来测试安装与部署，即10.0.0.13</p>

<h3>Compute Service(Nova)安装</h3>

<p>为计算节点安装相关的包</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y python-mysqldb 
</span><span class='line'>apt-get install nova-compute-kvm python-novaclient python-guestfs</span></code></pre></td></tr></table></div></figure>


<p>安装过程会提示你，选择”yes”即可。</p>

<p>以下是修复guestfs的一个bug</p>

<pre><code>chmod 0644 /boot/vmlinuz*
</code></pre>

<p>删除SQLite创建的数据库</p>

<pre><code>rm -f /var/lib/nova/nova.sqlite
</code></pre>

<p>配置VNC，编辑/etc/nova/nova.conf在[DEFAULT]章节添加以下信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#VNC
</span><span class='line'>novnc_enabled=True
</span><span class='line'>novncproxy_base_url=http://192.168.30.150:6080/vnc_auto.html
</span><span class='line'>novncproxy_port=6080
</span><span class='line'>vncserver_listen=0.0.0.0
</span><span class='line'>vncserver_proxyclient_address=192.168.30.151</span></code></pre></td></tr></table></div></figure>


<p>编辑/etc/nova/nova.conf，在[DEFAULT]章节添加以下信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>glance_host=10.0.0.11
</span><span class='line'>sql_connection=mysql://nova:openstack@10.0.0.11/nova</span></code></pre></td></tr></table></div></figure>


<p>添加keystone认证，从控制节点复制api-paste.conf或编辑/etc/nova/api-paste.conf，并添加以下信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[filter:authtoken]
</span><span class='line'>paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
</span><span class='line'>auth_host = 10.0.0.11
</span><span class='line'>auth_port = 35357
</span><span class='line'>auth_protocol = http
</span><span class='line'>admin_tenant_name = service
</span><span class='line'>admin_user = nova
</span><span class='line'>admin_password = nova</span></code></pre></td></tr></table></div></figure>


<h4>启用网络</h4>

<p>在计算节点启用网络
本节的网络示例均使用的nova-network，如果使用neutron，请见Networking Server安装一章。
首先为计算服务安装nova网络包</p>

<pre><code>apt-get install -y nova-network
</code></pre>

<p>设置网络，编辑/etc/nova/nova.conf，增加以下信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>network_manager=nova.network.manager.FlatDHCPManager
</span><span class='line'>firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver
</span><span class='line'>network_size=254
</span><span class='line'>allow_same_net_traffic=False
</span><span class='line'>multi_host=True
</span><span class='line'>send_arp_for_ha=True
</span><span class='line'>share_dhcp_address=True
</span><span class='line'>force_dhcp_release=True
</span><span class='line'>flat_network_bridge=br100
</span><span class='line'>flat_interface=eth1
</span><span class='line'>public_interface=eth1</span></code></pre></td></tr></table></div></figure>


<p>nova.conf 全部内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>#notification_driver=ceilometer.compute.nova_notifier
</span><span class='line'>#notification_driver=nova.openstack.common.notifier.rpc_notifier
</span><span class='line'>dhcpbridge_flagfile=/etc/nova/nova.conf
</span><span class='line'>dhcpbridge=/usr/bin/nova-dhcpbridge
</span><span class='line'>logdir=/var/log/nova
</span><span class='line'>state_path=/var/lib/nova
</span><span class='line'>lock_path=/var/lock/nova
</span><span class='line'>force_dhcp_release=True
</span><span class='line'>iscsi_helper=tgtadm
</span><span class='line'>libvirt_use_virtio_for_bridges=True
</span><span class='line'>connection_type=libvirt
</span><span class='line'>root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf
</span><span class='line'>verbose=True
</span><span class='line'>ec2_private_dns_show_ip=True
</span><span class='line'>api_paste_config=/etc/nova/api-paste.ini
</span><span class='line'>volumes_path=/var/lib/nova/volumes
</span><span class='line'>enabled_apis=ec2,osapi_compute,metadata
</span><span class='line'>sql_connection=mysql://nova:openstack@10.0.0.11/nova
</span><span class='line'>libvirt_type=qemu
</span><span class='line'>
</span><span class='line'># Cinder
</span><span class='line'>volume_api_class=nova.volume.cinder.API
</span><span class='line'>osapi_volume_listen_port=5900
</span><span class='line'>cinder_catalog_info=volume:cinder:internalURL
</span><span class='line'>
</span><span class='line'># Metadata
</span><span class='line'>metadata_host=10.0.0.11
</span><span class='line'>metadata_manager=nova.api.manager.MetadataManager
</span><span class='line'>metadata_listen=10.0.0.11
</span><span class='line'>metadata_listen_port=8775
</span><span class='line'>#service_neutron_metadata_proxy=True
</span><span class='line'>#neutron_metadata_proxy_shared_secret=helloOpenStack
</span><span class='line'>
</span><span class='line'># Compute
</span><span class='line'>compute_driver=libvirt.LibvirtDriver
</span><span class='line'>
</span><span class='line'># RabbitMQ
</span><span class='line'>rpc_backend = nova.rpc.impl_kombu
</span><span class='line'>rabbit_host = 10.0.0.11
</span><span class='line'>
</span><span class='line'># Image Servic3
</span><span class='line'>glance_host=10.0.0.11
</span><span class='line'>image_service=nova.image.glance.GlanceImageService
</span><span class='line'>
</span><span class='line'>#VNC
</span><span class='line'>novnc_enabled=True
</span><span class='line'>#my_ip=192.168.30.151
</span><span class='line'>novncproxy_base_url=http://192.168.30.150:6080/vnc_auto.html
</span><span class='line'>novncproxy_port=6080
</span><span class='line'>vncserver_listen=0.0.0.0
</span><span class='line'>vncserver_proxyclient_address=192.168.30.151
</span><span class='line'>
</span><span class='line'># Netwok settings
</span><span class='line'>network_manager=nova.network.manager.FlatDHCPManager
</span><span class='line'>force_dhcp_release=True
</span><span class='line'>dhcpbridge_flagfile=/etc/nova/nova.conf
</span><span class='line'>dhcpbridge=/usr/bin/nova-dhcpbridge
</span><span class='line'>firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver
</span><span class='line'>public_interface=eth2
</span><span class='line'>flat_interface=eth0
</span><span class='line'>floating_range=192.168.30.0/24
</span><span class='line'>flat_network_dhcp_start=10.0.0.40
</span><span class='line'>flat_network_bridge=br100
</span><span class='line'>fixed_range=10.0.0.1/24
</span><span class='line'>#network_size=256
</span><span class='line'>flat_injected=False
</span><span class='line'>connection_type=libvirt
</span><span class='line'>multi_host=True
</span><span class='line'>dhcp_lease_time=604800
</span><span class='line'>iscsi_helper=tgtadm</span></code></pre></td></tr></table></div></figure>


<p>重启nova服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/nova-api restart
</span><span class='line'>/etc/init.d/nova-compute restart</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Block Storage (Cinder)安装</h2>

<p>首先得准备一台机器，以下的示例将是在控制节点来安装，同样，你也可以选择在控制节点安装，以下示例中的磁盘设备是/dev/sdb，100G</p>

<h3>配置块存储控制</h3>

<p>安装cinder服务依赖包</p>

<pre><code>apt-get install -y cinder-api cinder-scheduler
</code></pre>

<p>配置块存储服务去使用mysql数据库，编辑/etc/cinder/cinder.conf,添加以下内容</p>

<pre><code>connection = mysql://cinder:openstack@10.0.0.11/cinder
</code></pre>

<p>为块存储服务创建数据库表</p>

<pre><code>cinder-manage db sync
</code></pre>

<h4>创建用户和角色</h4>

<p>创建一个 cinder用户，块存储服务使用这个用户去身份认证，使用service租户且给它admin角色</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-create --name=cinder --pass=cinder --email=cinder@domain.com \
</span><span class='line'> --tenant service --enable=True
</span><span class='line'>keystone user-role-add --user=cinder --tenant=service --role=admin</span></code></pre></td></tr></table></div></figure>


<p>编辑/etc/cinder/api-paste.ini，修改以下信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[filter:authtoken]
</span><span class='line'>paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
</span><span class='line'>auth_host = 10.0.0.11
</span><span class='line'>auth_port = 35357
</span><span class='line'>auth_protocol = http
</span><span class='line'>admin_tenant_name = service
</span><span class='line'>admin_user = cinder
</span><span class='line'>admin_password = cinder</span></code></pre></td></tr></table></div></figure>


<h4>创建service和endpoint</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone service-create --name=cinder --type=volume --description="Cinder Volume Service"
</span><span class='line'>keystone endpoint-create --service cinder \
</span><span class='line'>--publicurl=http://10.0.0.11:8776/v1/%\(tenant_id\)s \
</span><span class='line'>--internalurl=http://10.0.0.11:8776/v1/%\(tenant_id\)s \
</span><span class='line'>--adminurl=http://10.0.0.11:8776/v1/%\(tenant_id\)s</span></code></pre></td></tr></table></div></figure>


<p>再来创建个v2的API</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone service-create --name=cinder --type=volumev2 \
</span><span class='line'> --description="Cinder Volume Service V2"</span></code></pre></td></tr></table></div></figure>


<p>记录service id，以下将会使用到</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone endpoint-create \
</span><span class='line'> --service=98b37a6bd88c44a19bc38586c753cfdd \
</span><span class='line'> --publicurl=http://10.0.0.11:8776/v2/%\(tenant_id\)s \
</span><span class='line'> --internalurl=http://10.0.0.11:8776/v2/%\(tenant_id\)s \
</span><span class='line'> --adminurl=http://10.0.0.11:8776/v2/%\(tenant_id\)s</span></code></pre></td></tr></table></div></figure>


<p>重启cinder服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service cinder-scheduler restart
</span><span class='line'>service cinder-api restart</span></code></pre></td></tr></table></div></figure>


<h3>配置块存储节点</h3>

<p>配置块存储服务使用RabbitMQ，编辑/etc/cinder/cinder.conf，增加以下信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpc_backend = cinder.openstack.common.rpc.impl_kombu
</span><span class='line'>rabbit_host = 10.0.0.11
</span><span class='line'>rabbit_port = 5672</span></code></pre></td></tr></table></div></figure>


<p>现在，我们来创建LVM的PV及LV，所以示例全部是使用的第二块设备/dev/sdb，在操作前请确保你的数据是否备份。</p>

<p>安装lvm2和cinder-volume</p>

<pre><code>apt-get install cinder-volume lvm2
</code></pre>

<p>创建PV 和 VG</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@controller:~# pvcreate /dev/sdb 
</span><span class='line'>root@controller:~# vgcreate cinder-volumes /dev/sdb</span></code></pre></td></tr></table></div></figure>


<p>重启cinder服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service cinder-volume restart
</span><span class='line'>service tgt restart</span></code></pre></td></tr></table></div></figure>


<p>最后去 horizon创建卷就可以使用了，步骤大概为：
1.  管理员自定义卷类型
2.  租户创建卷，并选择一个卷类型
3.  附加到某个VM即可。</p>

<hr />

<h2>Orchestration Server(Heat)安装</h2>

<p>准备一台机器，以下示例将把Heat安装在控制节点，同样，你也可以选择在控制节点安装。</p>

<h3>安装Orchestration服务</h3>

<pre><code>apt-get install -y heat-api heat-api-cfn 
</code></pre>

<p>初始化数据库服务，具体见最开始的 初始化数据库。</p>

<h3>Orchestration配置</h3>

<p>编辑/etc/heat/heat.conf，修改[DEFAULT]节：</p>

<pre><code>sql_connection=mysql://heat:openstack@10.0.0.11/heat
</code></pre>

<p>同步数据库，将会自动创建heat服务的数据库表</p>

<pre><code>heat-manage db_sync
</code></pre>

<h3>创建用户与角色</h3>

<p>创建一个名称为heat的认证用户和角色</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-create --name=heat --pass=heat \
</span><span class='line'> --email=heat@domain.com \
</span><span class='line'> --tenant service --enable=True</span></code></pre></td></tr></table></div></figure>


<p>记录user id:  c8b8757e829f461e99a5aa0a72ef78b5</p>

<p>关联租户(service)、用户、角色(admin)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-role-add --user-id 6570003a874d4dcc9fd4e3c7f6f16db6 \
</span><span class='line'> --tenant-id 208807d34ff7455e93b39a2820265349 \
</span><span class='line'> --role-id 0a788b82f9bb4e849af2b402931f58d2</span></code></pre></td></tr></table></div></figure>


<h3>创建Heat Service和Endpoint</h3>

<p>创建service</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone service-create --name=heat --type=orchestration \
</span><span class='line'>--description="Heat Orchestration API"
</span><span class='line'>
</span><span class='line'>keystone endpoint-create --region regionOne \
</span><span class='line'>--service-id a5743b1fa56b452f9608d17fdd4dfa2b \
</span><span class='line'>--publicurl=http://10.0.0.11:8004/v1/%\(tenant_id\)s \
</span><span class='line'>--internalurl=http://10.0.0.11:8004/v1/%\(tenant_id\)s  \
</span><span class='line'>--adminurl=http://10.0.0.11:8004/v1/%\(tenant_id\)s</span></code></pre></td></tr></table></div></figure>


<p>heat service id: 06d78bd1404d48698e3f28c01bb2ad30
heat-cfn service id: 507fa3386d4f4d1caa5dc075621e669a</p>

<p>创建endpoint</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone service-create --name=heat-cfn --type=cloudformation \
</span><span class='line'>--description="Heat CloudFormation API"
</span><span class='line'>
</span><span class='line'>keystone endpoint-create --region regionOne \
</span><span class='line'>--service-id a7fae41b733f40efb7472b2a17b97794 \
</span><span class='line'>--publicurl=http://10.0.0.11:8000/v1 \
</span><span class='line'>--internalurl=http://10.0.0.11:8000/v1  \
</span><span class='line'>--adminurl=http://10.0.0.11:8000/v1</span></code></pre></td></tr></table></div></figure>


<p>编辑/etc/heat/api-paste.ini，修改[filter:authtoken]节</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[filter:authtoken]
</span><span class='line'>paste.filter_factory = heat.common.auth_token:filter_factory
</span><span class='line'>auth_host = 10.0.0.11
</span><span class='line'>auth_port = 35357
</span><span class='line'>auth_protocol = http
</span><span class='line'>admin_tenant_name = service
</span><span class='line'>admin_user = heat
</span><span class='line'>admin_password = heat</span></code></pre></td></tr></table></div></figure>


<p>重启Heat服务</p>

<pre><code>cd /etc/init.d/; for i in $( ls heat-* ); do sudo service $i restart; done
</code></pre>

<h3>创建和管理stacks</h3>

<p>从模板创建一个stack,其实官方已经提供很多模板，所以暂时先git下来做测试</p>

<pre><code>git clone https://github.com/openstack/heat-templates.git
</code></pre>

<p>创建stack</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heat stack-create mystack \
</span><span class='line'>--template-file=/root/heat-templates/cfn/F18/WordPress_Single_Instance.template \
</span><span class='line'>--parameters="InstanceType=m1.large;DBUsername=wordpress;DBPassword=wordpress;KeyName=HEAT_KEY;LinuxDistribution=F18"</span></code></pre></td></tr></table></div></figure>


<p>具体参数请参与官方手册。</p>

<hr />

<h2>Metering/Monitoring Server（Ceilometer）安装</h2>

<h3>安装Metering Service</h3>

<p><strong>1. 在控制节点安装依赖包 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y ceilometer-api ceilometer-collector \
</span><span class='line'>ceilometer-agent-central python-ceilometerclient</span></code></pre></td></tr></table></div></figure>


<p><strong>2. 安装MongoDB </strong>
Orchestration 服务使用数据库来存储信息，此示例使用MongoDB数据库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y mongodb</span></code></pre></td></tr></table></div></figure>


<p>建议将/etc/mongodb.conf中的bind_ip修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind_ip=0.0.0.0</span></code></pre></td></tr></table></div></figure>


<p><strong>3. 重启mongodb生效 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/mongodb restart</span></code></pre></td></tr></table></div></figure>


<p><strong>4. 创建数据库和一个 ceilometer用户 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@controller:~# mongo
</span><span class='line'>&gt; 
</span><span class='line'>&gt; use ceilometer
</span><span class='line'>switched to db ceilometer
</span><span class='line'>&gt; db.addUser ( { user: "ceilometer",
</span><span class='line'>             pwd: "ceilometer",
</span><span class='line'>             roles: [ "readWrite", "dbAdmin"]
</span><span class='line'>     } )</span></code></pre></td></tr></table></div></figure>


<p><strong>5. 编辑/etc/ceilometer/ceilometer.conf，替换如下： </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>pipeline_cfg_file=pipeline.yaml
</span><span class='line'>sample_source=openstack
</span><span class='line'>nova_control_exchange=nova
</span><span class='line'>libvirt_type=qemu
</span><span class='line'>glance_control_exchange=glance
</span><span class='line'>metering_api_port=8777
</span><span class='line'>debug=true
</span><span class='line'>verbose=true
</span><span class='line'>log_file=/var/log/ceilometer/ceilometer.log
</span><span class='line'>log_dir=/var/log/ceilometer
</span><span class='line'>notification_topics=notifications
</span><span class='line'>policy_file=policy.json
</span><span class='line'>rpc_backend=ceilometer.openstack.common.rpc.impl_kombu
</span><span class='line'>allowed_rpc_exception_modules=ceilometer.openstack.common.exception,nova.exception,cinder.exception,exceptions
</span><span class='line'>control_exchange=openstack
</span><span class='line'>rabbit_host=10.0.0.11
</span><span class='line'>rabbit_port=5672
</span><span class='line'>rabbit_userid=guest
</span><span class='line'>rabbit_password=guest
</span><span class='line'>database_connection=mongodb://ceilometer:ceilometer@10.0.0.11:27017/ceilometer
</span><span class='line'>cinder_control_exchange=cinder
</span><span class='line'>
</span><span class='line'>[publisher_rpc]
</span><span class='line'>metering_topic=metering
</span><span class='line'>metering_secret=8ac14959ce3d1a4fe213
</span><span class='line'>
</span><span class='line'>[ssl]
</span><span class='line'>
</span><span class='line'>[database]
</span><span class='line'>database_connection=mongodb://ceilometer:ceilometer@10.0.0.11:27017/ceilometer
</span><span class='line'>
</span><span class='line'>[alarm]
</span><span class='line'>
</span><span class='line'>[rpc_notifier2]
</span><span class='line'>
</span><span class='line'>[api]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[service_credentials]
</span><span class='line'>os_username=ceilometer
</span><span class='line'>os_password=ceilometer
</span><span class='line'>os_tenant_name=service
</span><span class='line'>os_auth_url=http://10.0.0.11:5000/v2.0
</span><span class='line'>os_endpoint_type=publicURL
</span><span class='line'>
</span><span class='line'>[dispatcher_file]
</span><span class='line'>
</span><span class='line'>[keystone_authtoken]
</span><span class='line'>auth_host=10.0.0.11
</span><span class='line'>auth_port=35357
</span><span class='line'>auth_protocol=http
</span><span class='line'>admin_tenant_name=service
</span><span class='line'>admin_user=ceilometer
</span><span class='line'>admin_password=ceilometer
</span><span class='line'>signing_dir=/var/lib/ceilometer/ceilometer-signing
</span><span class='line'>
</span><span class='line'>[collector]
</span><span class='line'>
</span><span class='line'>[matchmaker_ring]
</span><span class='line'>
</span><span class='line'>[matchmaker_redis]</span></code></pre></td></tr></table></div></figure>


<p><strong>6. 创建名称为 ceilometer 的用户，以便使用认证服务。使用service 租户并赋予这个用户admin角色: </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-create \
</span><span class='line'>  --name=ceilometer --pass=ceilometer \
</span><span class='line'>  --email=ceilometer@domain.com
</span><span class='line'>  
</span><span class='line'>keystone user-role-add --user=ceilometer --tenant=service --role=admin  </span></code></pre></td></tr></table></div></figure>


<p><strong>7. 添加服务和endpoint </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone service-create --name=ceilometer --type=metering \
</span><span class='line'> --description="Ceilometer Metering Service"</span></code></pre></td></tr></table></div></figure>


<p>记录service id，在下面创建endpoint要使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone endpoint-create \
</span><span class='line'> --service-id=94ae66fbf5d44c63b7257d0f3c3a48d6 \
</span><span class='line'> --publicurl=http://10.0.0.11:8777/ \
</span><span class='line'> --internalurl=http://10.0.0.11:8777/ \
</span><span class='line'> --adminurl=http://10.0.0.11:8777/</span></code></pre></td></tr></table></div></figure>


<p><strong>8. 配置认证信息，编辑/etc/ceilometer/ceilometer.conf,修改[keystone_authtoken]节 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[keystone_authtoken]
</span><span class='line'>auth_host=10.0.0.11
</span><span class='line'>auth_port=35357
</span><span class='line'>auth_protocol=http
</span><span class='line'>auth_uri=http://10.0.0.11:35357/v2.0
</span><span class='line'>admin_tenant_name=service
</span><span class='line'>admin_user=ceilometer
</span><span class='line'>admin_password=ceilometer</span></code></pre></td></tr></table></div></figure>


<p><strong>9. 重启所有ceilometer服务 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /etc/init.d/; for i in $( ls ceilometer-* ); do sudo service $i restart; done</span></code></pre></td></tr></table></div></figure>


<h3>添加Agent: 计算</h3>

<p>为收集数据，需要在<strong>计算节点</strong>安装一个Agent。</p>

<p><strong>1. 首先在控制节点安装Metering agent服务 </strong></p>

<pre><code>        apt-get install ceilometer-agent-compute
</code></pre>

<p><strong>2.    编辑/etc/nova/nova.conf，在[DEFAULT]节添加以下信息 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ceilometer
</span><span class='line'>instance_usage_audit=True
</span><span class='line'>instance_usage_period=hour
</span><span class='line'>notify_on_state_change=vm_and_task_state
</span><span class='line'>notification_driver=nova.openstack.common.notifier.rpc_notifier
</span><span class='line'>notification_driver=ceilometer.compute.nova_notifier</span></code></pre></td></tr></table></div></figure>


<p><strong>3. 编辑/etc/ceilometer/ceilometer.conf，替换如下： </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>pipeline_cfg_file=pipeline.yaml
</span><span class='line'>sample_source=openstack
</span><span class='line'>nova_control_exchange=nova
</span><span class='line'>libvirt_type=qemu
</span><span class='line'>glance_control_exchange=glance
</span><span class='line'>metering_api_port=8777
</span><span class='line'>debug=true
</span><span class='line'>verbose=true
</span><span class='line'>log_file=/var/log/ceilometer/ceilometer.log
</span><span class='line'>log_dir=/var/log/ceilometer
</span><span class='line'>notification_topics=notifications
</span><span class='line'>policy_file=policy.json
</span><span class='line'>rpc_backend=ceilometer.openstack.common.rpc.impl_kombu
</span><span class='line'>allowed_rpc_exception_modules=ceilometer.openstack.common.exception,nova.exception,cinder.exception,exceptions
</span><span class='line'>control_exchange=openstack
</span><span class='line'>rabbit_host=10.0.0.11
</span><span class='line'>rabbit_port=5672
</span><span class='line'>rabbit_userid=guest
</span><span class='line'>rabbit_password=guest
</span><span class='line'>database_connection=mongodb://ceilometer:ceilometer@10.0.0.11:27017/ceilometer
</span><span class='line'>cinder_control_exchange=cinder
</span><span class='line'>
</span><span class='line'>[publisher_rpc]
</span><span class='line'>metering_topic=metering
</span><span class='line'>metering_secret=8ac14959ce3d1a4fe213
</span><span class='line'>
</span><span class='line'>[ssl]
</span><span class='line'>
</span><span class='line'>[database]
</span><span class='line'>database_connection=mongodb://ceilometer:ceilometer@10.0.0.11:27017/ceilometer
</span><span class='line'>
</span><span class='line'>[alarm]
</span><span class='line'>
</span><span class='line'>[rpc_notifier2]
</span><span class='line'>
</span><span class='line'>[api]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[service_credentials]
</span><span class='line'>os_username=ceilometer
</span><span class='line'>os_password=ceilometer
</span><span class='line'>os_tenant_name=service
</span><span class='line'>os_auth_url=http://10.0.0.11:5000/v2.0
</span><span class='line'>os_endpoint_type=publicURL
</span><span class='line'>
</span><span class='line'>[dispatcher_file]
</span><span class='line'>
</span><span class='line'>[keystone_authtoken]
</span><span class='line'>auth_host=10.0.0.11
</span><span class='line'>auth_port=35357
</span><span class='line'>auth_protocol=http
</span><span class='line'>admin_tenant_name=service
</span><span class='line'>admin_user=ceilometer
</span><span class='line'>admin_password=ceilometer
</span><span class='line'>signing_dir=/var/lib/ceilometer/ceilometer-signing
</span><span class='line'>
</span><span class='line'>[collector]
</span><span class='line'>
</span><span class='line'>[matchmaker_ring]
</span><span class='line'>
</span><span class='line'>[matchmaker_redis]
</span></code></pre></td></tr></table></div></figure>


<p><strong>4. 重启compute agent服务 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/ceilometer-agent-compute restart</span></code></pre></td></tr></table></div></figure>


<h3>添加Agent: 镜像服务</h3>

<p>要测量镜像服务(Image Service)，只需要在glance-api.conf中修改notifier_strategy = noop为
notifier_strategy = rabbit 或者 notifier_strategy = qpid，以下示例使用的rabbit。</p>

<p>修改完成后重启镜像服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/glance-registry restart
</span><span class='line'>/etc/init.d/glance-api restart</span></code></pre></td></tr></table></div></figure>


<h3>添加Agent: 块存储</h3>

<p><strong>1. 要测量块存储服务(Block Storage)，只需要在cinder.conf中加入以下信息： </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ceilometer
</span><span class='line'>notification_driver = cinder.openstack.common.notifier.rabbit_notifier
</span><span class='line'>control_exchange = cinder</span></code></pre></td></tr></table></div></figure>


<p><strong>2. 重启cinder相关服务：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/cinder-volume restart
</span><span class='line'>/etc/init.d/cinder-api restart</span></code></pre></td></tr></table></div></figure>


<h3>添加Agent: 对象存储</h3>

<p><strong>1. 要访问对象存储(Object Storage)服务就需要ResellerAdmin角色： </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone role-create --name=ResellerAdmin
</span><span class='line'>
</span><span class='line'>keystone user-role-add --tenant_id 208807d34ff7455e93b39a2820265349 \
</span><span class='line'>--user_id c538a8fec188450588b71f9d6b6f1ab5 \
</span><span class='line'>--role_id 56cb34407d5e4ce596e36bd03475be01</span></code></pre></td></tr></table></div></figure>


<h3>测试结果</h3>

<p>设置完之后，我们通过Dashboard来查看结果，来张漂亮的图先</p>

<p><img src="http://agenge.github.io/images/2013/11/openstack-resouce-use.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keystone 源码安装与配置]]></title>
    <link href="http://agenge.github.io/blog/2013/10/24/the-keystone-with-source-installation-and-conf/"/>
    <updated>2013-10-24T09:02:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/10/24/the-keystone-with-source-installation-and-conf</id>
    <content type="html"><![CDATA[<h2>Keystone介绍</h2>

<p>什么是Keystone？
Keystone 作为OpenStack中身份认证服务，在OpenStack起到非常关键的作用。它主要负责身份认证，服务规则及令牌的作用，且实现了Identity API,供OpenStack其他各组件之间来进行身份验证。</p>

<h3>安装依赖包</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install -y git python-dev sqlite3 libxml2-dev libxslt1-dev libsasl2-dev libsqlite3-dev libssl-dev libldap2-dev</span></code></pre></td></tr></table></div></figure>


<p><strong> 下载源码 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/openstack/keystone.git 
</span><span class='line'>git clone https://github.com/openstack/python-keystoneclient.git keystone/client</span></code></pre></td></tr></table></div></figure>


<p>安装keystone</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd keystone
</span><span class='line'>git checkout origin/stable/grizzly
</span><span class='line'>pip install -r tools/pip-requires
</span><span class='line'>python setup.py install</span></code></pre></td></tr></table></div></figure>


<p>安装客户端</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd client
</span><span class='line'>git checkout -b origin/feature/keystone-v3
</span><span class='line'>pip install -r requirements.txt 
</span><span class='line'>python setup.py install
</span><span class='line'>
</span><span class='line'>cd ../
</span><span class='line'>mkdir -p /etc/keystone
</span><span class='line'>cp etc/keystone.conf.sample /etc/keystone/keystone.conf
</span><span class='line'>cp etc/logging.conf.sample /etc/keystone/logging.conf</span></code></pre></td></tr></table></div></figure>


<p><strong> 配置日志存放路径 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /var/log/keystone
</span><span class='line'>touch /var/log/keystone/keystone.log </span></code></pre></td></tr></table></div></figure>


<p>数据库同步，即创建keystone相关的数据库表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone-manage db_sync</span></code></pre></td></tr></table></div></figure>


<p>启动服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone-all -d &</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>配置Keytone</h2>

<p>截止到现在，我们已经完成Keystone的安装，但现在还无法使用，因为没有租户、用户、密码、服务等。</p>

<p>为使用方便，先设置两个环境变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export OS_SERVICE_TOKEN=ADMIN
</span><span class='line'>export SERVICE_ENDPOINT=http://192.168.30.150:35357/v2.0</span></code></pre></td></tr></table></div></figure>


<p>如果前面安装没问题的话，使用以下命令查看用户列表，默认是没有任何数据返回</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-list</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建租户</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone tenant-create --name adminTenant --description "Admin Tenant" --enabled true
</span><span class='line'>+-------------+----------------------------------+
</span><span class='line'>|   Property  |              Value               |
</span><span class='line'>+-------------+----------------------------------+
</span><span class='line'>| description |           Admin Tenant           |
</span><span class='line'>|   enabled   |               True               |
</span><span class='line'>|      id     | e36e42a5ed264317a7a5119b1f513e32 |
</span><span class='line'>|     name    |           adminTenant            |
</span><span class='line'>+-------------+----------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>需要记录 tenant id，在创建用户时需要关联，即将用户关联到哪个租户。</p>

<ol>
<li>创建用户</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-create --tenant_id e36e42a5ed264317a7a5119b1f513e32 --name admin --pass openstack --enabled true
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>| Property |              Value               |
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>|  email   |                                  |
</span><span class='line'>| enabled  |               True               |
</span><span class='line'>|    id    | 8cc6ddbeab504e2b9e8bf30eff3d92b7 |
</span><span class='line'>|   name   |              admin               |
</span><span class='line'>| tenantId | e36e42a5ed264317a7a5119b1f513e32 |
</span><span class='line'>+----------+----------------------------------+</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建角色</li>
</ol>


<p>创建一个角色名称为adminRole。请记住该命令生成的Role id，下面的关联用户及租户时需要用到</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone role-create --name adminRole
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>| Property |              Value               |
</span><span class='line'>+----------+----------------------------------+
</span><span class='line'>|    id    | a00bf7b7fe4e4746bac0fd69778f3dfa |
</span><span class='line'>|   name   |            adminRole             |
</span><span class='line'>+----------+----------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>截止到目前，已经分别创建 Tenant、User、Role，分别是：</p>

<p>Tenant ID:  e36e42a5ed264317a7a5119b1f513e32
User ID:    8cc6ddbeab504e2b9e8bf30eff3d92b7
Role ID:    a00bf7b7fe4e4746bac0fd69778f3dfa</p>

<p>现在将它们三者关联到一起</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keystone user-role-add --user-id 8cc6ddbeab504e2b9e8bf30eff3d92b7 \
</span><span class='line'> --tenant-id e36e42a5ed264317a7a5119b1f513e32 \
</span><span class='line'> --role-id a00bf7b7fe4e4746bac0fd69778f3dfa</span></code></pre></td></tr></table></div></figure>


<h2>Keytone测试</h2>

<h3>通过 Keystone 获取 Token</h3>

<p>访问Keystone 需要4个参数：TenantName Username Password 申请URL，其中URL可以是：</p>

<pre><code>http://192.168.30.150:35357/v2.0/tokens 或 http://192.168.30.150:5000/v2.0/tokens
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -d '{"auth": {"tenantName": "adminTenant", "passwordCredentials":{"username": "admin", "password": "openstack"}}}' -H "Content-type: application/json" http://192.168.30.150:35357/v2.0/tokens | python -mjson.tool</span></code></pre></td></tr></table></div></figure>


<p>将会返回以下类似信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100   676  100   567  100   109   6290   1209 --:--:-- --:--:-- --:--:--  6517
</span><span class='line'>{
</span><span class='line'>    "access": {
</span><span class='line'>        "metadata": {
</span><span class='line'>            "is_admin": 0, 
</span><span class='line'>            "roles": [
</span><span class='line'>                "9fe2ff9ee4384b1894a90878d3e92bab", 
</span><span class='line'>                "a00bf7b7fe4e4746bac0fd69778f3dfa"
</span><span class='line'>            ]
</span><span class='line'>        }, 
</span><span class='line'>        "serviceCatalog": [], 
</span><span class='line'>        "token": {
</span><span class='line'>            "expires": "2013-10-16T09:03:21Z", 
</span><span class='line'>            "id": "7c76f8315f6e42d6a05b0ed726bc3441", 
</span><span class='line'>            "issued_at": "2013-10-15T09:03:21.809471", 
</span><span class='line'>            "tenant": {
</span><span class='line'>                "description": "Admin Tenant", 
</span><span class='line'>                "enabled": true, 
</span><span class='line'>                "id": "e36e42a5ed264317a7a5119b1f513e32", 
</span><span class='line'>                "name": "adminTenant"
</span><span class='line'>            }
</span><span class='line'>        }, 
</span><span class='line'>        "user": {
</span><span class='line'>            "id": "8cc6ddbeab504e2b9e8bf30eff3d92b7", 
</span><span class='line'>            "name": "admin", 
</span><span class='line'>            "roles": [
</span><span class='line'>                {
</span><span class='line'>                    "name": "_member_"
</span><span class='line'>                }, 
</span><span class='line'>                {
</span><span class='line'>                    "name": "adminRole"
</span><span class='line'>                }
</span><span class='line'>            ], 
</span><span class='line'>            "roles_links": [], 
</span><span class='line'>            "username": "admin"
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>从上述返回结果能看到正常返回 token。更详细的操作请参考<a href="http://agenge.com/blog/2013/10/17/use-the-curl-operation-swift/">使用Curl操作OpenStack Swift</a></p>

<h2>错误汇总</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Traceback (most recent call last):
</span><span class='line'>   File "/usr/bin/easy_install", line 5, in &lt;module&gt;
</span><span class='line'>     from pkg_resources import load_entry_point ImportError: No module named pkg_resources raid:/home/linyoujushi# easy_install genshi Traceback (most recent call last):</span></code></pre></td></tr></table></div></figure>


<p>解决办法：</p>

<p>这是由于我们没有安装setuptools或者没有装好，我们只需要安装这个软件就行了。安装方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://peak.telecommunity.com/dist/ez_setup.py
</span><span class='line'>python ez_setup.py</span></code></pre></td></tr></table></div></figure>


<p>或者，我们装的setuptools工具太老，我们升级一下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo python ./ez_setup.py -U setuptools</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Curl操作OpenStack Swift]]></title>
    <link href="http://agenge.github.io/blog/2013/10/17/use-the-curl-operation-swift/"/>
    <updated>2013-10-17T09:51:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/10/17/use-the-curl-operation-swift</id>
    <content type="html"><![CDATA[<p>提示：以下操作均是使用的 swift tempauth认证机制。</p>

<ul>
<li>获取 Token</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -v -H 'X-Storage-User: admin:admin' -H 'X-Storage-Pass: admin' http://192.168.30.150:8080/auth/v1.0</span></code></pre></td></tr></table></div></figure>


<p>如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* About to connect() to 192.168.30.150 port 8080 (#0)
</span><span class='line'>*   Trying 192.168.30.150... connected
</span><span class='line'>&gt; GET /auth/v1.0 HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
</span><span class='line'>&gt; Host: 192.168.30.150:8080
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; X-Storage-User: admin:admin
</span><span class='line'>&gt; X-Storage-Pass: admin
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; X-Storage-Url: http://192.168.30.150:8080/v1/AUTH_admin
</span><span class='line'>&lt; X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5
</span><span class='line'>&lt; Content-Type: text/html; charset=UTF-8
</span><span class='line'>&lt; X-Storage-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5
</span><span class='line'>&lt; Content-Length: 0
</span><span class='line'>&lt; Date: Tue, 15 Oct 2013 01:49:59 GMT
</span><span class='line'>&lt; 
</span><span class='line'>* Connection #0 to host 192.168.30.150 left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>Account操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -v -X HEAD -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin</span></code></pre></td></tr></table></div></figure>


<p>如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* About to connect() to 192.168.30.150 port 8080 (#0)
</span><span class='line'>*   Trying 192.168.30.150... connected
</span><span class='line'>&gt; HEAD /v1/AUTH_admin HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
</span><span class='line'>&gt; Host: 192.168.30.150:8080
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 204 No Content
</span><span class='line'>&lt; Content-Length: 0
</span><span class='line'>&lt; Accept-Ranges: bytes
</span><span class='line'>&lt; X-Timestamp: 1381806617.24083
</span><span class='line'>&lt; X-Account-Bytes-Used: 0
</span><span class='line'>&lt; X-Account-Container-Count: 1
</span><span class='line'>&lt; Content-Type: text/plain; charset=utf-8
</span><span class='line'>&lt; X-Account-Object-Count: 0
</span><span class='line'>&lt; Date: Tue, 15 Oct 2013 05:17:23 GMT
</span><span class='line'>&lt; 
</span><span class='line'>* Connection #0 to host 192.168.30.150 left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Container操作</p>

<ul>
<li>列出 Contailner</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X GET -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin</span></code></pre></td></tr></table></div></figure>


<p> 如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 5
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381806617.24083
</span><span class='line'>X-Account-Bytes-Used: 0
</span><span class='line'>X-Account-Container-Count: 1
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>X-Account-Object-Count: 0
</span><span class='line'>Date: Tue, 15 Oct 2013 05:20:11 GMT
</span><span class='line'>
</span><span class='line'>test</span></code></pre></td></tr></table></div></figure>


<p> 最后一行的test就是查询出来的内容。</p>

<ul>
<li>创建 Container</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X PUT -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin/myfile</span></code></pre></td></tr></table></div></figure>


<p>   如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Content-Length: 0
</span><span class='line'>Content-Type: text/html; charset=UTF-8
</span><span class='line'>Date: Tue, 15 Oct 2013 05:22:01 GMT</span></code></pre></td></tr></table></div></figure>


<p>  我们再来查询一次看是否成功：</p>

<p>  <!-- more --></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X GET -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin</span></code></pre></td></tr></table></div></figure>


<p>  如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 12
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381806617.24083
</span><span class='line'>X-Account-Bytes-Used: 0
</span><span class='line'>X-Account-Container-Count: 2
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>X-Account-Object-Count: 0
</span><span class='line'>Date: Tue, 15 Oct 2013 05:23:18 GMT
</span><span class='line'>
</span><span class='line'>myfile
</span><span class='line'>test</span></code></pre></td></tr></table></div></figure>


<ul>
<li> 只列出部分 Container</li>
</ul>


<p>  很多时候 Container 会有很多个，Swift 默认会列出前10000个，但如果我们只看最前面几个，该怎么办？ 以下示例只显示最前面一个 Container</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X GET -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin?limit=1</span></code></pre></td></tr></table></div></figure>


<p></p>

<p> 结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 7
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381806617.24083
</span><span class='line'>X-Account-Bytes-Used: 0
</span><span class='line'>X-Account-Container-Count: 2
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>X-Account-Object-Count: 0
</span><span class='line'>Date: Tue, 15 Oct 2013 05:24:36 GMT
</span><span class='line'>  
</span><span class='line'>myfile</span></code></pre></td></tr></table></div></figure>


<p>  那如果要列出最后几个 Container 又怎么办呢？ 加一个 marker即可，以下示例列出 myfile之后的一个Container</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X GET -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin?marker=myfile\&limit=1</span></code></pre></td></tr></table></div></figure>


<p> 如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 5
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381806617.24083
</span><span class='line'>X-Account-Bytes-Used: 0
</span><span class='line'>X-Account-Container-Count: 2
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>X-Account-Object-Count: 0
</span><span class='line'>Date: Tue, 15 Oct 2013 05:28:53 GMT
</span><span class='line'>
</span><span class='line'>test</span></code></pre></td></tr></table></div></figure>


<ul>
<li>格式化输出 Container</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X GET -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin?format=json</span></code></pre></td></tr></table></div></figure>


<p> 如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 86
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381806617.24083
</span><span class='line'>X-Account-Bytes-Used: 0
</span><span class='line'>X-Account-Container-Count: 2
</span><span class='line'>Content-Type: application/json; charset=utf-8
</span><span class='line'>X-Account-Object-Count: 0
</span><span class='line'>Date: Tue, 15 Oct 2013 05:29:58 GMT
</span><span class='line'>
</span><span class='line'>[{"count": 0, "bytes": 0, "name": "myfile"}, {"count": 0, "bytes": 0, "name": "test"}]</span></code></pre></td></tr></table></div></figure>


<p>  除了JSON格式，还可以格式化XML，只需要将json改成xml 即可。</p>

<ul>
<li>查看 Container metadata</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X HEAD -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin/test</span></code></pre></td></tr></table></div></figure>


<p>  如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 204 No Content
</span><span class='line'>Content-Length: 0
</span><span class='line'>X-Container-Object-Count: 0
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381806903.70007
</span><span class='line'>X-Container-Bytes-Used: 0
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>Date: Tue, 15 Oct 2013 05:32:06 GMT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除 Container</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -i -X DELETE -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin/mytest</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Object操作</p>

<ul>
<li>创建 Object</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -i -X PUT -T "apache-tomcat-6.0.36.tgz" -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin/myfile/apache-tomcat-6.0.36.tgz</span></code></pre></td></tr></table></div></figure>


<p></p>

<p> 如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 100 Continue
</span><span class='line'>
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Last-Modified: Tue, 15 Oct 2013 05:39:07 GMT
</span><span class='line'>Content-Length: 0
</span><span class='line'>Etag: 3dde098fd0b3a08d3f2867e4a95591ba
</span><span class='line'>Content-Type: text/html; charset=UTF-8
</span><span class='line'>Date: Tue, 15 Oct 2013 05:39:08 GMT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>列出  Object</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -i -X GET -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin/myfile</span></code></pre></td></tr></table></div></figure>


<p> 如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 25
</span><span class='line'>X-Container-Object-Count: 1
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381814521.71796
</span><span class='line'>X-Container-Bytes-Used: 6780936
</span><span class='line'>Content-Type: text/plain; charset=utf-8
</span><span class='line'>Date: Tue, 15 Oct 2013 05:40:43 GMT
</span><span class='line'>
</span><span class='line'>apache-tomcat-6.0.36.tgz</span></code></pre></td></tr></table></div></figure>


<p>另外 Object和 Container一样可以通过加参数来限制查询，具体示例可参考 Container操作。</p>

<ul>
<li>下载 Object</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -X GET -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin/myfile/apache-tomcat-6.0.36.tgz &gt; apache-tomcat-6.0.36.tgz</span></code></pre></td></tr></table></div></figure>


<p>如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100 6622k  100 6622k    0     0  32.8M      0 --:--:-- --:--:-- --:--:-- 33.1M</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Copy Object</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -i -X PUT -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' \
</span><span class='line'> -H 'X-Copy-From: /myfile/apache-tomcat-6.0.36.tgz' \
</span><span class='line'> -H 'Content-Length:0' http://192.168.30.150:8080/v1/AUTH_admin/test/apache-tomcat-6.0.36.tgz </span></code></pre></td></tr></table></div></figure>


<p>将/myfile/apache-tomcat-6.0.36.tgz 拷贝到 /test/apache-tomcat-6.0.36.tgz,如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Content-Length: 0
</span><span class='line'>X-Copied-From-Last-Modified: Tue, 15 Oct 2013 05:39:07 GMT
</span><span class='line'>X-Copied-From: myfile/apache-tomcat-6.0.36.tgz
</span><span class='line'>Last-Modified: Tue, 15 Oct 2013 05:47:52 GMT
</span><span class='line'>Etag: 3dde098fd0b3a08d3f2867e4a95591ba
</span><span class='line'>Content-Type: text/html; charset=UTF-8
</span><span class='line'>Date: Tue, 15 Oct 2013 05:47:52 GMT</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除 Object</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -i -X DELETE -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' http://192.168.30.150:8080/v1/AUTH_admin/test/apache-tomcat-6.0.36.tgz</span></code></pre></td></tr></table></div></figure>


<p>如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 204 No Content
</span><span class='line'>Content-Length: 0
</span><span class='line'>Content-Type: text/html; charset=UTF-8
</span><span class='line'>Date: Tue, 15 Oct 2013 05:50:49 GMT</span></code></pre></td></tr></table></div></figure>


<p> 通过之前的GET就能验证是否成功删除，此处略过。</p>

<ul>
<li>设置 Object Metadata</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k -i -X POST -H 'X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5' \
</span><span class='line'>-H 'X-Object-Meta-Breed: apache tomcat 6.0.36' \
</span><span class='line'> http://192.168.30.150:8080/v1/AUTH_admin/myfile/apache-tomcat-6.0.36.tgz</span></code></pre></td></tr></table></div></figure>


<p>如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 202 Accepted
</span><span class='line'>Content-Length: 76
</span><span class='line'>Content-Type: text/html; charset=UTF-8
</span><span class='line'>Date: Tue, 15 Oct 2013 05:54:09 GMT</span></code></pre></td></tr></table></div></figure>


<p>通过之前的HEAD，就能查看到刚才添加的元数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 6780936
</span><span class='line'>X-Object-Meta-Breed: apache tomcat 6.0.36
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>Last-Modified: Tue, 15 Oct 2013 05:54:08 GMT
</span><span class='line'>Etag: 3dde098fd0b3a08d3f2867e4a95591ba
</span><span class='line'>X-Timestamp: 1381816448.74507
</span><span class='line'>Content-Type: application/x-tar
</span><span class='line'>Date: Tue, 15 Oct 2013 05:55:53 GMT</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStack Swift安装与配置]]></title>
    <link href="http://agenge.github.io/blog/2013/10/15/openstack-swift-install/"/>
    <updated>2013-10-15T14:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/10/15/openstack-swift-install</id>
    <content type="html"><![CDATA[<h2>准备环境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.30.150   proxy server
</span><span class='line'>192.168.30.151    storage server 
</span><span class='line'>192.168.30.152    storage server</span></code></pre></td></tr></table></div></figure>


<h2>网络配置</h2>

<p><strong> Proxy 代理节点网络(单网卡)  </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'># The primary network interface
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>address 192.168.30.150
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.30.1
</span><span class='line'>network 192.168.30.0
</span><span class='line'>broadcast 192.168.30.255
</span><span class='line'>dns-nameservers 218.201.4.3</span></code></pre></td></tr></table></div></figure>


<p><strong> 存储节点网络(单网卡)  </strong>
存储节点1：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'># The primary network interface
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>address 192.168.30.151
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.30.1
</span><span class='line'>network 192.168.30.0
</span><span class='line'>broadcast 192.168.30.255
</span><span class='line'>dns-nameservers 218.201.4.3</span></code></pre></td></tr></table></div></figure>


<p>存储节点2：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'># The primary network interface
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet static
</span><span class='line'>address 192.168.30.152
</span><span class='line'>netmask 255.255.255.0
</span><span class='line'>gateway 192.168.30.1
</span><span class='line'>network 192.168.30.0
</span><span class='line'>broadcast 192.168.30.255
</span><span class='line'>dns-nameservers 218.201.4.3</span></code></pre></td></tr></table></div></figure>


<h2>安装公共组件</h2>

<p>以下操作在所有节点全部安装：</p>

<h3>添加源</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat &gt; /etc/apt/sources.list.d/grizzly.list &lt;&lt; _END_
</span><span class='line'>deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/grizzly main
</span><span class='line'>deb  http://ubuntu-cloud.archive.canonical.com/ubuntu precise-proposed/grizzly main
</span><span class='line'>_END_</span></code></pre></td></tr></table></div></figure>


<p>更新源</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 5EDB1B62EC4926EA
</span><span class='line'>apt-get update
</span><span class='line'>apt-get upgrade
</span><span class='line'>apt-get install ubuntu-cloud-keyring</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<h2>安装 Swift</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>os_swift="python-swift swift swift-proxy swift-account swift-container swift-object python-memcache xfsprogs"
</span><span class='line'>os_keystone="python-keystone python-keystoneclient"
</span><span class='line'>apt-get install -y $os_swift $os_keystone</span></code></pre></td></tr></table></div></figure>


<p>安装之后需要手工创建 swift相关配置文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /etc/swift
</span><span class='line'>touch /etc/swift/swift.conf
</span><span class='line'>touch /etc/swift/proxy-server.conf
</span><span class='line'>chown -R swift:swift /etc/swift</span></code></pre></td></tr></table></div></figure>


<p>添加 swift.conf内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat &gt; /etc/swift/swift.conf &lt;&lt; _END_
</span><span class='line'>[swift-hash]
</span><span class='line'># od -t x8 -N 8 -A n &lt; /dev/random
</span><span class='line'># The above command can be used to generate random a string.
</span><span class='line'>swift_hash_path_suffix = 50ea1ddb6e88b991
</span><span class='line'>_END_</span></code></pre></td></tr></table></div></figure>


<p>将以下内容添加到 /etc/swift/proxy-server.conf内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>bind_port = 8080
</span><span class='line'>bind_ip = 0.0.0.0
</span><span class='line'>user = swift
</span><span class='line'>swift_dir = /etc/swift
</span><span class='line'>
</span><span class='line'>log_facility = LOG_LOCAL0
</span><span class='line'>log_level = DEBUG
</span><span class='line'>
</span><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = catch_errors healthcheck cache authtoken keystoneauth container-quotas account-quotas proxy-server
</span><span class='line'>
</span><span class='line'>[app:proxy-server]
</span><span class='line'>use = egg:swift#proxy
</span><span class='line'>allow_account_management = true
</span><span class='line'>account_autocreate = true
</span><span class='line'>
</span><span class='line'>[filter:keystoneauth]
</span><span class='line'>use = egg:swift#keystoneauth
</span><span class='line'>operator_roles = Member,admin
</span><span class='line'>
</span><span class='line'>[filter:authtoken]
</span><span class='line'>paste.filter_factory = keystone.middleware.auth_token:filter_factory
</span><span class='line'>service_protocol = http
</span><span class='line'>service_port = 5000
</span><span class='line'>service_host = 192.168.30.150
</span><span class='line'>auth_port = 35357
</span><span class='line'>auth_host = 192.168.30.150
</span><span class='line'>auth_protocol = http
</span><span class='line'>admin_tenant_name = service
</span><span class='line'>admin_user = swift
</span><span class='line'>admin_password = password
</span><span class='line'>signing_dir = /etc/swift
</span><span class='line'>
</span><span class='line'>[filter:cache]
</span><span class='line'>use = egg:swift#memcache
</span><span class='line'>set log_name = cache
</span><span class='line'>memcache_servers = 192.168.30.150:11211
</span><span class='line'>
</span><span class='line'>[filter:catch_errors]
</span><span class='line'>use = egg:swift#catch_errors
</span><span class='line'>
</span><span class='line'>[filter:healthcheck]
</span><span class='line'>use = egg:swift#healthcheck
</span><span class='line'>
</span><span class='line'>[filter:proxy-logging]
</span><span class='line'>use = egg:swift#proxy_logging
</span><span class='line'>
</span><span class='line'>[filter:ratelimit]
</span><span class='line'>use = egg:swift#ratelimit
</span><span class='line'>[filter:container-quotas]
</span><span class='line'>use = egg:swift#container_quotas
</span><span class='line'>
</span><span class='line'>[filter:account-quotas]
</span><span class='line'>use = egg:swift#account_quotas</span></code></pre></td></tr></table></div></figure>


<p>如果不使用 Keystone 认证，请使用以下的配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>bind_port = 8080
</span><span class='line'>bind_ip = 192.168.30.150
</span><span class='line'>user = swift
</span><span class='line'>
</span><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = healthcheck cache tempauth proxy-server
</span><span class='line'>
</span><span class='line'>[app:proxy-server]
</span><span class='line'>use = egg:swift#proxy
</span><span class='line'>allow_account_management = true
</span><span class='line'>account_autocreate = true
</span><span class='line'>
</span><span class='line'>[filter:tempauth]
</span><span class='line'>use = egg:swift#tempauth
</span><span class='line'>user_admin_admin = admin .admin .reseller_admin
</span><span class='line'>user_test_tester = testing .admin
</span><span class='line'>user_test2_tester2 = testing2 .admin
</span><span class='line'>user_test_tester3 = testing3
</span><span class='line'>
</span><span class='line'>[filter:healthcheck]
</span><span class='line'>use = egg:swift#healthcheck
</span><span class='line'>
</span><span class='line'>[filter:cache]
</span><span class='line'>use = egg:swift#memcache
</span><span class='line'>memcache_servers = 192.168.30.150:11211</span></code></pre></td></tr></table></div></figure>


<p>格式： user<em><login1></em><login2> = <password> <privileges>
登录的时候就是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>login = admin:admin
</span><span class='line'>password = admin
</span><span class='line'>privileges = .admin .reseller_admin</span></code></pre></td></tr></table></div></figure>


<p>配置rsyslog</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "local0.*    /var/log/swift/proxy-server.log" &gt;&gt; /etc/rsyslog.conf
</span><span class='line'>mkdir /var/log/swift</span></code></pre></td></tr></table></div></figure>


<p>配置 环 Ring</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /etc/swift
</span><span class='line'>sudo swift-ring-builder account.builder create 6 2 1
</span><span class='line'>sudo swift-ring-builder container.builder create 6 2 1
</span><span class='line'>sudo swift-ring-builder object.builder create 6 2 1</span></code></pre></td></tr></table></div></figure>


<p>说明</p>

<ul>
<li>第一个数字：6表示分区(环)将被处理为2<sup>6th</sup>，即使用2的6次方个分区，创建完之后应有 64个分区</li>
<li>第二个数字：每个存储对象保存2份，即创建2个副本；由于偶只有两台storage，故只写2</li>
<li>第三个数字：1表示限制分区数据转移的时间，此处表示1小时，即分区被连续移动两次之间的最小时间间隔</li>
</ul>


<p>添加设备
添加新设备到Ring上，但add操作不会分配partitions到新的设备上，只有运行“rebalance”命令后才会进行分区的分配，所以这种方式可以有这种优势： 允许一次添加多个设备，只执行一次rebalance就可以了，以下操作步骤：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swift-ring-builder account.builder add z1-192.168.30.151:6002/sdb1 100
</span><span class='line'>sudo swift-ring-builder account.builder add z2-192.168.30.152:6002/sdb1 100
</span><span class='line'>
</span><span class='line'>sudo swift-ring-builder container.builder add z1-192.168.30.151:6001/sdb1 100
</span><span class='line'>sudo swift-ring-builder container.builder add z2-192.168.30.152:6001/sdb1 100
</span><span class='line'>
</span><span class='line'>sudo swift-ring-builder object.builder add z1-192.168.30.151:6000/sdb1 100
</span><span class='line'>sudo swift-ring-builder object.builder add z2-192.168.30.152:6000/sdb1 100</span></code></pre></td></tr></table></div></figure>


<p>查看 Ring信息
可通过以下命令查到到Ring和Ring中的设备信息：
* 查询account信息：</p>

<pre><code>    swift-ring-builder account.builder
</code></pre>

<ul>
<li><p>查询container信息：</p>

<pre><code>  swift-ring-builder container.builder
</code></pre></li>
<li><p>查询object信息</p>

<pre><code>  swift-ring-builder object.builder
</code></pre></li>
<li><p>生成 Ring
如果确认一切之后，最终还要生成Ring，来进行分区的分配，即之前提到的rebalance：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swift-ring-builder account.builder rebalance
</span><span class='line'>sudo swift-ring-builder container.builder rebalance
</span><span class='line'>sudo swift-ring-builder object.builder rebalance</span></code></pre></td></tr></table></div></figure>


<p>设置权限</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chown -R swift:swift /etc/swift
</span><span class='line'>chown -R swift:swift /var/cache/swift</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>存储节点安装与配置</h2>

<p>添加设备：
先创建分区，另外一定要是 XFS文件系统</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /srv/node/sdb1
</span><span class='line'>chown -R swift:swift /srv/node/
</span><span class='line'>mkfs.xfs -i size=1024 /dev/sdb1 -f 
</span><span class='line'>echo "/dev/sdb1 /srv/node/sdb1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 0" &gt;&gt; /etc/fstab 
</span><span class='line'>mount /srv/node/sdb1  </span></code></pre></td></tr></table></div></figure>


<p>设置 rsyncd.conf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uid = swift
</span><span class='line'>gid = swift
</span><span class='line'>
</span><span class='line'>log file = /var/log/rsyncd.log
</span><span class='line'>pid file = /var/run/rsyncd.pid
</span><span class='line'>address = 192.168.30.151
</span><span class='line'>
</span><span class='line'>[account]
</span><span class='line'>max_connections = 2
</span><span class='line'>path = /srv/node/
</span><span class='line'>read only = false
</span><span class='line'>lock file = /var/lock/account.lock
</span><span class='line'>
</span><span class='line'>[container]
</span><span class='line'>max_connections = 2
</span><span class='line'>path = /srv/node/
</span><span class='line'>read only = false
</span><span class='line'>lock file = /var/lock/container.lock
</span><span class='line'>
</span><span class='line'>[object]
</span><span class='line'>max_connections = 2
</span><span class='line'>path = /srv/node/
</span><span class='line'>read only = false
</span><span class='line'>lock file = /var/lock/object.lock</span></code></pre></td></tr></table></div></figure>


<p>设置 rsync开机自启动</p>

<pre><code>sudo sed -i 's/RSYNC_ENABLE=false/RSYNC_ENABLE=true/g' /etc/default/rsync
</code></pre>

<p>启动 rsync服务</p>

<pre><code>sudo service rsync start
</code></pre>

<p>创建/etc/account-server.conf：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>bind_ip = 0.0.0.0
</span><span class='line'>bind_port = 6002
</span><span class='line'>workers = 1
</span><span class='line'>user = swift
</span><span class='line'>swift_dir = /etc/swift
</span><span class='line'>devices = /srv/node
</span><span class='line'>
</span><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = account-server
</span><span class='line'>
</span><span class='line'>[app:account-server]
</span><span class='line'>use = egg:swift#account
</span><span class='line'>
</span><span class='line'>[account-replicator]
</span><span class='line'>
</span><span class='line'>[account-auditor]
</span><span class='line'>
</span><span class='line'>[account-reaper]
</span></code></pre></td></tr></table></div></figure>


<p>创建/etc/container-server.conf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>bind_ip = 0.0.0.0
</span><span class='line'>bind_port = 6001
</span><span class='line'>workers = 1
</span><span class='line'>user = swift
</span><span class='line'>swift_dir = /etc/swift
</span><span class='line'>devices = /srv/node
</span><span class='line'>
</span><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = container-server
</span><span class='line'>
</span><span class='line'>[app:container-server]
</span><span class='line'>use = egg:swift#container
</span><span class='line'>
</span><span class='line'>[container-replicator]
</span><span class='line'>
</span><span class='line'>[container-updater]
</span><span class='line'>
</span><span class='line'>[container-auditor]
</span><span class='line'>
</span><span class='line'>[container-sync]</span></code></pre></td></tr></table></div></figure>


<p>创建/etc/object-server.conf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DEFAULT]
</span><span class='line'>bind_ip = 0.0.0.0
</span><span class='line'>bind_port = 6000
</span><span class='line'>workers = 1
</span><span class='line'>user = swift
</span><span class='line'>swift_dir = /etc/swift
</span><span class='line'>devices = /srv/node
</span><span class='line'>
</span><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = recon object-server
</span><span class='line'>
</span><span class='line'>[app:object-server]
</span><span class='line'>use = egg:swift#object
</span><span class='line'>
</span><span class='line'>[filter:recon]
</span><span class='line'>use = egg:swift#recon
</span><span class='line'>recon_cache_path = /var/cache/swift
</span><span class='line'>
</span><span class='line'>[object-replicator]
</span><span class='line'>
</span><span class='line'>[object-updater]
</span><span class='line'>
</span><span class='line'>[object-auditor]</span></code></pre></td></tr></table></div></figure>


<h3>重启服务</h3>

<p>在所有存储节点重启以下服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swift-init object-server start
</span><span class='line'>sudo swift-init object-replicator start
</span><span class='line'>sudo swift-init object-updater start
</span><span class='line'>sudo swift-init object-auditor start
</span><span class='line'>sudo swift-init container-server start
</span><span class='line'>sudo swift-init container-replicator start
</span><span class='line'>sudo swift-init container-updater start
</span><span class='line'>sudo swift-init container-auditor start
</span><span class='line'>sudo swift-init account-server start
</span><span class='line'>sudo swift-init account-replicator start
</span><span class='line'>sudo swift-init account-auditor start</span></code></pre></td></tr></table></div></figure>


<p>在代理节点启动以下服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo swift-init all restart</span></code></pre></td></tr></table></div></figure>


<h2>Swift操作</h2>

<p>获得 X-Storage-Url 和 X-Auth-Token:</p>

<pre><code>curl -k -v -H 'X-Storage-User: admin:admin' -H 'X-Storage-Pass: admin' http://192.168.30.150:8080/auth/v1.0
</code></pre>

<p>如果正确，将会返回以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* About to connect() to 192.168.30.150 port 8080 (#0)
</span><span class='line'>*   Trying 192.168.30.150... connected
</span><span class='line'>&gt; GET /auth/v1.0 HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
</span><span class='line'>&gt; Host: 192.168.30.150:8080
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; X-Storage-User: admin:admin
</span><span class='line'>&gt; X-Storage-Pass: admin
</span><span class='line'>&gt; 
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; X-Storage-Url: http://192.168.30.150:8080/v1/AUTH_admin
</span><span class='line'>&lt; X-Auth-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5
</span><span class='line'>&lt; Content-Type: text/html; charset=UTF-8
</span><span class='line'>&lt; X-Storage-Token: AUTH_tk8a85916d63b14c568a4633b7920623c5
</span><span class='line'>&lt; Content-Length: 0
</span><span class='line'>&lt; Date: Tue, 15 Oct 2013 01:49:59 GMT
</span><span class='line'>&lt; 
</span><span class='line'>* Connection #0 to host 192.168.30.150 left intact
</span><span class='line'>* Closing connection #0</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>检查账号</p>

<pre><code>    curl -k -v -H 'X-Auth-Token: &lt;token-from-x-auth-token-above&gt;' &lt;url-from-xstorage-url-above&gt;  
</code></pre>

<p>这里的token-from-x-auth-token-above 就是上面输出的 AUTH_tk8a85916d63b14c568a4633b7920623c5，url-from-xstorage-url-above对应：<a href="http://192.168.30.150:8080/v1/AUTH_admin">http://192.168.30.150:8080/v1/AUTH_admin</a></p>

<p>检测 swift 命令是否工作正常</p>

<pre><code>    swift -A http://192.168.30.150:8080/auth/v1.0 -U admin:admin -K admin stat
</code></pre>

<p>正常输出类似以下信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   Account: AUTH_admin
</span><span class='line'>Containers: 0
</span><span class='line'>   Objects: 0
</span><span class='line'>     Bytes: 0
</span><span class='line'>Accept-Ranges: bytes
</span><span class='line'>X-Timestamp: 1381806617.24083
</span><span class='line'>Content-Type: text/plain; charset=utf-8</span></code></pre></td></tr></table></div></figure>


<p>上传</p>

<pre><code>swift -A http://192.168.30.150:8080/auth/v1.0 -U admin:admin -K admin upload test apache-tomcat-6.0.36.tar.gz
</code></pre>

<p>删除</p>

<pre><code>swift -A http://192.168.30.150:8080/auth/v1.0 -U admin:admin -K admin delete test apache-tomcat-6.0.36.tar.gz
</code></pre>

<h2>排错思路</h2>

<ol>
<li>直接看控制台打印的日志</li>
<li>检查配置文件是否正确</li>
<li>通过观察日志，例如/var/log/syslog</li>
<li>修改配置文件之后，需要重启对应的服务</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVS+Keepalived做Red5高可用和负载均衡]]></title>
    <link href="http://agenge.github.io/blog/2013/10/12/the-lvs-keepalived-do-red5-ha-lb/"/>
    <updated>2013-10-12T14:33:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/10/12/the-lvs-keepalived-do-red5-ha-lb</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>此篇文章纯实践篇，只有部分关键配置会作解决，理论知识偶会专门写一篇来介绍</p>

<h3>准备环境</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.30.136     lvs-dr_01     # LVS Director Master
</span><span class='line'>192.168.30.167     lvs-dr_02      # LVS Director Backup
</span><span class='line'>192.168.30.172     lvs-vip            # VIP  虚拟IP
</span><span class='line'>192.168.30.171     realserver-01  # 后端Red5 服务器
</span><span class='line'>192.168.30.150     realserver-02  # 后端Red5 服务器</span></code></pre></td></tr></table></div></figure>


<h3>安装依赖包</h3>

<p>检查是否支持IPVS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modprobe -l | grep ipvs </span></code></pre></td></tr></table></div></figure>


<p>如果支持的话，会就输出以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kernel/net/netfilter/ipvs/ip_vs.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_rr.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_wrr.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_lc.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_wlc.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_lblc.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_lblcr.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_dh.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_sh.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_sed.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_nq.ko
</span><span class='line'>kernel/net/netfilter/ipvs/ip_vs_ftp.ko</span></code></pre></td></tr></table></div></figure>


<h3>安装ipvsadm</h3>

<p>SSH到主节点 lvs-dr_01 和 lvs-dr_02</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install ipvsadm</span></code></pre></td></tr></table></div></figure>


<h3>安装 Keepalived</h3>

<p>以下分别是安装依赖包、下载keepalived-1.2.8、以配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install -y gcc kernel-devel openssl-devel popt-devel  make # 安装依赖包
</span><span class='line'>wget http://www.keepalived.org/software/keepalived-1.2.8.tar.gz
</span><span class='line'>tar zxvf keepalived-1.2.8.tar.gz 
</span><span class='line'>cd keepalived-1.2.8
</span><span class='line'>./configure --with-kernel-dir=/usr/src/kernels/2.6.32-358.18.1.el6.x86_64/
</span><span class='line'>make
</span><span class='line'>make install DIR=/usr/local/
</span><span class='line'>cp /usr/local/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/
</span><span class='line'>cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/
</span><span class='line'>mkdir -p /etc/keepalived
</span><span class='line'>cp /usr/local/sbin/keepalived /usr/sbin/</span></code></pre></td></tr></table></div></figure>


<p>在 /usr/local/etc/keepalived/keepalived.conf 中加入以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>! Configuration File for keepalived
</span><span class='line'>
</span><span class='line'>global_defs {
</span><span class='line'>   notification_email {
</span><span class='line'>     acassen@firewall.loc
</span><span class='line'>     failover@firewall.loc
</span><span class='line'>     sysadmin@firewall.loc   # 全局联系人
</span><span class='line'>   }
</span><span class='line'>   notification_email_from Alexandre.Cassen@firewall.loc
</span><span class='line'>   smtp_server 127.0.0.1
</span><span class='line'>   smtp_connect_timeout 30
</span><span class='line'>   router_id LVS_DEVEL
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>vrrp_instance VI_1 {
</span><span class='line'>    state MASTER      # keepalived MASTER，另外一台 lvs-dr_02 修改为：BACKUP
</span><span class='line'>    interface eth0        # 使用哪个网络接口来通信
</span><span class='line'>    virtual_router_id 52  # 默认为51，两个DR都修改成非51，这里修改成 52
</span><span class='line'>    priority 100      # 优先级，数字越大表示 优先级越高，MASTER一定要比BACKUP高
</span><span class='line'>    advert_int 1
</span><span class='line'>    authentication {
</span><span class='line'>        auth_type PASS        # 密码验证类型
</span><span class='line'>        auth_pass 1111        # MASTER与BACKUP之间的验证密码，两端必须保持一致。
</span><span class='line'>    }
</span><span class='line'>    virtual_ipaddress {
</span><span class='line'>        192.168.30.172   # 虚拟IP，即 VIP
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'># 虚拟服务器  需要填写自己 IP 和 端口
</span><span class='line'>virtual_server 192.168.30.172 1935 {
</span><span class='line'>    delay_loop 6          # 每隔 6 秒去检查 RealServer 的健康状态
</span><span class='line'>    lb_algo rr                #  LVS 的 rr(轮循)算法，LVS共 10种算法，如果需要修改就在此处。
</span><span class='line'>    lb_kind DR                # LVS DR模式(直接路由)，LVS共三种工作模式：VS/NAT、VS/TUN、VS/DR
</span><span class='line'>    persistence_timeout 50        # 同一IP的连接在60秒内分配到同一台 RealServer
</span><span class='line'>    protocol TCP          # 使用TCP协议来检查后台服务器(realserver)状态
</span><span class='line'>
</span><span class='line'>    real_server 192.168.30.171 1935 {     # 后端red5 IP地址与端口
</span><span class='line'>        weight 1                      # 权重
</span><span class='line'>        TCP_CHECK {
</span><span class='line'>            connect_timeout 3         # 3秒内无响应超时
</span><span class='line'>            nb_get_retry 3
</span><span class='line'>            delay_before_retry 3
</span><span class='line'>            connect_port 1935
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    real_server 192.168.30.150 1935 {     # 后端red5 IP地址与端口
</span><span class='line'>        weight 1
</span><span class='line'>        TCP_CHECK {
</span><span class='line'>            connect_timeout 3
</span><span class='line'>            nb_get_retry 3
</span><span class='line'>            delay_before_retry 3
</span><span class='line'>            connect_port 1935
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>同样，在两台 Director 都需要安装与配置，注意的是两台keepalived.conf的配置所有不同。</p>

<h3>设置Real Server</h3>

<p>以下操作如果没有特别说明，将针对 <strong>所有Real Server</strong>
将以下内容添加到 /root/realserver.sh</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>SNS_VIP=192.168.30.172
</span><span class='line'>/etc/rc.d/init.d/functions
</span><span class='line'>case "$1" in
</span><span class='line'>start)
</span><span class='line'>       /sbin/ifconfig lo:0 $SNS_VIP netmask 255.255.255.255 broadcast $SNS_VIP
</span><span class='line'>       /sbin/route add -host $SNS_VIP dev lo:0
</span><span class='line'>       echo "1" &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
</span><span class='line'>       echo "2" &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
</span><span class='line'>       echo "1" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
</span><span class='line'>       echo "2" &gt;/proc/sys/net/ipv4/conf/all/arp_announce
</span><span class='line'>       sysctl -p &gt;/dev/null 2&gt;&1
</span><span class='line'>       echo "RealServer Start OK"
</span><span class='line'>       ;;
</span><span class='line'>stop)
</span><span class='line'>       /sbin/ifconfig lo:0 down
</span><span class='line'>       /sbin/route del $SNS_VIP &gt;/dev/null 2&gt;&1
</span><span class='line'>       echo "0" &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
</span><span class='line'>       echo "0" &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
</span><span class='line'>       echo "0" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
</span><span class='line'>       echo "0" &gt;/proc/sys/net/ipv4/conf/all/arp_announce
</span><span class='line'>       echo "RealServer Stoped"
</span><span class='line'>       ;;
</span><span class='line'>*)
</span><span class='line'>       echo "Usage: $0 {start|stop}"
</span><span class='line'>       exit 1
</span><span class='line'>esac
</span><span class='line'>exit 0</span></code></pre></td></tr></table></div></figure>


<p>添加执行权限
chmod +x /root/realserver.sh</p>

<p>启动及添加到开机自启动</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/root/realserver.sh start
</span><span class='line'>echo "/root/realserver.sh start" &gt;&gt; /etc/rc.local</span></code></pre></td></tr></table></div></figure>


<h3>测试</h3>

<p>首先依次启动 lvs-dr_01 和 lvs-dr_02 的keepalived服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/keepalived restart</span></code></pre></td></tr></table></div></figure>


<p>检查LVS路由和连接</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ipvsadm -Ln
</span><span class='line'>
</span><span class='line'>IP Virtual Server version 1.2.1 (size=4096)
</span><span class='line'>Prot LocalAddress:Port Scheduler Flags
</span><span class='line'>  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
</span><span class='line'>TCP  192.168.30.172:1935 rr persistent 50
</span><span class='line'>  -&gt; 192.168.30.150:1935          Route   1      2          0         
</span><span class='line'>  -&gt; 192.168.30.171:1935          Route   1      0          0         </span></code></pre></td></tr></table></div></figure>


<p>可以看到 realserver-01:1935 和 realserver-02:1935 已经加入到LVS。</p>

<p>通过RTMP客户端不断访问，可以看到2台 RealServer 都有活动的链接：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IP Virtual Server version 1.2.1 (size=4096)
</span><span class='line'>Prot LocalAddress:Port Scheduler Flags
</span><span class='line'>  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
</span><span class='line'>TCP  192.168.30.172:1935 rr persistent 50
</span><span class='line'>  -&gt; 192.168.30.150:1935          Route   1      1          0         
</span><span class='line'>  -&gt; 192.168.30.171:1935          Route   1      1          0         </span></code></pre></td></tr></table></div></figure>


<h3>常见错误</h3>

<p>ip address associated with VRID not present in received packet
这个错误主要原因是 在同一网段内virtual_router_id 值不能相同，如果相同会在messages中收到VRRP错误包，所以需要更改 virual_router_id，但如果只改一个，就等于是2个相对独立的集群，所以virual_router_id改成非51的相同值即可，例如都改成 52.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress个性化定制]]></title>
    <link href="http://agenge.github.io/blog/2013/10/10/octopress-personalization-customization/"/>
    <updated>2013-10-10T13:39:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/10/10/octopress-personalization-customization</id>
    <content type="html"><![CDATA[<h2>设置导航栏</h2>

<p>编辑octopress\source_includes\custom\navigation.html, 并加入以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul class="main-navigation"&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="http://agenge.github.io/"&gt;首页&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>  &lt;li&gt;&lt;a href="http://agenge.github.io/blog/archives"&gt;归档&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>    &lt;li&gt;&lt;a href="http://agenge.github.io/about"&gt;关于我&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<h2>添加 &ldquo;关于我&#8221;导航页</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_page['about']
</span><span class='line'>mkdir -p source/about
</span><span class='line'>Creating new page: source/about/index.markdown</span></code></pre></td></tr></table></div></figure>


<h2>侧边栏文章分类</h2>

<p>创建文件：octopress\plugins\category_list_tab.rb，内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Jekyll 
</span><span class='line'>  class CategoryListTag &lt; Liquid::Tag 
</span><span class='line'>    def render(context) 
</span><span class='line'>      html = "" 
</span><span class='line'>      categories = context.registers[:site].categories.keys 
</span><span class='line'>      categories.sort.each do |category| 
</span><span class='line'>        posts_in_category = context.registers[:site].categories[category].size 
</span><span class='line'>        category_dir = context.registers[:site].config['category_dir'] 
</span><span class='line'>        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase) 
</span><span class='line'>        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://agenge.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n" 
</span><span class='line'>      end 
</span><span class='line'>      html 
</span><span class='line'>    end 
</span><span class='line'>  end 
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</span></code></pre></td></tr></table></div></figure>


<p>新建文件 octopress\source_includes\custom\category_list.html,并添加以下内容(由于偶本地生成一直报错，请注意在使用的时候去掉反斜扛)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt; 
</span><span class='line'>  &lt;h1&gt;文章分类&lt;/h1&gt; 
</span><span class='line'>  &lt;ul id="categories"&gt; 
</span><span class='line'>    {\% category_list \%} 
</span><span class='line'>  &lt;/ul&gt; 
</span><span class='line'>&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>


<p>修改 _config.yml文件 ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/recent_posts.html, asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</span></code></pre></td></tr></table></div></figure>


<p>修改octopress\source_includes\asides\recent_posts.html</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;h1&gt;Recent Posts&lt;/h1&gt;</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1&gt;最新文章&lt;/h1&gt;</span></code></pre></td></tr></table></div></figure>


<h2>显示 文章以摘要形式展示</h2>

<p>在markdown文件需要显示的地址添加 <!-- more -->，在发布文章后就会显示 Read On链接。
如果想将Read On显示为：阅读全文，请修改_config.yml,将</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>excerpt_link: "Read on &rarr;" </span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>excerpt_link: "阅读全文 &rarr;" </span></code></pre></td></tr></table></div></figure>


<h2>添加版权声明</h2>

<p>在 source_includes\post 目录下创建一个文件：license.html，内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;DIV style="font-size:12px;BORDER-BOTTOM: #bbbbbb 1px solid; BORDER-LEFT: #bbbbbb 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #bbbbbb 1px solid; BORDER-RIGHT: #bbbbbb 1px solid" class=oec2003right&gt;
</span><span class='line'>&lt;DIV style="MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px"&gt;&lt;/DIV&gt;
</span><span class='line'>&lt;DIV style="LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000"&gt;
</span><span class='line'>作者： &lt;A href="http://agenge.com"&gt;agenge&lt;/A&gt; &lt;BR&gt;
</span><span class='line'>出处： &lt;A href="http://agenge.com"&gt;http://agenge.com&lt;/A&gt; 
</span><span class='line'>&lt;BR&gt;本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者
</span><span class='line'>&lt;a href=mailto:huanggeng.8552@gmail.com&gt; agenge &lt;/a&gt;。 &lt;/DIV&gt;&lt;/DIV&gt;
</span><span class='line'>
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>在sass\custom_styles.scss  添加样式，内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.oec2003right
</span><span class='line'>{
</span><span class='line'>    background: #C3D9FF;
</span><span class='line'>    height:120px;
</span><span class='line'>    border:1px solid #BBBBBB;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>.oec2003right a:link 
</span><span class='line'>{
</span><span class='line'>    color: #0057b6;
</span><span class='line'>    text-decoration: none;
</span><span class='line'>}
</span><span class='line'>.oec2003right a:visited 
</span><span class='line'>{
</span><span class='line'>    color: #0057b6;
</span><span class='line'>    text-decoration: none;
</span><span class='line'>}
</span><span class='line'>.oec2003right a:active,a:hover
</span><span class='line'>{
</span><span class='line'>    color: #0057b6;
</span><span class='line'>    text-decoration: underline;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>修改 source_layouts\post.html, 在第14行(由于偶本地生成一直报错，请注意在使用的时候去掉反斜扛)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Include file 'post\/categories.html' contains invalid characters or sequences</span></code></pre></td></tr></table></div></figure>


<p>这行之后, 添加(由于偶本地生成一直报错，请注意在使用的时候去掉反斜扛)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Include file 'post\/license.html' contains invalid characters or sequences</span></code></pre></td></tr></table></div></figure>


<p>在_config.yml最后一行添加以下内容，意思为控制是否显示页面的版权信息,True为显示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post_license: true</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<DIV style="font-size:12px;BORDER-BOTTOM: #bbbbbb 1px solid; BORDER-LEFT: #bbbbbb 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #bbbbbb 1px solid; BORDER-RIGHT: #bbbbbb 1px solid" class=oec2003right>
<DIV style="MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px"></DIV>
<DIV style="LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000">
作者： <A href="http://agenge.com">agenge</A> <BR>
出处： <A href="http://agenge.com">http://agenge.com</A> 
<BR>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者
<a href=mailto:huanggeng.8552@gmail.com> agenge </a></DIV></DIV>


<h2>域名设置</h2>

<p>域名服务商设置</p>

<p>主机名    记录类型   地址
空     A记录     207.97.227.245
www     CNAME       agenge.github.com</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "agenge.com" &gt;&gt; source/CNAME</span></code></pre></td></tr></table></div></figure>


<hr />

<p>以上主要是 agenge.com 这个Blog的常见设置，如果你觉得设置很麻烦，请直接git源代码吧: github.com/agenge.github.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis安装与配置]]></title>
    <link href="http://agenge.github.io/blog/2013/10/08/redis-install-and-config/"/>
    <updated>2013-10-08T20:05:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/10/08/redis-install-and-config</id>
    <content type="html"><![CDATA[<h2>安装环境</h2>

<ul>
<li>操作系统：CentOS 6.3 64位</li>
<li>Redis：最新版本 2.6.14</li>
</ul>


<h2>Redis安装</h2>

<ol>
<li>下载Redis</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install make gcc
</span><span class='line'>wget http://download.redis.io/redis-stable.tar.gz
</span><span class='line'>tar zxvf redis-stable.tar.gz
</span><span class='line'>cd redis-stable
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<p> 这样即完成redis的安装,整个安装是否超级简单,至少偶认为不复杂。</p>

<ol>
<li><p>启动和停止Redis
在Linux系统中，启动与停止服务也是非常简单，Redis主要提供以下几个可执行程序：</p></li>
<li><p>redis-server     看名称就明白：Redis服务器</p></li>
<li>redis-cli        Redis命令行客户端</li>
<li>redis-benchmark  Redis性能测试工具</li>
<li>redis-check-aof  AOF文件修复工具</li>
<li>redis-check-dump RDB文件检查工具</li>
</ol>


<p> <strong> 启动Redis </strong></p>

<p> 启动redis,直接在命令行输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis-server</span></code></pre></td></tr></table></div></figure>


<p> 如果启动正常，就会输出以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2935] 08 Oct 20:29:05.156 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
</span><span class='line'>[2935] 08 Oct 20:29:05.158 * Max number of open files set to 10032
</span><span class='line'>             _._                                                  
</span><span class='line'>        _.-``__ ''-._                                             
</span><span class='line'>   _.-``    `.  `_.  ''-._           Redis 2.6.14 (00000000/0) 64 bit
</span><span class='line'>  .-`` .-```.  ```\/    _.,_ ''-._                                   
</span><span class='line'> (    '      ,       .-`  | `,    )     Running in stand alone mode
</span><span class='line'> |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
</span><span class='line'> |    `-._   `._    /     _.-'    |     PID: 2935
</span><span class='line'>  `-._    `-._  `-./  _.-'    _.-'                                   
</span><span class='line'> |`-._`-._    `-.__.-'    _.-'_.-'|                                  
</span><span class='line'> |    `-._`-._        _.-'_.-'    |           http://redis.io        
</span><span class='line'>  `-._    `-._`-.__.-'_.-'    _.-'                                   
</span><span class='line'> |`-._`-._    `-.__.-'    _.-'_.-'|                                  
</span><span class='line'> |    `-._`-._        _.-'_.-'    |                                  
</span><span class='line'>  `-._    `-._`-.__.-'_.-'    _.-'                                   
</span><span class='line'>   `-._    `-.__.-'    _.-'                                       
</span><span class='line'>       `-._        _.-'                                           
</span><span class='line'>           `-.__.-'                                               
</span><span class='line'>[2935] 08 Oct 20:29:05.159 # Server started, Redis version 2.6.14
</span><span class='line'>[2935] 08 Oct 20:29:05.159 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
</span><span class='line'>[2935] 08 Oct 20:29:05.159 * The server is now ready to accept connections on port 6379</span></code></pre></td></tr></table></div></figure>


<p> 从输出信息可以看出redis已经启动成功，默认监听的6379端口。不过我们还有更好的办法来启动redis-server，Redis默认已经为我们提供一个系统启动脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp utils/redis_init_script /etc/init.d/redis_server_6379
</span><span class='line'>chmod +x /etc/init.d/redis_server_6379
</span><span class='line'>mkdir /etc/redis
</span><span class='line'>cp redis.conf /etc/redis/6379.conf
</span><span class='line'>echo "vm.overcommit_memory = 1" &gt;&gt; /etc/sysctl.conf
</span><span class='line'>/etc/init.d/redis_server_6379 start</span></code></pre></td></tr></table></div></figure>


<p> <strong> 关闭Redis </strong>
 相对启动来讲，关闭redis就更为简单，只需要输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis-cli SHUTDOWN</span></code></pre></td></tr></table></div></figure>


<p> 此命令输入完成后，首先会断开所有客户端的连接，然后根本配置进行持久化，如果关闭正常，就会输出以下类似信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2989] 08 Oct 20:46:08.156 # User requested shutdown...
</span><span class='line'>[2989] 08 Oct 20:46:08.156 * Saving the final RDB snapshot before exiting.
</span><span class='line'>[2989] 08 Oct 20:46:08.175 * DB saved on disk
</span><span class='line'>[2989] 08 Oct 20:46:08.175 # Redis is now ready to exit, bye bye...</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Redis 命令行客户端</h2>

<p>前面已经介绍过redis-cli这个工具，通过redis-cli向 Redis服务端发送命令有两种方式：</p>

<ul>
<li>将要发送的命令作为 redis-cli 的参数，例如之前介绍过的  redis-cli SHUTDOWN, 此处的SHUTDOWN即是发送命令，也是一个参数。</li>
<li>直接进入 redis-cli 交互式命令行执行命令，例如：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis-cli
</span><span class='line'>redis 127.0.0.1:6379&gt; ping
</span><span class='line'>PONG</span></code></pre></td></tr></table></div></figure>


<p> 其中“redis 127.0.0.1:6379>” 是redis-cli的命令提示符，类似Mysql中的“mysql> ” ，ping是Redis内置的命令，用来测试是否与服务器连接正常。</p>

<h2>Redis多数据库</h2>

<p>和Mysql一样，Redis也是支持在同一台服务器启动多个redis server，之前已经有过介绍，在启动redis时，用到/etc/redis/6379.conf 这个配置文件，下面就来介绍如何在一台服务器启动多个redis数据库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /etc/redis/
</span><span class='line'>cp 6379.conf 6380.conf </span></code></pre></td></tr></table></div></figure>


<p>修改6380.conf 以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pidfile /var/run/redis_6380.pid
</span><span class='line'>port 6380</span></code></pre></td></tr></table></div></figure>


<p>保存退出，修改启动服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /etc/init.d/redis_server_6379 /etc/init.d/redis_server_6380</span></code></pre></td></tr></table></div></figure>


<p>将 REDISPORT=6379  修改为 REDISPORT=6380</p>

<p>启动redis server</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/redis_server_6379 start
</span><span class='line'>/etc/init.d/redis_server_6380 start</span></code></pre></td></tr></table></div></figure>


<p>上面代表将启动两个redis 数据库，分别监听6379和6380端口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用GitHub搭建免费的个人blog]]></title>
    <link href="http://agenge.github.io/blog/2013/09/12/write-blog-octopress-with-github/"/>
    <updated>2013-09-12T22:18:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/09/12/write-blog-octopress-with-github</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<h2>为啥写篇文章</h2>

<ol>
<li><p>熟悉WordPress的或许都明白，为了写作，你要学习很多东西，例如Linux、Apache/Nginx、Mysql以及各种中间件；</p></li>
<li><p>你要花钱买VPS/虚拟主机，你要自己优化Web Server和Mysql，你要定期备份Mysql；</p></li>
<li><p>WordPress官方已经被墙（对于合格的IT屌丝，这点不是问题）；</p></li>
</ol>


<p>你可能已经在心理产生疑问：“你说这么多费话，无非就是想让我放弃WP，难道你有解决上述问题的完美方案？”
虽不敢说完美解决，但至少有这么一个blog平台：</p>

<ul>
<li>无须数据库</li>
<li>无须Web Server</li>
<li>无须备份且数据永不丢失（相对自己备份而言）</li>
<li>所有操作均有版本记录</li>
</ul>


<p>看了之后是不是很“鸡动”？没错，这个平台就是Github，结合jekyll/Octopress就完全可以专心写作，
不过相对WP，功能确实要少些，图片和视频功能实在太弱。</p>

<h2>Jekyll/Octopress是啥</h2>

<p>Jekyll即是一个轻量级Blog系统，而且还是一个强大的静态网站生成系统，具体的介绍请参考以下链接：</p>

<p>1、<a href="http://calefy.org/2012/03/03/my-process-of-building-jekyll-blog.html">Jekyll建站之旅</a></p>

<p>2、<a href="http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html">通过GitHub Pages建立个人站点（详细步骤）</a></p>

<p>3、<a href="http://ztpala.com/2011/09/12/jekyll-and-github-pages/">Jekyll介绍</a></p>

<p>Octopress其实就是一个基于Jekyll实现的静态网站系统，具体介绍如下（引用）：</p>

<ul>
<li><p>使用 Markdown 标记语言书写源文件， 通过 Markdown 解析器转换为 HTML 文件</p></li>
<li><p>通过 Octopress 提供的站点模板提供所需的 Web 资产文件 （Javascript、CSS、image 等）</p></li>
<li><p>只包含静态网页，无需数据库支持，对系统要求低且迁移方便</p></li>
<li><p>以编写程序的方式编制网站，便于实现版本控制</p></li>
<li><p>Octopress / Jekyll 使用简洁的Ruby框架实现。</p>

<ul>
<li><p>Octopress 以 rake 任务的形式实现静态站点页面生成, 操作十分简单</p></li>
<li><p>Octopress 以 rake 任务的形式实现到普通网站和 Github 的发布</p></li>
<li><p>Octopress 与 Github 完美结合，你无需学习过多的 git 命令语法，使非专业人士的使用成为可能</p></li>
</ul>
</li>
</ul>


<!-- more -->


<h1>准备工具</h1>

<p>说一堆费话，现在说说要准备些什么工具</p>

<ol>
<li><p>Git for Windows(如果你是Linux/Mac就更方便，不过这篇文章主要是为了Windows下的用户)</p>

<p> 猛撮 <a href="https://code.google.com/p/msysgit/downloads/list">下载Git</a> 下最新版本。
偶是下载的 Git-1.8.3-preview20130601.exe</p></li>
<li><p>安装Ruby环境</p>

<p> 猛撮 <a href="https://rubyforge.org/frs/?group_id=167">下载RubyInstaller</a></p>

<ul>
<li>如果你是Octopress，请下载 rubyinstaller-1.9.2-p290</li>
<li>如果你是Jekyll，请下载 rubyinstaller-1.9.1-p430</li>
</ul>
</li>
</ol>


<p> 安装之后确保C:\Ruby193\bin 在系统的环境变量中。</p>

<ol>
<li>安装DevKit</li>
</ol>


<p>  ruby 的模块工具 gem 在生成本地模块时可能需要用到编译环境，通常有2种选择：</p>

<p> <a href="http://www.mingw.org/">MinGW and MSYS</a> 或 <a href="https://github.com/oneclick/rubyinstaller/wiki/development-kit">RubyInstaller DevKit</a></p>

<p> 偶是使用的 DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe
 , 在”Start Command Prompt with Ruby”命令行中进入DevKit解压缩的目录：</p>

<pre><code>    ruby dk.rb init 

    ruby dk.rb install
    gem install rdiscount --platform=ruby
</code></pre>

<p> 如果没问题，会提示如下信息：</p>

<pre><code>    Fetching: rdiscount-2.1.6.gem (100%)
    Temporarily enhancing PATH to include DevKit...
    Building native extensions.  This could take a while...
    Successfully installed rdiscount-2.1.6
    1 gem installed
    Installing ri documentation for rdiscount-2.1.6...
    Installing RDoc documentation for rdiscount-2.1.6...
</code></pre>

<ol>
<li>安装Python for Windows</li>
</ol>


<p> 最后还要安装Python，相对Ruby环境，安装Python就简单许多，下载python-2.7.5.amd64.msi即可。</p>

<ol>
<li>配置环境变量
环境变量需要在两个地址设置： Windows系统与Git Bash</li>
<li><p>在你的Windows系统创建两个新的环境变量</p>

<ul>
<li>LANG 环境变量，值设置为：zh_CN.UTF-8</li>
<li>LC_ALL 环境变量，值设置为: zh_CN.UTF-8</li>
</ul>
</li>
<li><p>打开Git Bash</p>

<ul>
<li><code>$ echo "export LANG LC_ALL" &gt; ~/.bash_profile</code></li>
<li><code>$ echo "alias ll='ls -l --color=tty'" &gt;&gt; ~/.bash_profile</code></li>
<li><code>$ echo "alias ls='ls --color=tty'" &gt;&gt; ~/.bash_profile</code></li>
</ul>
</li>
<li><p>准备一个文本编辑器，只要能保存UTF-8无BOM格式的即可，例如UltraEdit.</p></li>
<li><p>设置无密码登录github</p>

<pre><code> ssh-keygen -C "username@email.com" -t rsa
</code></pre></li>
</ol>


<p> username@email.com换成你的github注册时的邮箱。</p>

<ul>
<li>创建成功后，在你的C:\Users\%username%.ssh 目录会生成一个 id_rsa.pub公钥文件。</li>
<li>登录github.com（如果没有就注册一个），在“Account Settings”->“SSH Keys”，点击右侧的“Add SSH Key”。</li>
<li><p>将id_rsa.pub文件中的内容复制到“Key”中并保存。</p></li>
<li><p>测试：</p>

<pre><code> ssh -T git@github.com
</code></pre></li>
</ul>


<p> 如果没有任何问题，提示如下：</p>

<pre><code>    Hi agenge! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<h1>初始化Ruby环境</h1>

<h2>gem源的问题</h2>

<p>作为天朝的屌丝，有时候你总得多墙外的人多做些工作，gem的更新源也要墙？还好还好，国内有良心的企业还是有的（虽然不多），对于gem源，直接使用淘宝的吧。</p>

<pre><code>gem sources --remove https://rubygems.org/
gem sources -a http://ruby.taobao.org
</code></pre>

<p>如果你觉得不放心，还可以确认是否设置正确：</p>

<pre><code>gem sources -l
</code></pre>

<h2>安装bundler(必须) 和 rdoc(非必须)</h2>

<pre><code>gem install bundler rdoc
bundle install
</code></pre>

<h1>安装Octopress</h1>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
rake install
</code></pre>

<h1>配置Octopress</h1>

<h2>修改_config.yml</h2>

<p>你可以根据这个文件你的以下信息：</p>

<ul>
<li>title: 网站名称</li>
<li>subtitle: 网站子名称</li>
<li>author: 作者名称</li>
</ul>


<p>除了这3个以外，把Twitter相关全部注释，更多的选项你可以看下注释或Google搜索。</p>

<h2>发表文章</h2>

<p>激动人心的时刻即将到来，终于到了发表文章的这一天，octopress居然把写作与发表文件变得如此简单。</p>

<pre><code>rake new_post[“tile”]  # 创建一个新文章
</code></pre>

<p>执行这条命令之后，会在octopress\source_posts目录下生成一个&#8221;YYYY-MM-DD-title.markdown&#8221;的文件</p>

<p>在生成静态页面之前，我们需要解决Windows下中文编码的问题，有两个地方需要注意：</p>

<ol>
<li>.markdown文件有中文的话必须保存：UTF-8无BOM</li>
<li><p>编辑C:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-0.12.0\lib\jekyll\convertible.rb第28行，修改为：</p>

<p> self.content = File.read(File.join(base, name), :encoding => &lsquo;utf-8&rsquo;)</p></li>
</ol>


<p>生成静态页面</p>

<pre><code>rake generate           # 生成新的静态页面
</code></pre>

<p>在本地预览文章效果：</p>

<pre><code>rake preview
</code></pre>

<p> 如果成功的话，访问: <a href="http://localhost:4000">http://localhost:4000</a> 就能看到效果。</p>

<h1>设置本地仓库与远程仓库关联</h1>

<ul>
<li><p>创建git账号与仓库</p>

<ul>
<li>用户名：username</li>
<li>仓库名：username.github.com</li>
</ul>
</li>
<li><p>关联github仓库</p>

<ul>
<li>rake setup_github_pages</li>
</ul>
</li>
</ul>


<p>提示输入远程仓库地址，请输入：</p>

<pre><code>git@github.com:username/username.github.com.git
</code></pre>

<p>表示将blog与 username.github.com仓库关联.</p>

<h2>部署Blog到Github</h2>

<pre><code>rake deploy
</code></pre>

<p>这条命令表示发布文件到github。</p>

<h2>将Octopress源文件推送到 Github的 source 分支</h2>

<pre><code>git add .
git commit -m “comment”
git push origin source
</code></pre>

<h2>访问Blog</h2>

<p>打开浏览器输入：username.github.com</p>

<p>如果一切正常，就能看到你的文章。</p>

<h1>rake常用命令</h1>

<pre><code>$ rake -T
rake clean                     # Clean out caches: .pygments-cache, .gist-c...
rake copydot[source,dest]      # copy dot files for deployment
rake deploy                    # Default deploy task
rake gen_deploy                # Generate website and deploy
rake generate                  # Generate jekyll site
rake install[theme]            # Initial setup for Octopress: copies the de...
rake integrate                 # Move all stashed posts back into the posts...
rake isolate[filename]         # Move all other posts than the one currentl...
rake list                      # list tasks
rake new_page[filename]        # Create a new page in source/(filename)/ind...
rake new_post[title]           # Begin a new post in source/_posts
rake preview                   # preview the site in a web browser
rake push                      # deploy public directory to github pages
rake rsync                     # Deploy website via rsync
rake set_root_dir[dir]         # Update configurations to support publishin...
rake setup_github_pages[repo]  # Set up _deploy folder and deploy branch fo...
rake update_source[theme]      # Move source to source.old, install source ...
rake update_style[theme]       # Move sass to sass.old, install sass theme ...
rake watch                     # Watch the site and regenerate when it changes
</code></pre>

<p>Edit By <a href="http://agenge.github.com">agenge</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRBD+Heartbeat+Mysql高可用配置]]></title>
    <link href="http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha/"/>
    <updated>2013-08-09T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>DRBD全称Distributed Replicated Block （分布式的复制块设备），属于Device公司，但是完全开源。它是一款基于块设备的文件复制解决方案，速度比文件级别的软件如NFS，samba快很多，是很多中小企业的共享存储首选解决方案。</p>

<p>DRBD工作需要在两个节点上同时准备一块一模一样的分区组成镜像，这就是为什么它叫做分布式复制块设备，它主要通过复制数据来实现文件同步（备份），主要用于集群文件共享， 我们通过它的工作原理来了解块复制和文件复制的不同。</p>

<p>首先，您需要知道，DRBD是工作在系统内核空间，而不是用户空间，它直接复制的是二进制数据，这是它速度快的根本原因。其次，DRBD至少需要两个节点来工作，一主一次。</p>

<p>DRBD的文件同步过程和普通复制过程的不同：</p>

<p>DRBD在数据进入Buffer Cache时，先经过DRBD这一层，复制一份数据经过TCP/IP协议封装，发送到另一个节点上，另一个节点通过TCP/IP协议来接受复制过来的数据，同步到次节点的DRBD设备上。</p>

<h2>准备工作</h2>

<p>准备至少2台服务器，且每台服务器有一块磁盘或一个单独未使用的分区，偶的环境如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IP地址             硬盘分区        主机名                   操作系统
</span><span class='line'>192.168.30.234        /dev/sdb,8G     drbd-01.i.12582.com     CentOS 6.3 x86_64位   主节点(Primary Node) 
</span><span class='line'>192.168.30.235        /dev/sdb,8G     drbd-02.i.12582.com     CentOS 6.3 x86_64位   次节点(Secondary Node)</span></code></pre></td></tr></table></div></figure>


<p>注意：如果有服务器有2块或以上网卡的同学，建议将其中一块网卡专门用来做网络心跳线，甚至接入另外一台单独的交换机，本次环境只有单网卡。</p>

<h2>初始化设置</h2>

<p>1  所有节点关闭iptables和SELinux</p>

<p>2  在所有节点/etc/hosts加入以下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.30.234  drbd-01.i.12582.com drbd-01
</span><span class='line'>192.168.30.235  drbd-02.i.12582.com drbd-02</span></code></pre></td></tr></table></div></figure>


<p>3  所有节点创建独立分区：</p>

<pre><code>fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disk label
Building a new DOS disk
label with disk identifier 0x46b64833.Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.
Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)
WARNING: DOS-compatible mode is deprecated. It's strongly recommended to
switch off the mode (command 'c') and change display units to
sectors (command 'u').

Command (m for help): p
Disk /dev/sdb: 8589 MB, 8589934592 bytes
255 heads, 63 sectors/track, 1044 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x46b64833

Device Boot    Start        End        Blocks    Id    System

Command (m for help): n
Command action
e   extended
p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-1044, default 1):
Using default value 1
Last cylinder, +cylinders or +size{K,M,G} (1-1044, default 1044):
Using default value 1044

Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.
</code></pre>

<!-- more -->


<h2>安装Hearbeat</h2>

<pre><code>wget ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm
rpm -ivUh epel-release-6-5.noarch.rpm
yum --enablerepo=epel install heartbeat -y
</code></pre>

<h2>安装DRBD</h2>

<p>1  安装依赖包</p>

<pre><code>yum -y install gcc kernel-devel kernel-headers flex
</code></pre>

<p>2  安装DRBD</p>

<pre><code>wget http://oss.linbit.com/drbd/8.4/drbd-8.4.3.tar.gz
tar zxvf drbd-8.4.3.tar.gz
cd drbd-8.4.3
./configure --prefix=/usr/local/drbd --with-km --with-heartbeat
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
make install
cp -R /usr/local/drbd/etc/ha.d/resource.d/drbd* /etc/ha.d/resource.d/
</code></pre>

<p>3  其他设置</p>

<pre><code>mkdir -p /usr/local/drbd/var/run/drbd
cp /usr/local/drbd/etc/rc.d/init.d/drbd /etc/rc.d/init.d/
chkconfig --add drbdchkconfig drbd on
</code></pre>

<h2>安装DRBD模块</h2>

<pre><code>cd drbdmake 
clean
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
cp drbd.ko /lib/modules/`uname -r`/kernel/lib/
depmod
</code></pre>

<p>以上操作请在所有节点操作一次。</p>

<hr />

<h2>设置DRBD</h2>

<p><strong>配置drbd.conf</strong></p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/global_common.conf
global {
    minor-count 64;
    usage-count yes;
    # minor-count dialog-refresh disable-ip-verification
}


common {
    syncer { rate 1000M; }
    handlers {
        # These are EXAMPLE handlers only.
        # They may have severe implications,
        # like hard resetting the node under certain circumstances.
        # Be careful when chosing your poison.

        pri-on-incon-degr "/usr/lib/drbd/notify-pri-on-incon-degr.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        pri-lost-after-sb "/usr/lib/drbd/notify-pri-lost-after-sb.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        local-io-error "/usr/lib/drbd/notify-io-error.sh; /usr/lib/drbd/notify-emergency-shutdown.sh; echo o &amp;gt; /proc/sysrq-trigger ; halt -f";
        fence-peer "/usr/lib/drbd/crm-fence-peer.sh";
        pri-lost "/usr/local/drbd/lib/drbd/notify-pri-lost.sh; /usr/local/drbd/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt;/proc/sysrq-trigger ; reboot -f";
        split-brain "/usr/lib/drbd/notify-split-brain.sh root";
        out-of-sync "/usr/lib/drbd/notify-out-of-sync.sh root";
        # before-resync-target "/usr/lib/drbd/snapshot-resync-target-lvm.sh -p 15 -- -c 16k";
        # after-resync-target /usr/lib/drbd/unsnapshot-resync-target-lvm.sh;
    }

    startup {

        # wfc-timeout degr-wfc-timeout outdated-wfc-timeout wait-after-sb
        wfc-timeout 60;
        degr-wfc-timeout 120;
        outdated-wfc-timeout 2;
    }

    options {
        # cpu-mask on-no-data-accessible
        }

    disk {
        # size max-bio-bvecs on-io-error fencing disk-barrier disk-flushes
        # disk-drain md-flushes resync-rate resync-after al-extents
        # c-plan-ahead c-delay-target c-fill-target c-max-rate
        # c-min-rate disk-timeout
        on-io-error detach;
        fencing resource-only;
    }

    net {
        # protocol timeout max-epoch-size max-buffers unplug-watermark
        # connect-int ping-int sndbuf-size rcvbuf-size ko-count
        # allow-two-primaries cram-hmac-alg shared-secret after-sb-0pri
        # after-sb-1pri after-sb-2pri always-asbp rr-conflict
        # ping-timeout data-integrity-alg tcp-cork on-congestion
        # congestion-fill congestion-extents csums-alg verify-alg
        # use-rle
        protocol C;
    }
}
</code></pre>

<p>设置资源文件</p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/r0.res
resource r0 {
    on drbd-01.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.234:7788;
        meta-disk       internal;
    }

    on drbd-02.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.235:7788;
        meta-disk       internal;
    }
}
</code></pre>

<hr />

<h3>设置权限</h3>

<pre><code>chgrp haclient /sbin/drbdsetup
chmod o-x /sbin/drbdsetup
chmod u+s /sbin/drbdsetup
chgrp haclient /sbin/drbdmeta
chmod o-x /sbin/drbdmeta
chmod u+s /sbin/drbdmeta
</code></pre>

<p>加载DRBD模块与建立resource</p>

<pre><code>modprobe drbd
lsmod | grep drbd
drbd                  328626  0
libcrc32c               1246  1 drbd
</code></pre>

<p>写入一些数据到/dev/sdb1</p>

<pre><code>dd if=/dev/zero of=/dev/sdb1 bs=1M count=100
</code></pre>

<p>建立Resource</p>

<pre><code>drbdadm create-md r0
Writing meta data...
initializing activity log
NOT initializing bitmap
New drbd meta data block successfully created.
success
</code></pre>

<h3>启动DRBD</h3>

<pre><code>/etc/init.d/drbd start
Starting DRBD resources: [
      create res: r0
    prepare disk: r0
     adjust disk: r0
     adjust net: r0
]
degr-wfc-timeout has to be shorter than wfc-timeout
degr-wfc-timeout implicitly set to wfc-timeout (60s)
..........
***************************************************************
DRBD's startup script waits for the peer node(s) to appear.
- In case this node was already a degraded cluster before the
reboot the timeout is 120 seconds. [degr-wfc-timeout]
- If the peer was available before the reboot the timeout will
expire after 60 seconds. [wfc-timeout]
(These values are for resource 'r0'; 0 sec -&amp;gt; wait forever)
To abort waiting enter 'yes' [  49]:yes

.
</code></pre>

<p>节点2按以上操作执行一次。</p>

<h3>DRBD状态查看</h3>

<ol>
<li><p>Secondary/Unknown：若drbd-01服务启动而drbd-02尚未启动,则ro会出现Secondary/Unknown</p>

<pre><code> /init.d/drbd status
 drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs        ro                 ds                 p   mounted
 fstype
 0:r0   WFConnection  Secondary/Unknown  Inconsistent/DUnknown  C
</code></pre>

<p>查看drbd</p>

<pre><code>  cat /proc/drbd
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre></li>
<li><p>Inconsistent/Inconsistent：ds出現Inconsistent表示兩台node資料尚未同步。</p>

<pre><code> drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs         ro                   ds                         p  mounted  
 fstype
 0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre>

<p>查看内核</p>

<pre><code>  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r-----
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre>

<p>3  SyncSource：cs出現SyncTarget表示正在同步中，可看到目前同步時的進度．</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs          ro                 ds                     p  mounted  
  fstype
  ...    sync'ed:    26.1%              (6056/8188)M
  0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>4  Secondary/Secondary：表示尚未設定Primary Node。</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs         ro                   ds                         p  mounted  
  fstype
  0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre></li>
</ol>


<h3>设置主节点(Primary Node)</h3>

<p>在drbd-01进行以下操作:</p>

<pre><code>drbdadm -- --overwrite-data-of-peer primary r0
</code></pre>

<p>再查看下状态:</p>

<pre><code>/etc/init.d/drbd status
drbd driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-01.i.12582.com, 2013-08-08 14:00:35
m:res  cs          ro                 ds                     p  mounted  fstype
...    sync'ed:    13.1%              (7124/8188)M
0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>在drbd-02查看下状态：</p>

<pre><code>driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-02.i.12582.com, 2013-08-08 14:16:07
m:res  cs         ro                 ds                 p  mounted  fstype
0:r0   Connected  Secondary/Primary  UpToDate/UpToDate  C
</code></pre>

<p>格式化（drbd-01）</p>

<pre><code>mkfs.ext4 /dev/drbd0
</code></pre>

<p>挂载到文件系统：</p>

<pre><code>mkdir /datamount /dev/drbd0 /data
</code></pre>

<h2>测试DRBD</h2>

<h3>测试同步</h3>

<ol>
<li><p>在主节点（Primary Node）复制一些数据到/data</p>

<pre><code> cp -r drbd-8.4.3 /data/
</code></pre></li>
<li><p>在次节点（Secondary Node）执行以下步骤：</p>

<pre><code> drbdadm down r0
</code></pre>

<p>注：次节点在DRBD启动状态下是无法mount /data的，所以必须先手动停止才能mount。</p>

<pre><code>  mkdir /datamount -t ext4 /dev/sdb1 /datals -l
</code></pre>

<p>就可以看到数据已经全部同步过来。</p></li>
</ol>


<h2>Heartbeat配置</h2>

<ol>
<li><p>主节点操作：</p>

<pre><code> vim /etc/ha.d/ha.cf
 debugfile /var/log/ha-debug   # 打开错误日志报告

 keepalive 2    # 2秒检测一次心跳线连接
 deadtime 10    # 10秒测试不到 主节点心跳线就认为有问题
 warntime 6    # 警告时间（建议在2－10之间）
 initdead 120   # 初始化启动时 120秒无连接视为正常，或指定heartbeat 在启动时，
 # 需要等待120秒才去启动任何资源

 udpport 694     # 用udp的694端口连接，netstat -antulp | grep 694
 ucast eth0 192.168.30.235      # 单播方式连接（主、从都是写对方的IP连接）
 node  drbd-01.i.12582.com  # 声明主节点（uname -n）
 node  drbd-02.i.12582.com  # 声明次节点（uname -n）
 auto_failback on                    # 自动切换（主节点恢复后会自动切换回来）
 respawn hacluster /usr/lib64/heartbeat/ipfail  #监控ipfail进程是否挂掉，否则重启它
</code></pre></li>
<li><p>编辑认证文件</p>

<pre><code> vim /etc/ha.d/authkeys
 auth 1
 1 sha1 MySecret&amp;nbsp;
</code></pre></li>
<li><p>权限</p>

<pre><code> chmod 600 /etc/ha.d/authkeys
</code></pre></li>
<li><p>编辑资源文件</p>

<pre><code> vim /etc/ha.d/haresources
 drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0 drbddisk::r0 
 Filesystem::/dev/drbd0::/data::ext4
</code></pre>

<p> drbd-01.i.12582.com   主节点的主机名</p>

<p> IPaddr::192.168.30.229/24/eth0    设置虚拟IP</p>

<p> drbddisk::r0                  管理资源r0</p>

<p> Filesystem::/dev/drbd0::/data::ext4   执行umount和mount操作</p></li>
<li><p>次节点操作：</p>

<p> 将ha.cf中的192.168.30.235改成192.168.30.234</p></li>
</ol>


<h3>DRBD主从自动切换测试</h3>

<ol>
<li><p>首先在 drbd-01启动heartbeat：</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>接着在 drbd-02 启动heartbear:</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>在drbd-01输入：</p>

<pre><code> ip a

 1: lo: LOOPBACK,UP,LOWER_UP&amp;gt; mtu 16436 qdisc noqueue state UNKNOWN
     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
     inet 127.0.0.1/8 scope host lo
     inet6 ::1/128 scope host
         valid_lft forever preferred_lft forever
 2: eth0:  BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
     link/ether 08:00:27:98:a2:6c brd ff:ff:ff:ff:ff:ff
     inet 192.168.30.234/24 brd 192.168.30.255 scope global eth0
     inet &lt;b&gt;192.168.30.229&lt;/b&gt;/24 brd 192.168.30.255 scope global secondary eth0:0
     inet6 fe80::a00:27ff:fe98:a26c/64 scope link
         valid_lft forever preferred_lft forever
</code></pre>

<p>从结果可以看出，VIP已经出现。</p></li>
<li><p>停止drbd-01的heartbeat服务或将网线断掉，同时监控drbd-02的DRBD状态.</p></li>
<li><p>drbd-02操作：</p>

<pre><code> watch -n 1 /etc/init.d/drbd status
</code></pre>

<p>如果一切正常，可以看到状态在不断变化。</p></li>
<li><p>恢复drbd-01的heartbeat服务或将网线接上，同时监控drbd-02的DRBD状态，如果正常drbd-01又变为主节点（auto_failback on 决定）了。</p></li>
</ol>


<h2>Mysql+DRBD+Heartbeat配置</h2>

<h3>Mysql安装</h3>

<p><strong>安装Mysql依赖包</strong></p>

<pre><code>yum -y install gcc gcc-c++ ncurses-devel libtool zlib-devel bison
</code></pre>

<p><b>创建用户与组</b></p>

<pre><code>groupadd mysqluseradd -g mysql mysql
</code></pre>

<p><b>设置内核参数</b></p>

<pre><code>vi /etc/security/limits.conf
mysql              soft    nproc   2047
mysql              hard    nproc   16384
mysql              soft    nofile  1024
mysql              hard    nofile  65536
</code></pre>

<p><b>安装Mysql</b></p>

<p>由于源码安装Mysql5.6需要依赖cmake，必须先安装cmake：</p>

<pre><code>mkdir ~/software; cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/cmake-2.8.4.tar.gz
tar zxvf cmake-2.8.4.tar.gz
cd cmake-2.8.4
./configure
gmake &amp;&amp;  make install
</code></pre>

<p>开始安装Mysql</p>

<pre><code>cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/mysql-5.6.5-m8.tar.gz
tar zxvf mysql-5.6.5-m8.tar.gz
cd mysql-5.6.5-m8

cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
  -DDEFAULT_CHARSET=utf8 \
  -DDEFAULT_COLLATION=utf8_general_ci \
  -DENABLED_LOCAL_INFILE=ON \
  -DWITH_INNOBASE_STORAGE_ENGINE=1 \
  -DWITH_FEDERATED_STORAGE_ENGINE=1 \
  -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
  -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
  -DWITH_PARTITION_STORAGE_ENGINE=1 \
  -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \
  -DCOMPILATION_COMMENT='agenge for mysql' \
  -DWITH_READLINE=ON \
  -DMYSQL_UNIX_ADDR=/data/mysqldata/3306/mysql.sock \
  -DSYSCONFDIR=/data/mysqldata/3306
  make &amp;&amp; make install
</code></pre>

<h3>Mysql设置</h3>

<ul>
<li><p>设置权限</p>

<pre><code>  chown -R mysql:mysql /usr/local/mysql
</code></pre></li>
<li><p>设置环境变量</p>

<pre><code>  vi /etc/profileexport PATH=/usr/local/mysql/bin:$PATH
</code></pre></li>
<li><p>使环境变量马上生效</p>

<pre><code>  source /etc/profile
</code></pre></li>
<li><p>设置相关存储路径</p>

<pre><code>  cd /data
  mkdir -p mysqldata/3306/{data,binlog,tmp,innodb_ts,innodb_log}
  cd /data/mysqldata/mkdir script backup
  chown -R mysql:mysql /data/mysqldata/
</code></pre></li>
<li><p>创建my.cnf</p>

<pre><code>  vi /data/mysqldata/3306/my.cnf
  [client]
  port = 3306
  socket = /data/mysqldata/3306/mysql.sock

  # Here follows entries for some specific programs

  # The MySQL server
  [mysqld]
  port     = 3306
  user     = mysql
  socket   = /data/mysqldata/3306/mysql.sock
  pid-file = /tmp/mysql.pid
  basedir  = /usr/local/mysql
  datadir  = /data/mysqldata/3306/data
  tmpdir   = /data/mysqldata/3306/tmp
  open_files_limit    = 10240
  server-id = 333306
  lower_case_table_names = 1
  character-set-server = utf8
  skip-name-resolve
  max_connections = 1000
  max_connect_errors = 100000
  max_allowed_packet = 512M
  max_heap_table_size = 1024M
  max_length_for_sort_data = 4096
  back_log=100
  interactive_timeout = 28800
  wait_timeout = 28800

  default-storage-engine = InnoDB

  net_buffer_length = 8K
  sort_buffer_size = 2M
  join_buffer_size = 4M
  read_buffer_size = 2M
  read_rnd_buffer_size = 16M

  query_cache_size = 128M
  query_cache_limit = 2M
  query_cache_min_res_unit = 2k

  thread_cache_size = 300
  table_open_cache = 1024
  tmp_table_size = 256M

  #***********  Logs related settings ***********
  log-bin  = ../binlog/mysql-bin
  relay-log = ../binlog/mysql-relay-bin
  binlog_format=mixed
  binlog_cache_size=32m
  max_binlog_cache_size=512m
  max_binlog_size=512m
  long_query_time = 1
  log_output = FILE
  log-error =  ../mysql-error.log
  slow_query_log = 1
  slow_query_log_file = ../slow_statement.log
  #log_queries_not_using_indexes
  general_log = 0
  general_log_file = ../general_statement.log
  expire-logs-days = 14

  #*********** MyISAM Specific options ***********
  key_buffer_size = 32M
  bulk_insert_buffer_size = 64M
  myisam_sort_buffer_size = 128M
  myisam_max_sort_file_size = 10G
  myisam_repair_threads = 1
  myisam_recover

  #*********** INNODB Specific options ***********
  innodb_file_per_table = 1
  transaction-isolation = READ-COMMITTED

  innodb_additional_mem_pool_size = 16M
  innodb_buffer_pool_size = 1192M
  innodb_data_home_dir = ../innodb_ts
  innodb_data_file_path = ibdata1:2048M:autoextend

  innodb_file_io_threads = 4
  innodb_thread_concurrency = 8
  innodb_log_buffer_size = 128M
  innodb_log_file_size = 256M
  innodb_log_files_in_group = 3

  innodb_log_group_home_dir = ../innodb_log
  innodb_flush_log_at_trx_commit = 2
  innodb_max_dirty_pages_pct = 80
  innodb_lock_wait_timeout = 120
  innodb_flush_method=O_DIRECT
  performance_schema

  [mysqldump]
  quick
  max_allowed_packet = 512M

  [mysql]
  no-auto-rehash
  # Remove the next comment character if you are not familiar with SQL
  #safe-updates

  [myisamchk]
  key_buffer_size = 32M
  sort_buffer_size = 20M
  read_buffer_size = 2M
  write_buffer_size = 2M

  [mysqlhotcopy]
  interactive-timeout

  [mysqld_safe]
  open-files-limit = 8192
</code></pre></li>
<li><p>安装mysql database，并启动Myql：</p>

<pre><code>  /usr/local/mysql/scripts/mysql_install_db \
    --datadir=/data/mysqldata/3306/data \
    --defaults-file=/data/mysqldata/3306/my.cnf \
    --basedir=/usr/local/mysql --user=mysql
  mysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
  mysqladmin -uroot password 'new_password' -S /data/mysqldata/3306/mysql.sock

  mysql -uroot -p123456
  mysql&gt; select user,host from mysql.user;
  mysql&gt; delete from mysql.user where (user,host) not in (select 'root','localhost');
  mysql&gt; delete from mysql.proxies_priv where host='localhost.localdomain';
  mysql&gt; delete from mysql.db;
  mysql&gt; flush privileges;
  mysql&gt; quit
  mysqladmin -uroot -p123456 shutdownrm -f /data/mysqldata/3306/mysql-error.logmysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
</code></pre></li>
<li><p>启动Mysql脚本</p>

<pre><code>  cp support-files/mysql.server  /etc/init.d/mysqld
  chmod +x /etc/init.d/mysqld
</code></pre></li>
<li><p>修改ha.cf</p></li>
</ul>


<p> 由于现在是管理Mysql，故要将mysqld由heartbeat管理（2个节点都执行）</p>

<pre><code>    cat /etc/ha.d/haresources
    drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0:0  drbddisk::r0 
    Filesystem::/dev/drbd0::/data::ext4 mysqld
</code></pre>

<ul>
<li><p>测试</p>

<ol>
<li><p> 准备Mysql数据（节点1操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; create database mydb;
  Query OK, 1 row affected (0.02 sec)

  mysql&gt; use mydb;
  Database changed
  mysql&gt; create table t_1( id  int not null, name varchar(10));
  Query OK, 0 rows affected (0.14 sec)
  mysql&gt; insert into t_1 values(1,'aaa');
  Query OK, 1 row affected (0.00 sec)

  mysql&gt; commit;
  Query OK, 0 rows affected (0.00 sec)
  mysql&gt; quit;
  Bye
</code></pre></li>
<li><p> 切换主、次节点，同时监控drbd-02服务器的日志</p>

<pre><code>  watch -n 1 /etc/init.d/drbd status
</code></pre></li>
</ol>


<p>  如果一切正常，可以看到ro的状态从“Secondary/Primary”变成“Primary/Secondary”。</p>

<p>  例如偶切换成的状态如下：</p>

<pre><code>      drbd driver loaded OK; device status:
      version: 8.4.3 (api:1/proto:86-101)
      GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by root@&lt;b&gt;drbd-02.i.12582.com&lt;/b&gt;, 2013-08-08 16:46:23
      m:res  cs         ro                 ds                 p  mounted  fstype
      0:r0   Connected  &lt;b&gt;Primary/Secondary&lt;/b&gt;  UpToDate/UpToDate  C  /data    ext4
</code></pre>

<ol>
<li><p> 查询数据是否丢失（drbd-02操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; use mydb;
  Database changed
  mysql&gt; select * from t_1;
  +----+------+
  | id | name |
  +----+------+
  |  1 | aaa  |
  +----+------+
  1 row in set (0.00 sec)
</code></pre></li>
</ol>


<p>  以看到在drbd-02上数据已经有了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[视频编解码术语概念介绍]]></title>
    <link href="http://agenge.github.io/blog/2013/07/28/video-decoder-intro/"/>
    <updated>2013-07-28T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/07/28/video-decoder-intro</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近有幸接触到流媒体领域，这可是偶之前一直灰常弱的一方面，可以说完全没有任何概念，经过Google的N次方搜索之后，头脑中总算有个概念，以下文章均来自互联网，偶就不一一帖出原链接，如果有语句或解释，很可能是偶借鉴您的文章，希望不要介意。当然，有些是偶自己写的，您就凑合着看，对于新手来讲，我相信收获肯定不少。</p>

<h3>阅读对象</h3>

<ol>
<li>流媒体新手或渴望了解流媒体</li>
<li>这篇文章合适有耐心的人，如果您觉得没那么多时间看这些”费话“，请直接关闭当前标签页
会更好。</li>
<li>永远追求上进的学习爱好者。</li>
<li><strong>不适合</strong>流媒体的牛逼人物。</li>
</ol>


<hr />

<h2>视频扫盲</h2>

<h3>什么是编解码？什么是codec？</h3>

<p>所谓编解码，就是codec。 <strong>CODEC</strong>= <strong>CO</strong>de（编码）+<strong>DEC</strong>ode（解码）.假设显示器的设置是：每秒刷新60次，也就是刷新率为60Hz，1024 * 768的分辨率，那么此时显卡每秒要处理的数据量是 60 * 1024 * 768 个像素点，可想而知，视频文件的大小是很恐怖的。如果不用任何方法压缩，就单纯的存储视频文件，那么1GB的文件，也只能存储37秒左右的视频内容。所以，咱们需要一个方式来压缩（code,编码）它，再存储起来，要播放的时候，再解压缩（decode,解码）。这样牺牲一些时间，来换取很大一部分空间，这是值得的，并且咱们的硬件设备也有这个能力做到。</p>

<h3>屏幕比例与分辨率的联系</h3>

<p>4:3、16:9、16:10，还有5:4，1920x1024、1280x720、1024x768、640x480等，已经被这些比例和分辨率搞得头昏脑涨？目前市场上针对比例和分辨率还比较混乱，下面的扫盲<strong>仅限于</strong>常见的几种。其实我们最常见的屏幕比例无非上面提到的4:3、16:9、16:10这三种，而5:4只是一个特殊比例，每种比例都算是一个家庭，其中4:3是最最常见的，也是历史最久的比例，它所对应的最高分辨率为：640x480，更小的分辨率此处不再一一列出。16:9 主要用于HD电视领域，也就是我们经常听到的720p、1080p，两个比例对应的分辨率：</p>

<ul>
<li>720p   1280x720</li>
<li>1080p 1920x1080</li>
</ul>


<!-- more -->


<h3>延升阅读</h3>

<p>16:9是指显示器长宽比例，根据<strong>人体工程学</strong>的研究，发现人的两只眼睛的视野范围是一个长宽比例为16：9的长方形，所以电视、显示器行业根据这个的黄金比例尺寸设计产品。</p>

<h4>Container（容器），Stream（流），Frame（帧），Codec（编解码器），mux/demux(复用/解复用)。</h4>

<ul>
<li><strong>Container</strong>：           一个container就是一个文件，一种container就是一种文件格式，举例：xxx.flv 和 yyy.mkv是两个文件，我们可以说他们是两个容器，并且是两种不同的容器。</li>
<li><strong>Stream</strong>：    一个容器中包括音频流(audio stream)、视频流(video stream)、字幕流(subtitlestream )等。

<ul>
<li>例1：xxx.flv文件，假设里面包含两种stream，一种是音频流(audio stream)，另一种是视频流(video stream)，并且以flv规定的格式把这两个流封装在.flv容器里面。</li>
<li>例2：yyy.mkv文件，假设里面包含三种stream，一种是音频流(audio stream)，另一种是视频流(video stream)，还有一种流是字幕流(subtitle stream)，并且以mkv规定的格式把这三种流封装在.mkv的容器里面。</li>
</ul>
</li>
</ul>


<p> 上面讲了容器和流的关系，那把不同的流按照某种容器的规则从那种容器（文件）中解析（或者说抽出来）出来，这种行为叫做解复用（demux），使用解复用器（demuxer），那反过来，把不同的流按照某种容器的规则放入那种容器（最后肯定生成了某种格式的文件），这种行为叫做<strong>复用</strong>（mux），使用复用器（muxer）。</p>

<ul>
<li><strong>Frame</strong>：     包含在Stream里面，当从容器中得到一个流以后，或者说不管你怎么弄的，反正你得到了一个流，那这个流就认为是被某种编码器 编码过后生成的，你需要把这个流里面的帧去解码。</li>
</ul>


<p><strong>那什么又是影片捏？</strong></p>

<p>影片其实就是一组（很多张）图片，时间间隔很小的连续展示出来，人们就觉得画面中的人物在动，这就是影片。那电影的实质就是N多张图片的集合。那每张图片和帧又有什么关系呢？事实上，如果一部影片里面的图片，我们原封不动的全部存起来，空间会很大很大很大，但是如果通过一定的算法（这里不讲相关算法），把每一张图片压缩（编码_encode）一下，变成帧(Frame)。再把帧连起来变成流，再把不同的流放到某个容器里面，这就是我们平常看见的电影文件了，比如这个文件 《碟中谍4.H264.ACC.mkv》，他为什么要这样命名呢？mkv表达了它的容器是.mkv的，且包含至少两个流，h264的视频流，ACC的音频流。这是一种典型的牺牲时间来换取空间的做法。当得到一个流之后，就得设法找出里面的帧，然后使用解码器/decoder 把帧还原，然后再去播放，也可以再去使用另一个编码器/encoder编码压缩成另一种格式的帧（这就是所谓的转格式软件要完成的一个步骤）。</p>

<hr />

<h2>视频编码简介</h2>

<h3>MPEG视频编码</h3>

<h4>MPEG-2简介</h4>

<ol>
<li><p>MPEG-2编码的DVD
MPEG-2制定于1994年，设计目标是高级工业标准的图象质量以及更高的传输率。MPEG-2所能提供的传输率在3-10Mbits/sec间，其在 NTSC制式下的分辨率可达720X486，MPEG-2也可提供并能够提供广播级的视像和CD级的音质。MPEG-2的音频编码可提供左右中及两个环绕 声道,以及一个加重低音声道，和多达7个伴音声道(这就是DVD可有8种语言配音的原因)。由于MPEG-2的出色性能表现，已能适用于高清视频，使得原打算为高清视频设计的MPEG-3，还没出世就被抛弃了。MPEG-3要求传输速率在20Mbits/sev-40Mbits/sec间，但这将使画面有轻度扭曲。</p></li>
<li><p>MPEG-2 TS编码的高清视频
MPEG-2高清视频采用的编码是MPEG-2 TS格式，其英文全称是(MPEG-2 Transport Stream)，这是一种视频流格式，主要用于实时传送节目，目前已经成为数字电视领域中普遍应用的系统层编码标准。</p></li>
</ol>


<p> MPEG-2 TS格式的高清视频文件一般采用mpg、tp、ts为后缀。采用MPEG-2 TS格式压缩后的高清视频文件通常都相当大，以一部90分钟的电影为例，文件大小通常都在8GB以上，有的甚至超过15GB。在播放以tp和ts为后缀的高清视频文件时也比较麻烦，因为文件中分别包含有AC’3音频信息和MPEG-2视频信息，需要使用专门的软件来进行播放。</p>

<h4>MPEG-4简介</h4>

<p>MPEG-4制定于1998年，MPEG-4是为了播放流式媒体的高质量视频而专门设计的，它可利用很窄的带度，通过帧重建技术，压缩和传输数据，以求使用最少的数据获得最佳的图像质量。这种编码方式多用于HDTV-Rip上，它把原有的高清视频文件按照比例缩小到一定的尺寸，以减少文件的大小，同时画面效果不差于DVD效果，以此来寻求一个画面效果和文件尺寸的平衡。相对于高清视频来说，MPEG-4格式 还显得有点不够用，因此它也不是主流的高清视频信号来源。这种视频格式的文件扩展名包括.asf、.mov和DivX 、AVI等。</p>

<h3>H.264视频编码</h3>

<p>H.264是一种高性能的视频编解码技术。目前国际上制定视频编解码技术的组织有两个: 一个是“国际电联（ITU-T）”，它制定的标准有H.261、H.263、H.263+等，另一个是“国际标准化组织（ISO）”它制定的标准有MPEG-1、MPEG-2、MPEG-4等。而H.264则是由两个组织联合组建的联合视频组（JVT）共同制定的新数字视频编码标准，所以它既是ITU-T的H.264，又是ISO/IEC的MPEG-4高级视频编码（Advanced Video Coding，AVC），而且它将成为MPEG-4标准的第10部分。因此，不论是MPEG-4 AVC、MPEG-4 Part 10，还是ISO/IEC 14496-10，都是指H.264。</p>

<p>H.264最具价值的部分是更高的数据压缩比，在同等的图像质量，H.264的数据压缩比能比DVD系统中使用的 MPEG-2高2～3倍，比MPEG-4高1.5～2倍。举个例子，原始文件的大小如果为100GB，采用MPEG-2压缩标准压缩后变成4GB，压缩比25∶1，而采用H.264压缩标准压缩后变为1GB，从100GB到1GB，H.264的压缩比达到惊人的100∶1。尤其值得一提的是，H.264在具有高压缩比的同时还拥有高质量流畅的图像。正因为如此，经过H.264压缩的视频数据，在网络传输过程中所需要的带宽更少，也更加经济。
在MPEG-2需要6Mbps的传输速率匹配时，H.264只需要1Mbps～2Mbps的传输速率。
H.264格式的文件一般采用mkv后缀，mkv是一种新兴的多媒体封装格式，可以将各类视频编
码、16条或以上不同格式的音频和语言不同的字幕封装在一个文件内，它具有开放源代码、音视
频编码丰富等优势，已经得到众多视频压制组和玩家的支持，正逐渐成为高清视频的主流格式。</p>

<h3>WMV-HD/VC-1视频编码</h3>

<p>WMV-HD是由软件业的巨头微软公司所创立的一种视频压缩格式。其压缩率远高于MPEG-2标准，同样是2小时的HDTV节目，如果使用MPEG-2最多只能压缩至30GB，而使用WMV-HD这样的高压缩率编码器，在画质丝毫不降的前提下都可压缩到15GB以下。虽然WMV-HD是微软的独有标准，在开放性和兼容性上没有其他几种格式好，但由于目前大家都在使用微软的操作系统，因此推出之后仍然迅速普及。</p>

<p>除了WMV-HD以外，微软WMV第九版(WMV9)编码技术叫做VC-1，2003年正式提出，于2006年正式成为国际标准，是微软开发的视频压缩技术系列中的最新版本。VC-1结合几种编码格式的优点于一身，在压缩比率上介于H.264与MPEG-2之间，画质表现方面与H.264接近，且在编码算法的复杂度上只为H.264的一半，处于一个中间的平衡点位置，对硬件要求较低、高压缩率、高画质、低耗时等特点使得VC-1成为一种比较理想的编码方式，发展前景较为可观。</p>

<p>WMV-HD及VC-1编码的视频文件一般采用wmv为后缀，wmv文件通常包括了WMV格式编码的视频和WMA编码的音频。</p>

<h3>RMVB视频编码</h3>

<p>当前在网络上见的最多的，肯定是RMVB视频，RMVB之所以这么流行，主要是RMVB在图像质量与文件大小之间取得了最好的平衡。一部720P的电影如果采用H.264编码，一般会有4G的大小，但如果改成RMVB格式，1G大小就可以了。目前国内的家庭宽带一般只有2M～4M，假如4M带宽，下载1G文件大概需要1个小时，下载4G文件最少在4个小时以上，因此很多人都会选择下载RMVB
文件。虽然RMVB文件的清晰度比不上H.264，但是基本上可以满足大部分人的要求了。RMVB之所以可以图像质量与文件大小之间取得最好的平衡，主要是使用了可变比特率的编码。RMVB中的VB指VBR，Variable Bit Rate(可改变之比特率)，RMVB打破了原先RM格式那种平均压缩采样的方式，在保证平均压缩比的基础上，采用浮动比特率编码的方式，将较高的比特率用于复杂的动态画面（如歌舞、飞车、战争等），而在静态画面中则灵活地转为较低的采样率，从而合理地利用了比特率资源，使RMVB最大限度地压缩了影片的大小，最终拥有了近乎完美的接近于H.264品质的视听效果。</p>

<p>虽然RMVB表现出色，可以达到720P以上的分别率，但在大屏幕的电视上观看，会有比较明显的
色块，始终算不上是高清视频。但它最大的优点是文件体积较小，在国内的互联网带宽没有大幅度提升之前，估计还会流行很长的一度时间。</p>

<h3>视频编码总结</h3>

<p>总的来说，MPEG2由于压缩比例较小，视频所占空间太大，目前已经基本处于了被淘汰的边缘。目前比较流行的高清编码是H.264与微软的VC-1。但就压缩的比率来看 H.264 > VC-1 > MPEG-2；对于低分辨率的视频文件，MPEG-2的画质表现还是不错的，但基于720P以上则明显略低于H.264和VC-1的效果；而VC-1与H.264相比，由于无明显编码优势，而且限于Windows平台使用、标准推出较晚，因此给微软VC-1编码的应用前景带来了较大的不确定性，能否跟H.264一较高下，尚需实践检验。另外不得不提的是RMVB视频，由于目前国内家庭宽带的速度不高，很多人都不愿意下载大容量H.264的视频，从而给了RMVB很大的发展空间，目前国内互联网上的视频仍然是RMVB占的比例最高。</p>

<hr />

<h2>H.264和MPEG-4区别</h2>

<p>H.264是一种高性能的视频编解码技术。目前国际上制定视频编解码技术的组织有两个，一个是“<strong>国际电联（ITU-T）</strong>”，它制定的标准有H.261、H.263、H.263+等，另一个是“<strong>国际标准化组织（ISO）</strong>”，它制定的标准有MPEG-1、MPEG-2、MPEG-4等。而H.264则是由两个组织联合组建的联合视频组（JVT）共同制定的新数字视频编码标准，所以它既是ITU-T的H.264，又是ISO/IEC的MPEG-4高级视频编码（Advanced Video Coding，AVC），而且它将成为MPEG-4标准的第10部分。因此，不论是MPEG-4 AVC、MPEG-4 Part 10，还是ISO/IEC 14496-10，都是指H.264。</p>

<hr />

<h2>H.264与X264区别</h2>

<h3>X264简介</h3>

<p>X264是基于H.264标准的免费开源视频编码器，开头的字母“X”表示“software”的意思，压缩能力强大，画质效果优秀，早已获得广泛应用。特征是编码速度相当快，但解码很慢且相当耗费CPU处理能力，X264不支援硬件加速,是和RMVB一样的强解码类型(同一机型GeForce7300和GeForce9600播放H264时CPU会有巨大的差异但播放RMVB和X264二者无异),X264不支持de-block(区域马赛克弱化换算) 技术。</p>

<p>简单来讲就是：</p>

<ul>
<li>h264是一种视频编码方式，x264是基于h264的开源编码解码器。</li>
<li>h.264是一种视频编码标准，x264是一种采用这种标准的具体实现。</li>
</ul>


<p>x264是一个采用GPL授权的视频编码自由软件。x264的主要功能在于进行H.264/MPEG-4 AVC的.</p>

<p><strong>视频编码</strong>，而不是作为解码器（decoder）之用。</p>

<hr />

<h2>H264与AVC1区别</h2>

<ol>
<li>AVC1属于H.264的一种，是苹果开发的符合H.264/AVC的编码。</li>
<li>AVC1 描述: H.264 bitstream without start codes.一般通过ffmpeg转码生成的视频，是不带起始码0×00000001的。</li>
<li>H264 描述: H.264 bitstream with start codes.一般对于一下HDVD等电影的压制格式，是带有起始码0×00000001的。</li>
</ol>


<p> 即：H264=AVC， H264 != AVC1</p>

<hr />

<h2>DivX、XviD、AVC、AAC与MPEG-4联系</h2>

<p>MPEG-4是一种标准，共分成21个部分，其中这21个部分就包括了DivX、XviD、AVC、AAC等，
可参考：<a href="http://zh.wikipedia.org/zh-cn/MPEG-4">http://zh.wikipedia.org/zh-cn/MPEG-4</a></p>

<p>例如：</p>

<p><strong>第二部分 ISO/IEC 14496-2: </strong></p>

<ul>
<li>视频：定义了一个对各种视觉信息（包括自然视频、静止纹理、计算机合成图形等等）的编解码器。（例如<strong>XviD</strong>编码就属于MPEG-4 Part 2）。</li>
</ul>


<p><strong>第三部分 ISO/IEC 14496-3: </strong></p>

<ul>
<li>音频：定义了一个对各种音频信号进行编码的编解码器的集合。包括高级音频编码（Advanced Audio Coding，缩写为<strong>AAC</strong>）的若干变形和其他一些音频/语音编码工具。</li>
</ul>


<p><strong>第十部分 ISO/IEC 14496-10: </strong></p>

<ul>
<li>高级视频编码或称高级视频编码（Advanced Video Coding，缩写为<strong>AVC</strong>）：定义了一个视频编解码器（codec）。AVC和XviD都属于MPEG-4编码，但由于AVC
属于MPEG-4 Part 10，在技术特性上比属于MPEG-4 Part2的XviD要先进。另外，它和ITU-T H.264标准是一致的，故又称为H.264。</li>
</ul>


<p><strong>第十五部分 ISO/IEC 14496-15: </strong></p>

<ul>
<li>AVC 文件格式：定义了基于第十二部分的用于存储第十部分的视频内容的文件格式。</li>
</ul>


<h3>什么是DivX、XviD？</h3>

<ol>
<li><p><strong>DivX</strong>，是DivX公司（前身是DivX Networks公司）的著名品牌，是一种MPEG-4技术视频编解码器（codec），2007年秋以2200万美元收购德国Main Concept。2010年10月，DivX公司被Sonic Solutions收购。并于2011年2月，因Sonic Solutions被Rovi公司收购而成为旗下企业。</p></li>
<li><p><strong>Xvid</strong>（旧称为<strong>XviD</strong>）是一个开放源代码的MPEG-4视频编解码器，它是基于OpenDivX而编写的。Xvid是由一群原OpenDivX义务开发者在OpenDivX于2001年7月停止开发后自行开发的。Xvid是在<strong>GNU GPL v2</strong>下发布的，但因为某些国家如美国，日本有软件专利法，使得其在该地区可能出现法律纠纷。因此，Xvid官方网站只提供源代码下载，至于安装文件可能需要大家去搜索。</p></li>
</ol>


<p>  Xvid的主要竞争对手是DivX。但Xvid是开放源代码的，而DivX则只有<strong>免费</strong>（不是<strong>自由</strong>）的版本和商用版本。所以，具体用哪个，相信您肯定能一眼看出。</p>

<hr />

<h2>PAL、NTSC、SECAM区别</h2>

<ol>
<li>PAL<strong>逐行倒相</strong>，Phase Alternating Line的缩写，PAL制式是电视广播中色彩调频的一种方法，主要应用于中国、香港、中东地区和欧洲等地区；</li>
<li>NTSC<strong>美国全国电视标准委员会</strong>，是指National Television System Committee的缩写，主要应用于美国、日本、加拿大、墨西哥、韩国、菲律宾等地区；</li>
</ol>


<p> 另外，NTSC属于同时制，<strong>隔行扫描</strong>，画面比例为4：3.
3. SECAM （顺序传送与存储彩色电视系统，法国采用的一种电视制式，（SEquential CouleurAvec Memoire）PAL和NTSC都属于便于两大主要的电视广播制式，但是由于系统投射颜色影响的频率有所不同。两种制式相互之前不兼容。</p>

<p>PAL和NTSC的分辨率不所不同，PAL制式使用720x576，约40万像素，故PAL制式的数码摄像机的CCD大小为40万的倍数或半倍数；NTSC使用的是760x480，约37万像素，故NTSC制式的数据摄像机的CCD一般为34万的倍数或半倍数。</p>

<ul>
<li><strong>NTSC 制式优缺点</strong></li>
</ul>


<p> 属于同时制，帧频为<strong>每秒29.97</strong>，扫描线为525，隔行扫描，画面比例为4：3，分辨率为640x480，这种制式的色度信号调制包括了<strong>平衡调制</strong>和<strong>正交调制</strong>两种，解决了彩色与黑白电视广播兼容性问题，但存在相位容易失真、色彩不太稳定的缺点。</p>

<ul>
<li><strong>PAL制式优缺点</strong></li>
</ul>


<p> 帧频为每秒25.
  * 对相位失真不敏感，因此，对传输设备和接收机设备的技术指标要求，PAL制式比NTSC制式要低。
  * 比NTSC制抗多径接收性能好。
  * PAL制相对NTSC制而言，色度信号的正交失真不敏感，并且对色度信号部分抑制边带而引起的失真也不敏感。
  * PAL接收机中采用梳状滤波器，可使亮度串色的幅度下降3dB，并且可以提高彩色信噪比。</p>

<ul>
<li><strong>PAL制有下列缺点：</strong></li>
<li>由于PAL制色信号逐行倒相，传输及解码中产生的误差(例如微分相位等)，将在图象上产生爬行及半帧频闪烁现象。</li>
<li>PAL信号不利于信号处理(包括数字信号处理，亮度信号的彻底分离等)，这是因为它的色度信号逐行倒相，色副载波相位8场一循环引起的。</li>
<li>与NTSC制一样，彩色接收机图象的水平清晰度比黑白电视机的低。</li>
<li>垂直彩色清晰度PAL制比NTSC制低。</li>
<li>由于要有高精度和高稳定度的延时线及附属电路，PAL制接收机比NTSC制接收机复杂，成本稍高，对于录像机也是如此。</li>
</ul>


<h3>各制式分布图</h3>

<p><a href="http://agenge.com/wp-content/uploads/2013/07/pte.png"><img class="alignnone size-full wp-image-727" alt="pte" src="http://agenge.com/wp-content/uploads/2013/07/pte.png" width="685" height="344" /></a></p>

<hr />

<h2>视频编码工具</h2>

<h3>FFmpeg</h3>

<ul>
<li>官方网站：<a href="www.ffmpeg.org">http://www.ffmpeg.org</a></li>
</ul>


<p> FFmpeg是一个自由软件，可以运行音频和视频多种格式的录影、转档、流功能[1]，包含了libavcodec ─这是一个用于多个专案中音频和视频的解码器库，以及 libavformat ——一个音频与视频格式转换库。</p>

<p> 另外，&#8221;FFmpeg&#8221;这个单词中的 &ldquo;FF&rdquo; 指的是 &ldquo;<strong>Fast Forward</strong>&#8220;，相信很多同学是不知道滴。</p>

<h3>Libav</h3>

<ul>
<li>官方网站：<a href="http://libav.org">http://libav.org/</a></li>
</ul>


<p> 基于FFmpeg开发的一个开源分支，后来又从FFmpeg中独立出来。它是一个完整的、跨平台的用于音频和视频录制、转换的解决方案，包含 libavcodec 编码器。</p>

<hr />

<p>每个领导发言之后，总得来个总结，偶也装下逼，不过此处省略3000字，看最后几句话：</p>

<h1>如果以上有涉嫌抄袭您的文章，请第一时间通知，偶定会明确标识.</h1>

<p>以上所有扫盲知识，偶只是汇总下而已。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作OpenStack Windows Server 2008 镜像]]></title>
    <link href="http://agenge.github.io/blog/2013/07/24/make_openstack-windows2008-image/"/>
    <updated>2013-07-24T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/07/24/make_openstack-windows2008-image</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>对于OpenStack中，制作一个Windows 的镜像让很多新手极为烦恼，偶有幸成功制作，
不敢私藏，故与大家分享小小心得。上次与大家介绍过 <a href="http://agenge.com/cloud-computing/make_openstack-centos-image.html">制作OpenStack CentOS 6.3 镜像</a></p>

<p>本次主要是记录如何制作一个Windows Server 2008的镜像，请看操作：</p>

<ol>
<li>下载Virtio总线驱动</li>
</ol>


<p> 由于OpenStack只支持Virtio总线的磁盘，所以我们需要在安装之前下载virtio驱动：</p>

<pre><code>    wget http://alt.fedoraproject.org/pub/alt/virtio-win/latest/images/virtio-win-0.1-59.iso
</code></pre>

<ol>
<li>准备一个Windows Server 2008的ISO文件。</li>
</ol>


<p> 除了Virtio总线驱动，您还需要准备一个Windows Server 2008的ISO，为安装操作系统做准备。
3. 创建虚拟磁盘文件：</p>

<pre><code>    qemu-img create -f qcow2 winserver2008.img 20G
</code></pre>

<p> 对于虚拟磁盘文件的各种磁盘格式区别与对比，可以参考 <a href="http://blog.prajnagarden.com/?p=248">qcow2、raw、vmdk等镜像格式</a></p>

<ol>
<li><p>创建虚拟机，使用kvm或virt-install均可，本次安装使用的virt-install</p>

<pre><code> virt-install --connect qemu:///system -n winserver2008 --vcpus=1 -r 2048 \
   --disk path=/path/to/winserver2008.img,size=60,format=qcow2,bus=virtio,cache=none \
   -c /path/iso/windows_server_2008.iso \
   --vnc --vncport=5909 --vnclisten=0.0.0.0  \
   --os-type windows --os-variant=win2k8 --accelerate \
   --network=bridge:br0,model=virtio  \
   --disk path=/path/to/win_driver/virtio-win-0.1-59.iso,device=cdrom,perms=ro&lt;br /&gt;
</code></pre></li>
</ol>


<p> 以上参数有点多，不过这里不一一解释，后期偶会专门写一篇介绍KVM相关知识点，这里只是描述几个重要的参数：</p>

<pre><code>- -n  虚拟机的名称
- --disk  虚拟磁盘存放的路径，即第一步qemu-img创建的虚拟磁盘。&lt;/span&gt;&lt;/li&gt;
- -c  ISO的路径 &lt;/span&gt;&lt;/li&gt;
- --vncport  VNC连接端口，后面会用到，这里是5909，且必须是未使用的端口。&lt;/span&gt;&lt;/li&gt;
- --network   这个地方偶使用的是一个叫 br0 的网桥，所以你的系统必须保证有br0这个网桥。&lt;/span&gt;&lt;/li&gt;
</code></pre>

<!-- more -->


<p></p>

<p> 使用VNC 客户端连接，例如192.168.30.211:9 
 <img src="http://agenge.github.io/images/2013/07/01.png"></p>

<p> 连接成功之后，和常规安装操作系统没有任何区别，但在分区时会提示找到磁盘文件，如图：</p>

<p> <img src="http://agenge.github.io/images/2013/07/02.png"></p>

<p> 点击“<b>加载驱动程序</b>”，并按下图选择对应的驱动：</p>

<p> <img src="http://agenge.github.io/images/2013/07/03.png"></p>

<p> 点击“确定”，如果WIN8驱动找不到磁盘，重新选择WIN7即可。然后再点击“下一步”：</p>

<p> <img src="http://agenge.github.io/images/2013/07/04.png"></p>

<p> 安装之后并关机，进入下一步操作。</p>

<ol>
<li>上传镜像</li>
</ol>


<p> 最后一步就是要将刚才的虚拟磁盘文件上传到云平台中心:</p>

<pre><code>    glance image-create --name Win-2008-x86_64-cloud --is-public true --container-format ovf --disk-format qcow2 &lt; /home/agen/winserver2008.img
</code></pre>

<p> 通过以上的步骤，希望新手能够成功制作一份完美的镜像文件，如果在制作过程中有任何疑问，请留言，最好是邮件，偶在有时间的情况下肯定会第一时间解答。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作OpenStack CentOS 6.3 镜像]]></title>
    <link href="http://agenge.github.io/blog/2013/07/20/make_openstack-centos-image/"/>
    <updated>2013-07-20T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/07/20/make_openstack-centos-image</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>距离上次写文章已经N天，即对不住各位，更对不住自己，今天将教大家如何制作
OpenStack CentOS 6.3 镜像，费话不多说，咱就开始干活吧。</p>

<ol>
<li><p>准备一个镜像文件，即ISO文件，本示例所使用的为：</p>

<pre><code> CentOS-6.3-i386-minimal.iso
</code></pre></li>
</ol>


<p> <em>注：无论您是内部测试环境还是生产环境，偶都强烈推荐使用64位操作系统。</em></p>

<ol>
<li><p>引导并安装系统</p>

<pre><code> virt-install -n CentOS63 -r 2048 --cpu host \
   -c /data/iso/CentOS-6.3-i386-minimal.iso \
   --disk path=/data/kvm_data/centos6.3-openstack.img,device=disk,bus=virtio,size=10,format=qcow2 \
   --vnc --vncport=5908 --vnclisten=0.0.0.0 -v \
   --network bridge=br0
</code></pre></li>
</ol>


<p> 这些参数的就请您先自行查找手册，后期有时间偶会补上关于KVM的相关实践手册。</p>

<ol>
<li>镜像相关设置（此处根据你的需求进行个性化定制，尽量保持简洁）：</li>
<li><p>分区全部给根分区，防火墙和SELinux禁止.</p>

<pre><code>     chkconfig iptables off
</code></pre></li>
</ol>


<p> 将/etc/selinux/config 中的 SELINUX=enforcing修改成 SELINUX=disabled
 * 修改分区表：</p>

<pre><code>        vi /etc/fstab
        # 将UUID=这一行注释，加入：
        LABEL=cec-rootfs                           / ext4 defaults&lt;b&gt; 0 0&lt;/b&gt;
</code></pre>

<ul>
<li><p>修改网络配置：</p>

<pre><code>     vi /etc/sysconfig/network-scripts/ifcfg-eth0
     #将HWADDR=这行删除或注释即可，并且设置成BOOTPROTO=dhcp
</code></pre></li>
<li><p>删除网络规则，因为Centos6之后70-persistent-net.rules这个文件会自动添加除eth0之外的其他网络接口，</p>

<pre><code>     rm -rf /etc/udev/rules.d/70-persistent-net.rules
</code></pre></li>
<li>还要把另外一个文件删除，不然上面这个文件还会自动创建滴：
         mv /lib/udev/write_net_rules{,.bak}</li>
<li><p>上传镜像</p>

<pre><code> glance image-create --name centos63Image --is-public true --container-format ovf --disk-format qcow2 &amp;lt; /home/agen/centos63.img
</code></pre></li>
</ul>


<p> 至此，所有操作已经完成，如果一切正常，你所创建的实例访问正常。如网络还存在问题，可能
和您的OpenStack网络设置有关，不过这已经超出本文的范畴。假如您对OpenStack的环境搭建不是很熟悉的话，建议您再多看看这篇文章：<a title="Openstack安装与部署(Folsom)" href="http://agenge.com/cloud-computing/openstack_install_with_deploy_for_folsom.html">Openstack安装与部署(Folsom)</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack安装与部署(Folsom)]]></title>
    <link href="http://agenge.github.io/blog/2013/06/12/openstack_install_with_deploy_for_folsom/"/>
    <updated>2013-06-12T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/06/12/openstack_install_with_deploy_for_folsom</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>近2、3年来，云计算是一个比较热门的话题，无论是国外还是国内，众多计算机厂商开始涉足云计算，未来IaaS、SaaS及PaaS都可能将IT行业又推上到一个新的台阶。云计算谈得最多的IaaS要数 OpenStack，本文主要记录偶试
验的安装步骤，当然，参考了N多网友的博文，具有代表性的可能就是 <a href="http://www.stacklab.org/">stacklab</a> 的安装教程，以下就是具体安装步骤：</p>

<h2>环境准备</h2>

<p> ### 资源列表</p>

<table width="582" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td nowrap="nowrap" width="117">
<p align="center">IP
</td>
<td nowrap="nowrap" width="88">
<p align="center">主机名
</td>
<td nowrap="nowrap" width="87">
<p align="center">OS
</td>
<td nowrap="nowrap" width="70">
<p align="center">CPU
</td>
<td nowrap="nowrap" width="52">
<p align="center">内存
</td>
<td nowrap="nowrap" width="168">
<p align="center">备注
</td>
</tr>
<tr>
<td nowrap="nowrap" width="117">
<p align="center">192.168.30.73
</td>
<td nowrap="nowrap" width="88">
<p align="center">control-01
</td>
<td nowrap="nowrap" width="87">
<p align="center">Ubuntu 12.10
</td>
<td nowrap="nowrap" width="70">
<p align="center">i5
</td>
<td nowrap="nowrap" width="52">
<p align="center">16G
</td>
<td nowrap="nowrap" width="168">
<p align="center">keystone、glance、cinder、nova-api、nova-scheduler
</td>
</tr>
<tr>
<td nowrap="nowrap" width="117">
<p align="center">192.168.30.74
</td>
<td nowrap="nowrap" width="88">
<p align="center">compute-01
</td>
<td nowrap="nowrap" width="87">
<p align="center">Ubuntu 12.10
</td>
<td nowrap="nowrap" width="70">
<p align="center">i5
</td>
<td nowrap="nowrap" width="52">
<p align="center">16G
</td>
<td rowspan="3" nowrap="nowrap" width="168">
<p align="center">nova-compute、nova-network、nova-api-metadata
</td>
</tr>
<tr>
<td nowrap="nowrap" width="117">
<p align="center">192.168.30.75
</td>
<td nowrap="nowrap" width="88">
<p align="center">compute-02
</td>
<td nowrap="nowrap" width="87">
<p align="center">Ubuntu 12.10
</td>
<td nowrap="nowrap" width="70">
<p align="center">i5
</td>
<td nowrap="nowrap" width="52">
<p align="center">16G
</td>
</tr>
<tr>
<td nowrap="nowrap" width="117"></td>
<td nowrap="nowrap" width="88"></td>
<td nowrap="nowrap" width="87"></td>
<td nowrap="nowrap" width="70"></td>
<td nowrap="nowrap" width="52"></td>
</tr>
</tbody>
</table>


<h3>网络配置</h3>

<ol>
<li><p>在配置之前需要注意，如果你的网卡名称有叫非ethX，例如p1p1，就得按以下步骤修改：</p>

<pre><code> cd /etc/udev/rules.d/
 cp 70-persistent-net.rules 70-persistent-net.rules.bak
 ip a
</code></pre>

<p>可看到p1p1的MAC地址，如<strong>d4:3d:7e:57:a4:d4</strong>，将文件70-persistent-net.rules的：
     ATTR{address}==&ldquo;ec:88:8f:ea:c4:eb&rdquo;
修改为：
     ATTR{address}==&ldquo;d4:3d:7e:57:a4:d4&rdquo;</p></li>
</ol>


<p> NAME=&ldquo;eth1&rdquo; 修改为:NAME=&ldquo;eth2&rdquo; 或 NAME=&ldquo;eth0&#8221;，只要不和已存在的冲突即可，例如此示例中，本身已经存在一块叫： eth1的网卡，那另外一块就改成eth2。修改之后需要重启服务器。
所有节点配置如下（需要修改每个节点对应的IP）：</p>

<pre><code>    cat /etc/network/interfaces
    # This file describes the network interfaces available on your system
    # and how to activate them. For more information, see interfaces(5).
    # The loopback network interface
    auto lo
    iface lo inet loopback

    # The primary network interface
    auto eth1
    iface eth1 inet static
    address 192.168.30.75
    netmask 255.255.255.0
    network 192.168.30.0
    broadcast 192.168.30.255
    gateway 192.168.30.1
    # dns-* options are implemented by the resolvconf package, if installed
    dns-nameservers 218.201.4.3

    auto eth2
    iface eth2 inet static
    address 10.10.0.75
    netmask 255.255.0.0
</code></pre>

<p> 上面2个IP地址需要根据您的具体情况修改。
2. 重启网络</p>

<pre><code>     /etc/init.d/networking restart
</code></pre>

<ol>
<li><p>IP转发</p>

<pre><code> sudo su -
 sed -i -r 's/^s*#(net.ipv4.ip_forward=1.*)/1/' /etc/sysctl.conf
 echo 1 &gt; /proc/sys/net/ipv4/ip_forward
 sysctl -p
 net.ipv4.ip_forward = 1
</code></pre></li>
<li>更新源</li>
</ol>


<p> 在所有节点的/etc/apt/source.list 加入以下信息：</p>

<pre><code>    deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-proposed/folsom main
    deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/folsom main
</code></pre>

<p> 然后执行：</p>

<pre><code>    gpg --keyserver keyserver.ubuntu.com --recv EC4926EA
    gpg --export --armor EC4926EA | sudo apt-key add -
    sudo apt-get update
</code></pre>

<p> 如果报错，请参考<a href="http://blog.csdn.net/wche1990/article/details/6759422">这里</a>.</p>

<!-- more -->


<h3>主机名设置</h3>

<p>在所有节点的/etc/hosts加入以下信息（需要修改每个节点对应的IP）：</p>

<pre><code>    192.168.30.73  control-01
    192.168.30.74  compute-01
    192.168.30.75  compute-02
</code></pre>

<h3>Mysql和rabbitmq安装</h3>

<p>在所有节点执行，密码统一设置为”123456”(你也可以设置为其他较安全的密码)：</p>

<pre><code>    sudo apt-get install -y mysql-server python-mysqldb
    sudo sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf
    sudo /etc/init.d/mysql restart
    sudo apt-get install -y rabbitmq-server
</code></pre>

<h3>时间同步</h3>

<p>在所有节点执行：</p>

<pre><code>    sudo apt-get install -y ntp
    sudo sed -i 's/server ntp.ubuntu.com/server ntp.ubuntu.comnserver 127.127.1.0nfudge 127.127.1.0 stratum 10/g' /etc/ntp.conf
    sudo /etc/init.d/ntp restart
</code></pre>

<hr />

<h2>控制节点安装</h2>

<h3>安装OpenStack组件</h3>

<ol>
<li><p>在控制节点执行：</p>

<pre><code> os_keystone="keystone python-keystone python-keystoneclient"
 os_glance="glance glance-api python-glanceclient glance-common"
 os_nova="nova-api nova-cert nova-common  nova-scheduler python-nova python-novaclient nova-consoleauth novnc   nova-novncproxy "
 os_horizon="apache2 libapache2-mod-wsgi openstack-dashboard memcached python-memcache"
 os_cinder="cinder-api cinder-scheduler cinder-volume iscsitarget  open-iscsi iscsitarget-dkms python-cinderclient"
 os_swift="python-swift swift swift-proxy swift-account swift-container swift-object python-memcache"
 sudo apt-get install -y $os_keystone $os_glance $os_nova $os_horizon $os_cinder $os_swift

 大概要下载241M的文件。
</code></pre></li>
</ol>


<h3>初始化数据库</h3>

<ol>
<li><p>在控制节点执行，创建keystone, nova,cinder,glance数据库：</p>

<pre><code> mysql -uroot –p
 mysql&gt; CREATE DATABASE keystone;
 mysql&gt; CREATE DATABASE nova;
 mysql&gt; CREATE DATABASE cinder;
 mysql&gt; CREATE DATABASE glance;
 mysql&gt; GRANT ALL ON keystone.* TO openstack@'%' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON nova.* TO openstack@'%' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON cinder.* TO openstack@'%' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON glance.* TO openstack@'%' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON keystone.* TO openstack@'192.168.30.73' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON nova.* TO openstack@'192.168.30.73' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON nova.* TO openstack@'192.168.30.74' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON nova.* TO openstack@'192.168.30.75' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON cinder.* TO openstack@'192.168.30.73' IDENTIFIED BY 'openstack';
 mysql&gt; GRANT ALL ON glance.* TO openstack@'192.168.30.73' IDENTIFIED BY 'openstack';
 mysql&gt; flush privileges;
</code></pre></li>
</ol>


<h3>Keystone配置</h3>

<ul>
<li><p>在控制节点修改/etc/keystone/keystone.conf配置文件，注释第57行：</p>

<pre><code>  connection = sqlite:////var/lib/keystone/keystone.db
</code></pre>

<p>加入：</p>

<pre><code>   connection = mysql://openstack:openstack@192.168.30.73/keystone
</code></pre>

<p>重启keystone后，初始化数据库：</p>

<pre><code>   sudo /etc/init.d/keystone restart
   sudo keystone-manage db_sync
</code></pre></li>
<li><p>创建tenant、user、role，脚本keystone_basic.sh内容如下：</p>

<pre><code>     #!/bin/sh
     #
     # Keystone basic configuration

     # Mainly inspired by https://github.com/openstack/keystone/blob/master/tools/sample_data.sh

     # Modified by Bilel Msekni / Institut Telecom
     #
     # Support: openstack@lists.launchpad.net
     # License: Apache Software License (ASL) 2.0
     #
     #节点的IP地址
     HOST_IP=192.168.30.73
     ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin_pass}
     SERVICE_PASSWORD=${SERVICE_PASSWORD:-service_pass}
     export SERVICE_TOKEN="ADMIN"
     export SERVICE_ENDPOINT="http://${HOST_IP}:35357/v2.0"
     SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}

     get_id () {
         echo `$@ | awk '/ id / { print $4 }'`
     }

     # Tenants
     ADMIN_TENANT=$(get_id keystone tenant-create --name=admin)
     SERVICE_TENANT=$(get_id keystone tenant-create --name=$SERVICE_TENANT_NAME)


     # Users
     ADMIN_USER=$(get_id keystone user-create --name=admin --pass="$ADMIN_PASSWORD" --email=admin@domain.com)


     # Roles
     ADMIN_ROLE=$(get_id keystone role-create --name=admin)
     KEYSTONEADMIN_ROLE=$(get_id keystone role-create --name=KeystoneAdmin)
     KEYSTONESERVICE_ROLE=$(get_id keystone role-create --name=KeystoneServiceAdmin)

     # Add Roles to Users in Tenants
     keystone user-role-add --user-id $ADMIN_USER --role-id $ADMIN_ROLE --tenant-id $ADMIN_TENANT
     keystone user-role-add --user-id $ADMIN_USER --role-id $KEYSTONEADMIN_ROLE --tenant-id $ADMIN_TENANT
     keystone user-role-add --user-id $ADMIN_USER --role-id $KEYSTONESERVICE_ROLE --tenant-id $ADMIN_TENANT

     # The Member role is used by Horizon and Swift
     MEMBER_ROLE=$(get_id keystone role-create --name=Member)

     # Configure service users/roles
     NOVA_USER=$(get_id keystone user-create --name=nova --pass="$SERVICE_PASSWORD" --tenant-id $SERVICE_TENANT --email=nova@domain.com)
     keystone user-role-add --tenant-id $SERVICE_TENANT --user-id $NOVA_USER --role-id $ADMIN_ROLE

     GLANCE_USER=$(get_id keystone user-create --name=glance --pass="$SERVICE_PASSWORD" --tenant-id $SERVICE_TENANT --email=glance@domain.com)
     keystone user-role-add --tenant-id $SERVICE_TENANT --user-id $GLANCE_USER --role-id $ADMIN_ROLE

     CINDER_USER=$(get_id keystone user-create --name=cinder --pass="$SERVICE_PASSWORD" --tenant-id $SERVICE_TENANT --email=cinder@domain.com)
     keystone user-role-add --tenant-id $SERVICE_TENANT --user-id $CINDER_USER --role-id $ADMIN_ROLE
</code></pre></li>
<li><p>创建endpoint，脚本keystone_endpoints_basic.sh内容如下:</p>

<pre><code>     #!/bin/sh
     #
     # Keystone basic Endpoints

     # Mainly inspired by https://github.com/openstack/keystone/blob/master/tools/sample_data.sh

     # Modified by Bilel Msekni / Institut Telecom
     #
     # Support: openstack@lists.launchpad.net
     # License: Apache Software License (ASL) 2.0
     #

     # Host address
     #节点的manage network的IP地址
     HOST_IP=192.168.30.73
     #节点的public network的IP地址
     EXT_HOST_IP=192.168.30.73

     # MySQL definitions
     MYSQL_USER=openstack
     MYSQL_DATABASE=keystone
     MYSQL_HOST=$HOST_IP
     MYSQL_PASSWORD=openstack

     # Keystone definitions
     KEYSTONE_REGION=RegionOne
     export SERVICE_TOKEN=ADMIN
     export SERVICE_ENDPOINT="http://${HOST_IP}:35357/v2.0"

     while getopts "u:D:p:m:K:R:E:T:vh" opt; do
     case $opt in
         u)
           MYSQL_USER=$OPTARG
           ;;
         D)
           MYSQL_DATABASE=$OPTARG
           ;;
         p)
           MYSQL_PASSWORD=$OPTARG
           ;;
         m)
           MYSQL_HOST=$OPTARG
           ;;
         K)
           MASTER=$OPTARG
           ;;
         R)
           KEYSTONE_REGION=$OPTARG
           ;;
         E)
           export SERVICE_ENDPOINT=$OPTARG
           ;;
         T)
           export SERVICE_TOKEN=$OPTARG
           ;;
         v)
           set -x
           ;;
         h)
           cat &lt;&lt;EOF
     Usage: $0 [-m mysql_hostname] [-u mysql_username] [-D mysql_database] [-p mysql_password]
     [-K keystone_master ] [ -R keystone_region ] [ -E keystone_endpoint_url ]
     [ -T keystone_token ]
     Add -v for verbose mode, -h to display this message.
     EOF
           exit 0
           ;;
         \?)
           echo "Unknown option -$OPTARG" &gt;&amp;2
           exit 1
           ;;
         :)
           echo "Option -$OPTARG requires an argument" &gt;&amp;2
           exit 1
           ;;
       esac
     done

     if [ -z "$KEYSTONE_REGION" ]; then
     echo "Keystone region not set. Please set with -R option or set KEYSTONE_REGION variable." &gt;&amp;2
       missing_args="true"
     fi

     if [ -z "$SERVICE_TOKEN" ]; then
     echo "Keystone service token not set. Please set with -T option or set SERVICE_TOKEN variable." &gt;&amp;2
       missing_args="true"
     fi

     if [ -z "$SERVICE_ENDPOINT" ]; then
     echo "Keystone service endpoint not set. Please set with -E option or set SERVICE_ENDPOINT variable." &gt;&amp;2
       missing_args="true"
     fi

     if [ -z "$MYSQL_PASSWORD" ]; then
     echo "MySQL password not set. Please set with -p option or set MYSQL_PASSWORD variable." &gt;&amp;2
       missing_args="true"
     fi

     if [ -n "$missing_args" ]; then
     exit 1
     fi
     keystone service-create --name nova --type compute --description 'OpenStack Compute Service'
     keystone service-create --name cinder --type volume --description 'OpenStack Volume Service'
     keystone service-create --name glance --type image --description 'OpenStack Image Service'
     keystone service-create --name keystone --type identity --description 'OpenStack Identity'
     keystone service-create --name ec2 --type ec2 --description 'OpenStack EC2 service'

     create_endpoint () {
       case $1 in
         compute)
         keystone endpoint-create --region $KEYSTONE_REGION --service-id $2 --publicurl 'http://'"$EXT_HOST_IP"':8774/v2/$(tenant_id)s' --adminurl 'http://'"$HOST_IP"':8774/v2/$(tenant_id)s' --internalurl 'http://'"$HOST_IP"':8774/v2/$(tenant_id)s'
         ;;
         volume)
         keystone endpoint-create --region $KEYSTONE_REGION --service-id $2 --publicurl 'http://'"$EXT_HOST_IP"':8776/v1/$(tenant_id)s' --adminurl 'http://'"$HOST_IP"':8776/v1/$(tenant_id)s' --internalurl 'http://'"$HOST_IP"':8776/v1/$(tenant_id)s'
         ;;
         image)
         keystone endpoint-create --region $KEYSTONE_REGION --service-id $2 --publicurl 'http://'"$EXT_HOST_IP"':9292/v2' --adminurl 'http://'"$HOST_IP"':9292/v2' --internalurl 'http://'"$HOST_IP"':9292/v2'
         ;;
         identity)
         keystone endpoint-create --region $KEYSTONE_REGION --service-id $2 --publicurl 'http://'"$EXT_HOST_IP"':5000/v2.0' --adminurl 'http://'"$HOST_IP"':35357/v2.0' --internalurl 'http://'"$HOST_IP"':5000/v2.0'
         ;;
         ec2)
         keystone endpoint-create --region $KEYSTONE_REGION --service-id $2 --publicurl 'http://'"$EXT_HOST_IP"':8773/services/Cloud' --adminurl 'http://'"$HOST_IP"':8773/services/Admin' --internalurl 'http://'"$HOST_IP"':8773/services/Cloud'
         ;;
       esac
     }

     for i in compute volume image object-store identity ec2; do
     id=`mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" -ss -e "SELECT id FROM service WHERE type='"$i"';"` || exit 1
       create_endpoint $i $id
     done
</code></pre></li>
<li><p>依次执行：</p>

<pre><code>  sudo chmod +x keystone_*.sh
  sudo ./keystone_basic.sh
  sudo ./keystone_endpoints_basic.sh
</code></pre></li>
<li><p>创建openrc文件（环境变量）</p>

<pre><code>  export OS_TENANT_NAME=admin
  export OS_USERNAME=admin
  export OS_PASSWORD=admin_password
  export OS_AUTH_URL=http://192.168.30.73:5000/v2.0/
  export EC2_URL=$(keystone catalog --service ec2 | awk '/ publicURL / { print $4 }')
  export CREDS=$(keystone ec2-credentials-create)
  export EC2_ACCESS_KEY=$(echo "$CREDS" | awk '/ access / { print $4 }')
  export EC2_SECRET_KEY=$(echo "$CREDS" | awk '/ secret / { print $4 }')
</code></pre></li>
<li><p>使环境变量生效：</p>

<pre><code>  source openrc
</code></pre></li>
<li><p>测试keystone</p>

<pre><code>  keystone user-list
</code></pre></li>
</ul>


<p>如果没问题，输出内容类似下图：</p>

<p><img src="http://agenge.github.io/images/2013/06/01.png" title="" ></p>

<hr />

<h3>Glance配置</h3>

<h4>更新配置文件</h4>

<ol>
<li><p>更新glance配置文件：</p>

<pre><code> sudo vi /etc/glance/glance-api-paste.in
</code></pre></li>
</ol>


<p> 将最后三行修改为：</p>

<pre><code>    [filter:authtoken]
    paste.filter_factory = keystone.middleware.auth_token:filter_factory
    auth_host = 192.168.30.73
    auth_port = 35357
    auth_protocol = http
    admin_tenant_name = service
    admin_user = glance
    admin_password = service_password
</code></pre>

<ol>
<li><p>更新glance配置文件：</p>

<pre><code> sudo vi /etc/glance/glance-registry-paste.ini
</code></pre></li>
</ol>


<p> 将最后三行修改为：</p>

<pre><code>    [filter:authtoken]
    paste.filter_factory = keystone.middleware.auth_token:filter_factory
    auth_host = 192.168.30.73
    auth_port = 35357
    auth_protocol = http
    admin_tenant_name = service
    admin_user = glance
    admin_password = service_password
</code></pre>

<ol>
<li><p>更新glance配置文件：</p>

<pre><code> sudo vim /etc/glance/glance-api.conf
</code></pre>

<p> 将49行注释，并加入：</p>

<pre><code> sql_connection = mysql://openstack:openstack@192.168.30.73/glance
</code></pre>

<p> 在[paste_deploy]（一般在最后几行）节点加入：</p>

<pre><code> flavor = keystone
</code></pre></li>
<li><p>更新glance配置文件：</p>

<pre><code> sudo vim /etc/glance/glance-registry.conf
</code></pre>

<p> 将28行注释，并加入：</p>

<pre><code> sql_connection = mysql://openstack:openstack@192.168.30.73/glance
 [paste_deploy]
 flavor = keystone
</code></pre></li>
<li><p>重启glance服务</p>

<pre><code> /etc/init.d/glance-api restart
 sudo /etc/init.d/glance-registry restart
</code></pre></li>
<li><p>同步数据库</p>

<pre><code> sudo glance-manage db_sync
</code></pre>

<p> 并再次重启glance服务：</p>

<pre><code> sudo /etc/init.d/glance-api restart
 sudo /etc/init.d/glance-registry restart
</code></pre></li>
</ol>


<h4>上传镜像文件</h4>

<pre><code>wget https://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-disk.img
source openrc
glance image-create --name myFirstVM --is-public true --container-format bare --disk-format qcow2 &amp;lt; cirros-0.3.0-x86_64-disk.img
</code></pre>

<p>如果一切正常，会输出类似以下内容：</p>

<p><img src="http://agenge.github.io/images/2013/06/02.png" title="" ></p>

<hr />

<h3>Cinder配置</h3>

<h4>配置iscsi</h4>

<ol>
<li><p>配置iscsitarget：</p>

<pre><code> sudo sed -i 's/false/true/g' /etc/default/iscsitarget
 sudo /etc/init.d/iscsitarget restart
 sudo /etc/init.d/open-iscsi restart
</code></pre></li>
<li><p>更新配置文件/etc/cinder/api-paste.ini（47行）：</p>

<pre><code> [filter:authtoken]
 paste.filter_factory = keystone.middleware.auth_token:filter_factory
 service_protocol = http
 service_host = 192.168.30.73
 service_port = 5000
 auth_host = 192.168.30.73
 auth_port = 35357
 auth_protocol = http
 admin_tenant_name = service
 admin_user = cinder
 admin_password = service_password
</code></pre></li>
<li><p>更新配置文件/etc/cinder/cinder.conf：</p>

<pre><code> [DEFAULT]
 rootwrap_config = /etc/cinder/rootwrap.conf
 sql_connection = mysql://openstack:openstack@192.168.30.73/cinder
 api_paste_confg = /etc/cinder/api-paste.ini
 iscsi_helper = tgtadm
 volume_name_template = volume-%s
 volume_group = cinder-volumes
 verbose = True
 auth_strategy = keystone
 state_path = /var/lib/cinder
 volumes_dir = /var/lib/cinder/volumes
</code></pre></li>
<li><p>同步数据库：</p>

<pre><code> sudo cinder-manage db sync
</code></pre></li>
</ol>


<h4>创建VG</h4>

<ol>
<li><p>没有独立的硬盘或分区按以下操作：</p>

<p> sudo mkdir -p /opt/data/cinder
 cd /opt/data/cinder
 sudo truncate -s 2G vgfile
 sudo losetup -f &mdash;show vgfile</p></li>
</ol>


<p> 如果正常，会输出以下内容：</p>

<pre><code>    /dev/loop0
</code></pre>

<p> 接下来开始创建vg：</p>

<pre><code>    sudo vgcreate cinder-volumes /dev/loop0
</code></pre>

<p> 如果正常，会输出以下内容：</p>

<pre><code>    No physical volume label read from /dev/loop0
    Writing physical volume data to disk "/dev/loop0"
    Physical volume "/dev/loop0" successfully created
    Volume group "cinder-volumes" successfully created
</code></pre>

<ol>
<li><p>有独立的硬盘或分区按以下操作(<strong>以/dev/sda7</strong><strong>为例，以下操作有数据丢失风险，请谨慎操作</strong>)：</p>

<pre><code> pvcreate /dev/sda7
 vgcreate cinder-volumes /dev/sda7
 lvcreate -L 1T -n instance-lv data-vg
 mkfs.ext4 /dev/data-vg/instance-lv
 echo "/dev/data-vg/instance-lv        /var/lib/nova/instances ext4    defaults        0 0" &gt;&gt; /etc/fstab
 mount -a
</code></pre></li>
</ol>


<p> 重启cinder所有相关服务：</p>

<pre><code>    sudo /etc/init.d/cinder-api restart
    sudo /etc/init.d/cinder-scheduler restart
    sudo /etc/init.d/cinder-volume restart
</code></pre>

<hr />

<h3>Nova配置</h3>

<ol>
<li><p>更新配置文件/etc/nova/api-paste.ini（最后几行）：</p>

<pre><code> [filter:authtoken]
 paste.filter_factory = keystone.middleware.auth_token:filter_factory
 auth_host = 192.168.30.73
 auth_port = 35357
 auth_protocol = http
 admin_tenant_name = service
 admin_user = nova
 admin_password = service_password
 signing_dir = /tmp/keystone-signing-nova
</code></pre></li>
<li><p>更新配置文件/etc/nova/nova.conf</p>

<pre><code> [DEFAULT]
 dhcpbridge_flagfile=/etc/nova/nova.conf
 dhcpbridge=/usr/bin/nova-dhcpbridge
 logdir=/var/log/nova
 state_path=/var/lib/nova
 lock_path=/var/lock/nova
 force_dhcp_release=True
 iscsi_helper=tgtadm
 libvirt_use_virtio_for_bridges=True
 connection_type=libvirt
 root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf
 verbose=True
 ec2_private_dns_show_ip=True
 api_paste_config=/etc/nova/api-paste.ini
 volumes_path=/var/lib/nova/volumes

 # AUTHENTICATION
 auth_strategy=keystone

 # SCHEDULER
 scheduler_driver=nova.scheduler.multi.MultiScheduler
 compute_scheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler

 # CINDER
 volume_api_class=nova.volume.cinder.API

 # DATABASE
 sql_connection=mysql://openstack:openstack@192.168.30.73/nova

 # COMPUTE
 # kvm or QUME
 libvirt_type=kvm  
 libvirt_use_virtio_for_bridges=True
 start_guests_on_host_boot=True
 resume_guests_state_on_host_boot=True
 api_paste_config=/etc/nova/api-paste.ini
 allow_admin_api=True
 use_deprecated_auth=False
 nova_url=http://192.168.30.73:8774/v1.1/
 root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf

 # APIS
 ec2_host=192.168.30.73
 ec2_url=http://192.168.30.73:8773/services/Cloud
 keystone_ec2_url=http://192.168.30.73:5000/v2.0/ec2tokens
 s3_host=192.168.30.73
 cc_host=192.168.30.73
 metadata_host=192.168.30.73
 enabled_apis=ec2,osapi_compute,metadata

 # RABBITMQ
 rabbit_host=192.168.30.73

 # GLANCE
 image_service=nova.image.glance.GlanceImageService
 glance_api_servers=192.168.30.73:9292

 # NETWORK
 network_manager=nova.network.manager.FlatDHCPManager
 force_dhcp_release=True
 dhcpbridge_flagfile=/etc/nova/nova.conf
 dhcpbridge=/usr/bin/nova-dhcpbridge
 firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver
 public_interface=eth0    
 flat_interface=eth1     
 flat_network_bridge=br100
 fixed_range=10.10.0.0/24   
 network_size=256
 flat_injected=False
 connection_type=libvirt
 multi_host=True

 # NOVNC CONSOLE
 novnc_enabled=True
 novncproxy_base_url=http://192.168.30.73:6080/vnc_auto.html
 vncserver_proxyclient_address=192.168.30.73
 vncserver_listen=192.168.30.73
</code></pre></li>
<li><p>修改配置文件/etc/sudoers，在最后一行追加：</p>

<pre><code> nova ALL=(ALL) NOPASSWD:ALL
</code></pre></li>
<li><p>同步数据库</p>

<pre><code> sudo nova-manage db sync
</code></pre></li>
<li><p>重启nova相关服务</p>

<pre><code> sudo /etc/init.d/nova-api restart
 sudo /etc/init.d/nova-cert restart
 sudo /etc/init.d/nova-consoleauth restart
 sudo /etc/init.d/nova-novncproxy restart
 sudo /etc/init.d/nova-scheduler restart
</code></pre></li>
<li><p>检查服务状态</p>

<pre><code> sudo nova-manage service list
</code></pre></li>
</ol>


<p> 如果正常，会输出类似以下信息：</p>

<p><img src="http://agenge.github.io/images/2013/06/03.png" title="" ></p>

<ol>
<li><p>创建fixed_ip（内网虚拟机IP）</p>

<pre><code> sudo nova-manage network create private --fixed_range_v4=10.10.0.0/24 --num_networks=1 --bridge=br100 --bridge_interface=eth2 --network_size=256 --multi_host=T
</code></pre></li>
<li><p>创建floating_ip（可以理解为floating_rang，并非一个具体的IP地址），它和公网一个段的IP:</p>

<pre><code> nova-manage floating create 192.168.30.1/24
</code></pre></li>
<li><p>设置安全策略</p>

<pre><code> nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0
 nova secgroup-add-rule default udp 1 65535 0.0.0.0/0
 nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
</code></pre></li>
</ol>


<hr />

<h2>计算节点安装</h2>

<h3>安装OpenStack组件</h3>

<pre><code>os_nova="nova-common python-nova python-novaclient nova-compute nova-network nova-api-metadata"
os_other="kvm libvirt-bin pm-utils bridge-utils"
sudo apt-get install -y $os_nova $os_other
</code></pre>

<p>大约71M左右。</p>

<h3>Nova配置</h3>

<ol>
<li><p>更新配置文件/etc/nova/nova.conf</p>

<pre><code> [DEFAULT]
 logdir=/var/log/nova
 state_path=/var/lib/nova
 lock_path=/run/lock/nova
 verbose=False
 api_paste_config=/etc/nova/api-paste.ini
 scheduler_driver=nova.scheduler.simple.SimpleScheduler
 s3_host=192.168.30.73
 ec2_host=192.168.30.73
 ec2_dmz_host=192.168.30.73
 rabbit_host=192.168.30.73
 cc_host=192.168.30.73
 metadata_host=10.0.0.7
 nova_url=http://192.168.30.73:8774/v1.1/
 sql_connection=mysql://openstack:openstack@192.168.30.73/nova
 ec2_url=http://192.168.30.73:8773/services/Cloud
 root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf

 # Auth
 use_deprecated_auth=false
 auth_strategy=keystone
 keystone_ec2_url=http://192.168.30.73:5000/v2.0/ec2tokens
 # Imaging service
 glance_api_servers=192.168.30.73:9292
 image_service=nova.image.glance.GlanceImageService

 # NOVNC CONSOLE
 novnc_enabled=True
 novncproxy_base_url=http://192.168.30.73:6080/vnc_auto.html
 vncserver_proxyclient_address=192.168.30.74
 vncserver_listen=192.168.30.74

 # Network settings
 network_manager=nova.network.manager.FlatDHCPManager
 dhcpbridge_flagfile=/etc/nova/nova.conf
 dhcpbridge=/usr/bin/nova-dhcpbridge
 firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver
 public_interface=eth0
 flat_interface=eth1
 flat_network_bridge=br100
 fixed_range=10.10.0.1/24
 floating_range=192.168.30.128/24
 network_size=250
 flat_network_dhcp_start=10.0.0.40
 flat_injected=false
 force_dhcp_release=true
 dhcp_lease_time=604800
 multi_host=true
 iscsi_helper=tgtadm
 connection_type=libvirt
 # Compute #
 compute_driver=libvirt.LibvirtDriver

 # Cinder #
 volume_api_class=nova.volume.cinder.API
 osapi_volume_listen_port=5900
</code></pre></li>
<li><p>修改配置文件/etc/nova/nova-compute.conf</p>

<pre><code> [DEFAULT]
 libvirt_type=kvm
</code></pre></li>
</ol>


<p> 除了KVM，你还可以修改成其他的，例如QEMU/XEN等。</p>

<ol>
<li><p>禁用默认的网桥</p>

<pre><code> virsh net-autostart default --disable
 virsh net-destroy default
</code></pre></li>
<li><p>重启nova相关服务</p>

<pre><code> sudo /etc/init.d/nova-api-metadata restart
 sudo /etc/init.d/nova-compute restart
 sudo /etc/init.d/nova-network restart
</code></pre></li>
</ol>


<hr />

<h2>访问OpenStack DashBoard</h2>

<p>在控制节点重启httpd和memcached：</p>

<pre><code>sudo /etc/init.d/apache2 restart
sudo /etc/init.d/memcached restart
</code></pre>

<p>访问 <a href="http://192.168.30.73/horizon">http://192.168.30.73/horizon</a>，用户名和密码分别是admin/admin_password</p>

<hr />

<h2>日常管理</h2>

<h3>控制节点管理</h3>

<h4>创建实例</h4>

<h5>创建虚拟机密钥对</h5>

<p>在控制节点执行以下语句：</p>

<pre><code>    root@control-01:~# ssh-keygen 
    Generating public/private rsa key pair.
    Enter file in which to save the key (/root/.ssh/id_rsa): 
    Created directory '/root/.ssh'.
    Enter passphrase (empty for no passphrase): 
    Enter same passphrase again: 
    Your identification has been saved in /root/.ssh/id_rsa.
    Your public key has been saved in /root/.ssh/id_rsa.pub.
    The key fingerprint is:
    6b:6e:2f:b5:b5:73:a6:8e:96:bf:c0:a5:84:7c:c5:92 root@control-01
    The key's randomart image is:
    +--[ RSA 2048]----+
    |                 |
    |           o     |
    |          E o    |
    |       . . o     |
    |        S o .    |
    |         =.o.    |
    |        o.++ .   |
    |       oo +oo o  |
    |       ..+oo=*   |
    +-----------------+
</code></pre>

<h5>导入密钥</h5>

<pre><code>    nova keypair-add --pub_key .ssh/id_rsa.pub key2
    nova keypair-list
    +------+-------------------------------------------------+
    | Name | Fingerprint                                     |
    +------+-------------------------------------------------+
    | key2 | 6b:6e:2f:b5:b5:73:a6:8e:96:bf:c0:a5:84:7c:c5:92 |
    +------+-------------------------------------------------+
</code></pre>

<h5>查看镜像</h5>

<pre><code>    nova image-list
    +--------------------------------------+--------------+--------+--------+
    | ID                                   | Name         | Status | Server |
    +--------------------------------------+--------------+--------+--------+
    | 533457ef-a1fe-41e0-a351-908975d3550b   | myFirstImage   | ACTIVE |        |
    +--------------------------------------+--------------+--------+--------+
</code></pre>

<p>镜像的创建方法请见上传镜像文件。</p>

<h5>查看虚拟机配置模板</h5>

<pre><code>    nova flavor-list
</code></pre>

<h5>创建实例(虚拟机)</h5>

<pre><code>    nova boot --flavor 1 --image 533457ef-a1fe-41e0-a351-908975d3550b --key_name key2 myFirstvm
</code></pre>

<p>创建一个名叫：myFirstvm的实例。</p>

<ul>
<li>&mdash;image             表示使用的哪个镜像文件</li>
<li>&mdash;flavor             使用哪个配置模板，具体见查看虚拟机配置模板</li>
<li>&mdash;key_name       指定密钥文件</li>
</ul>


<p>在创建之后会输出以下类似信息：</p>

<p><img src="http://agenge.github.io/images/2013/06/04.png" title="" ></p>

<p>从图中可看出正在创建一个实例。</p>

<h4>配置网络</h4>

<h5>创建与绑定公网</h5>

<ol>
<li><p>创建一个公网IP，在控制节点执行以下语句：</p>

<pre><code> nova  floating-ip-create
</code></pre></li>
<li><p>创建指定的公网IP</p></li>
</ol>


<p> floating-ip-create只是创建一个随机可用（IP池）的可用公网IP，那如何要创建一个指定的IP如何操作？没关系，nova可以做到，请看操作：</p>

<pre><code>    nova add-floating-ip test01 192.168.30.6
</code></pre>

<ol>
<li><p>绑定公网IP地址到虚拟机</p>

<pre><code> nova add-floating-ip vm01 192.168.30.1
</code></pre></li>
</ol>


<p> 表示绑定到vm01这个虚拟机。可通过查看虚拟机状态看到：</p>

<pre><code>    nova show vm01
</code></pre>

<h5>防火墙设置</h5>

<ol>
<li><p>允许SSH登录</p>

<pre><code> nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
</code></pre></li>
<li><p>允许ICMP Ping</p>

<pre><code> nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
</code></pre></li>
<li><p>查看防火墙设置</p>

<pre><code> nova secgroup-list-rules default
</code></pre></li>
</ol>


<h5>删除或解绑floating-ip</h5>

<p>如果某个公网IP不再需要，你可以通过删除或解绑它：</p>

<pre><code>    nova remove-floating-ip test01 192.168.30.6
</code></pre>

<p>或</p>

<pre><code>    nova floating-ip-delete test01 192.168.30.6
</code></pre>

<p>删除之后就会从IP池释放出来，以供其他Tenant使用。</p>

<hr />

<h3>Cinder管理</h3>

<ol>
<li><p>列出当前用户所有资源</p>

<pre><code> cinder absolute-limits
</code></pre></li>
<li><p>创建一个Volume</p>

<pre><code> cinder create --display_name cin01 10
</code></pre></li>
<li><p>&mdash;display_name为volume名称，后面的数字表示为10G。</p></li>
<li><p>查看Volume</p>

<pre><code> cinder list
</code></pre></li>
</ol>


<p> 或者</p>

<pre><code>    nova volume-list
</code></pre>

<hr />

<h3>计算节点管理</h3>

<h4>KVM驱动</h4>

<p>要启用KVM，只需要在/etc/nova/nova.conf加入：</p>

<pre><code>    libvirt_type=kvm
    compute_driver=libvirt.LibvirtDriver
</code></pre>

<p>KVM支持的虚拟机镜像格式：RAW、QCOW2、VMDK</p>

<h4>QEMU驱动</h4>

<p>要启用QEMU，只需要在/etc/nova/nova.conf加入：</p>

<pre><code>    libvirt_type=qemu
    compute_driver=libvirt.LibvirtDriver
</code></pre>

<p>QEMU支持的虚拟机镜像格式：RAW、QCOW2、VMDK</p>

<h4>Xen驱动</h4>

<p>要启用Xen，包括Xen, XenAPI, XenServer and XCP，只需要在/etc/nova/nova.conf加入：</p>

<pre><code>    compute_driver=xenapi.XenAPIDriver
    xenapi_connection_url=http://your_xenapi_management_ip_address
    xenapi_connection_username=root
    xenapi_connection_password=your_password
</code></pre>

<p>XenAPI支持的虚拟机镜像格式：RAW、VHD</p>

<p>如果您的Xen使用的libvirt管理，只需要在/etc/nova/nova.conf加入：</p>

<pre><code>    libvirt_type=xen
    compute_driver=libvirt.LibvirtDriver
</code></pre>

<hr />

<h3>Glance管理</h3>

<h4>磁盘格式</h4>

<ul>
<li><p>raw 此格式支持兼容转换其他格式文件，类似于中间格式，最大的缺点是<strong>不支持虚拟机的快照功能</strong>，使用空间类似于物理磁盘，使用多少空间实际上就是多少空间，可以通过du -h file.raw 来查看它真正的大小，而ls -lh看到的就是整个raw文件大小（包括剩余空间）</p></li>
<li><p>qcow2 更小的存储空间，du -h 和ls -h看到的大小一样。且支持虚拟机的快照功能，性能接近于 raw 格式的文件。支持AES加密、zlib压缩。</p></li>
<li><p>vhd 微软的虚拟磁盘文件，不过也兼容其他虚拟软件。</p></li>
<li><p>vmdk VMware的专有格式，其在自身的虚拟环境中，无论从性能还是功能，都是最强大、最稳定的，其他虚拟化软件较少用到。</p></li>
<li><p>iso 经典的ISO文件，不多介绍。</p></li>
<li><p>vdi VirtualBox的专有格式，一般服务器虚拟化也很少用到。</p></li>
<li><p>aki Amazon内核镜像文件。</p></li>
<li><p>ari Amazon 内存（ramdisk）镜像文件。</p></li>
<li><p>ami Amazon机器镜像文件。</p></li>
</ul>


<h4>容器格式</h4>

<p>Glance的container format主要包括以下格式：</p>

<ul>
<li><p>bare                  表示镜像没有包括container或元数据，如果不知道选哪个格式，就选bare吧。</p></li>
<li><p>ovf                   开放式虚拟磁盘文件，最初由VMware发起，支持多种虚拟化。</p></li>
<li><p>aki                    Amazon内核镜像文件，在 磁盘格式设置为 aki 时使用。</p></li>
<li><p>ari                    Amazon 内存（ramdisk）镜像文件，在 磁盘格式设置为 ari 时使用。</p></li>
<li><p>ami                   Amazon机器镜像文件，在 磁盘格式设置为 ami 时使用。</p></li>
</ul>


<p>关于安装与部署，偶暂时写到这里，这只是很简单的一个入门例子而已，下次偶会介绍
如何制作CentOS5.5、CentOS 6.3及Windows Server 2008的镜像，很多同学因镜像而烦恼。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zabbix配置与报警设置]]></title>
    <link href="http://agenge.github.io/blog/2013/05/29/zabbix-config-emailalert/"/>
    <updated>2013-05-29T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/29/zabbix-config-emailalert</id>
    <content type="html"><![CDATA[<p>上次偶写了一篇<a href="http://agenge.com/blog/2013/05/02/zabbix-source-install-conf">Zabbix 源码安装与配置</a> ，安装之后默认是无法监控客户端主机滴，所以偶今天专门写篇文章来介绍Zabbix配置，主要涉及到：添加主机、邮件报警及一些常见的操作流程，希望对初学者有所帮助。</p>

<h2>监控机</h2>

<p>通在安装Zabbix之后，还需要在Web管理控制台添加需要监控的主机，下列是以添加一台监控主机为例进行演示。</p>

<ol>
<li>“Configuration” &ndash;> “Hosts”，点击添加一台主机“Host”:</li>
</ol>


<p> <img src="http://agenge.github.io/images/2013/05/01.jpg" title="" ></p>

<ol>
<li>需要填写的内容主要为：“主机(Host)”、“模板(Templates)”，详细操作请见下列图中所示：主机的设置如下：</li>
</ol>


<p> <img src="http://agenge.github.io/images/2013/05/02.jpg" title="" >
 模板的设置如下：</p>

<p> <img src="http://agenge.github.io/images/2013/05/03.jpg" title="" ></p>

<p> 点击“添加(Add)”之后，从弹出的子页面选择需要的模板，Zabbix默认已自带非常多的模板，</p>

<p> 例如Mysql、Zabbix Server、Zabbix Agentd、OS Linux等。</p>

<p>  <img src="http://agenge.github.io/images/2013/05/04.jpg" title="" ></p>

<p> 勾选所需要的监控模板后，点击最下边的“选择(Select)”，回到之前的模板标签页，最后一定要记得保存(Save)。</p>

<p>  <img src="http://agenge.github.io/images/2013/05/05.jpg" title="" ></p>

<ol>
<li>如果一切正常，默认在1分钟之后就会变成可用状态：
<img src="http://agenge.github.io/images/2013/05/06.jpg" title="" ></li>
</ol>


<!-- more -->


<h2>报警设置</h2>

<p>在添加监控主机之后，还需要邮件报警设置，否则监控人员无法及时掌握系统状态，报警一般是邮件报警与短信报警，甚至相两者结合。 其中邮件报警又可分为自定义脚本警报和自己搭建邮件服务器进行报警，短信报警暂时不涉及，后面会有专门章节进行介绍，本章只涉及到自定义邮件报警的设置，使用一个Msmtp（兼容SendMail接口的SMTP客户端. 工具，关于它的原理介绍，请自行搜索。下面是详细的安装步骤：</p>

<h3>邮件报警设置</h3>

<ol>
<li>安装</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar jxvf msmtp-1.4.31.tar.bz2
</span><span class='line'>cd msmtp-1.4.31
</span><span class='line'>./configure --prefix=/usr/local/msmtp
</span><span class='line'>make && make install
</span><span class='line'>mkdir /usr/local/msmtp/etc
</span><span class='line'>touch /usr/local/msmtp/etc/msmtprc</span></code></pre></td></tr></table></div></figure>


<ol>
<li>配置</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /usr/local/msmtp/etc/msmtprc
</span><span class='line'>########################################
</span><span class='line'>defaults
</span><span class='line'>account default
</span><span class='line'>host smtp.139.com
</span><span class='line'>port 25
</span><span class='line'>from taurus52@139.com
</span><span class='line'>auth login
</span><span class='line'>tls off
</span><span class='line'>user taurus52@139.com
</span><span class='line'>password 123456
</span><span class='line'>logfile /var/log/mmlog
</span><span class='line'>########################################</span></code></pre></td></tr></table></div></figure>


<p> host/from/user/password这三个字段，请根据具体情况修改。</p>

<p> 安装Mutt，Mutt是一个邮件用户代理工作，其本身不发送和接收邮件，需要调用邮件传输代码(例如Msmtp或sendmail) 来发送和接收邮件.</p>

<pre><code>```
yum -y install mutt
vim /etc/Muttrc
set sendmail="/usr/local/msmtp/bin/msmtp"
set use_from=yes
set realname="taurus52@163.com"
set editor="vi"
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  * /etc/Muttrc为全局设置，如果只是对某个用户设置，可以在~/muttrc中设置。
</span><span class='line'>  * sendmail设置为msmtp的绝对路径
</span><span class='line'>  * realname 设置你的email地址
</span><span class='line'>  * editor 设置为你的编辑器，如果你中emacs忠实用户，也是可以滴。
</span><span class='line'>
</span><span class='line'> 测试是否能够发送邮件：</span></code></pre></td></tr></table></div></figure>


<p>echo &ldquo;this is a test mail&rdquo; >> /tmp/files
echo &ldquo;testmail&rdquo; | mutt -s &ldquo;test&rdquo; -a /tmp/files  <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x74;&#x65;&#115;&#116;&#x5f;&#122;&#97;&#98;&#98;&#x69;&#120;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x74;&#101;&#x73;&#x74;&#95;&#x7a;&#x61;&#98;&#98;&#105;&#120;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  * -a 代表添加附件
</span><span class='line'>  * “testmail” 邮件正文
</span><span class='line'>  * -s “test” 邮件标题
</span><span class='line'>  * test_zabbix@gmail.com 为接收的邮件人。
</span><span class='line'>
</span><span class='line'> 登录邮件客户端察看确认收到邮件：
</span><span class='line'>
</span><span class='line'> <img src="http://agenge.github.io/images/2013/05/07.jpg" title="" >
</span><span class='line'>
</span><span class='line'> 修改zabbix_server.conf以下内容：</span></code></pre></td></tr></table></div></figure>


<p> mkdir -p /data/zabbix/alertscripts
 vim zabbix_server.conf
 AlertScriptsPath=${datadir}/alertscripts</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 创建一个监控脚本：</span></code></pre></td></tr></table></div></figure>


<p> vim /data/zabbix/alertscripts/zabbix_monitor
 #!/bin/bash
 $1 to mail address
 $2 mail subject
 $3 mail content
 echo &ldquo;$3&rdquo; | mutt -s &ldquo;$2&rdquo; $1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 修改权限：</span></code></pre></td></tr></table></div></figure>


<p> chown zabbix:zabbix /data/zabbix/alertscripts
&#8220;`
 到目前为止，已经手动测试通过邮件报警的功能，接下来需要将它集成到zabbix监控系统中。</p>

<ol>
<li><p>点击“管理(Administration)”->“媒体类型(Media types)”，点击页面最右边的“添加媒体类型(Cretae media type)”:
<img src="http://agenge.github.io/images/2013/05/08.jpg" title="" ></p></li>
<li><p>Description： 此为描述，可随意填写。</p></li>
<li>Type： 选择 “Script’。</li>
<li>Script name：填写刚才创建的shell脚本(当然，也可以是其他脚本)名称，例如zabbix_monitor。</li>
<li>Enabled： 启用此脚本。</li>
</ol>


<p> 最后记得“Save”哦。</p>

<h4>添加用户和组</h4>

<ol>
<li>添加用户组</li>
</ol>


<p> 点击“管理(Administration)”->“用户(Users)”，点击最右边的“创建用户组(Create user group)”:</p>

<p> <img src="http://agenge.github.io/images/2013/05/09.jpg" title="" ></p>

<p> 用户组(User group)只需要填写“Group name”，其他默认即可。</p>

<p> <img src="http://agenge.github.io/images/2013/05/10.jpg" title="" ></p>

<p> 权限(Permissions)需要添加之前新增的主机，点击“Read-write”下的“添加(Add)”，并在的子页面选择对应的主机组，例如选择“Puppet”：</p>

<p> <img src="http://agenge.github.io/images/2013/05/11.jpg" title="" ></p>

<p> 点击“Select”确认。最后“保存(Save)”，即添加一个用户组(puppet)。</p>

<ol>
<li>添加用户</li>
</ol>


<p> 添加一个用户组之后，此用户组中并没有任何一个用户，必须在此用户组中增加用户才行，在用户组列表页面，点击用户组“Puppet”之后的“Users(0)”：</p>

<p>  <img src="http://agenge.github.io/images/2013/05/12.jpg" title="" ></p>

<p>  在跳转后的“Users”页面最右边，点击“创建用户(Create user)”：</p>

<p>  <img src="http://agenge.github.io/images/2013/05/13.jpg" title="" ></p>

<p>  之后有三个标签需要设置</p>

<ul>
<li>用户标签：</li>
</ul>


<p>  <img src="http://agenge.github.io/images/2013/05/14.jpg" title="" ></p>

<ul>
<li>媒体标签：</li>
</ul>


<p>  <img src="http://agenge.github.io/images/2013/05/15.jpg" title="" ></p>

<ul>
<li>权限标签(Permissions)：</li>
</ul>


<p>  <img src="http://agenge.github.io/images/2013/05/16.jpg" title="" ></p>

<p>  此处就能看到之前在创建用户组时看到的权限，最后点击“保存(Save)”。</p>

<h4>触发器设置</h4>

<p>添加邮件报警设置和用户设置之后，还需要配置触发器，表示当某个触发器达到设置的值后，就会报警。</p>

<p>Action标签：</p>

<p><img src="http://agenge.github.io/images/2013/05/17.jpg" title="" ></p>

<p>条件(Conditions)标签：</p>

<p><img src="http://agenge.github.io/images/2013/05/18.jpg" title="" ></p>

<p><img src="http://agenge.github.io/images/2013/05/19.jpg" title="" ></p>

<p>操作(Operations)标签：</p>

<p><img src="http://agenge.github.io/images/2013/05/20.jpg" title="" ></p>

<p><img src="http://agenge.github.io/images/2013/05/21.jpg" title="" ></p>

<p>以上就是Zabbix的基本操作流程，如果你还有疑问，可回复讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量装机---Linux无人值守之Kickstart]]></title>
    <link href="http://agenge.github.io/blog/2013/05/23/linux-kickstart/"/>
    <updated>2013-05-23T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/23/linux-kickstart</id>
    <content type="html"><![CDATA[<p>前段时间总是忙于安装系统，对于偶这种懒人来说，一天安装两遍都无法承受，别说更多，基本上有两个原因造出：</p>

<ul>
<li>时间很宝贵。</li>
<li>偶比较懒惰。</li>
</ul>


<p>一直习惯于 RedHat 家族产品，从最开始接触的RHEL，到后来同时使用的Fedora，及目前使用最多的CentOS，这无疑是偶最为熟悉的Linux，为啥偶要提这些捏？因为以下操作是基于这些Linux操作的啦，费话在此打住，以下为详细操作步骤.</p>

<h2>安装基础包</h2>

<p>_注：以下Yum操作是基于偶本地的ftp 仓库源，&mdash;enablerepo是告诉yum使用这个指定的安装源，
默认情况下，CentOS自带的仓库源也是可以用滴，优先推荐各位使用哦，有个前提条件：连网！
What？服务器不能上网？公司不许随意连公网？能说脏话吗？Fuck! _</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y install dhcp-* --enablerepo=centos5.5
</span><span class='line'>yum -y install tftp-* --enablerepo=centos5.5
</span><span class='line'>yum -y install vsftpd-* --enablerepo=centos5.5
</span><span class='line'>cp /usr/share/doc/dhcp-3.0.5/dhcpd.conf.sample /etc/dhcpd.conf</span></code></pre></td></tr></table></div></figure>


<h2>配置dhcp</h2>

<!-- more -->


<pre><code>vi /etc/dhcpd.conf
</code></pre>

<p>添加以下信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filename "pxelinux.0";     # 指定bootloader文件
</span><span class='line'>next-server 192.168.0.20;  # 指定索取pxelinux.0的tftp服务器IP</span></code></pre></td></tr></table></div></figure>


<p>添加的这两行可在大括号外面，也可在里面，next-server选项可写可不写，但建议各位写上啦。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service dhcpd start   # 启动服务
</span><span class='line'>cd /tftpboot
</span><span class='line'>cp /mnt/isolinux/* ./</span></code></pre></td></tr></table></div></figure>


<p>实际需要的是vmlinuz，initrd.img  *.msg 这几个文件，但为了操作方便，偶直接把isolinux目录下的文件全cp过来（偶在文章开头就说过偶比较懒惰，换成生产环境千万别这样玩）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir pxelinux.cfg
</span><span class='line'>mv isolinux.cfg pxelinux.cfg/default
</span><span class='line'>cp /usr/lib/syslinux/pxelinux.0 /tftpboot</span></code></pre></td></tr></table></div></figure>


<p>default配置文件的作用是告诉主机从哪里去加载操作系统内核，并将启动加载文件拷到/tftpboot下。修改tftp参数并启动tftp服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/xinetd.d/tftp
</span><span class='line'># *********************************
</span><span class='line'>service tftp
</span><span class='line'>{
</span><span class='line'>    socket_type = dgram
</span><span class='line'>    protocol = udp
</span><span class='line'>    wait = yes
</span><span class='line'>    user = root
</span><span class='line'>    server = /usr/sbin/in.tftpd
</span><span class='line'>    server_args = -s /tftpboot
</span><span class='line'>    disable = &lt;span style="color: #ff0000;"&gt;&lt;strong&gt;no&lt;/strong&gt;&lt;/span&gt;
</span><span class='line'>    per_source = 11
</span><span class='line'>    cps = 100 2
</span><span class='line'>    flags = IPv4
</span><span class='line'>}
</span><span class='line'># *********************************</span></code></pre></td></tr></table></div></figure>


<p>tftpboot 这个参数主要是指定tftp client 客户端从服务器的哪个目录去加载bootloader的pxelinux.0文件。启动服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service xinetd restart
</span><span class='line'>chkconfig tftp on
</span><span class='line'>vi /tftpboot/pxelinux.cfg/default</span></code></pre></td></tr></table></div></figure>


<p>修改第3行，第12行.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default linux
</span><span class='line'>prompt 1
</span><span class='line'>timeout 10 //时间调小点
</span><span class='line'>display boot.msg
</span><span class='line'>F1 boot.msg
</span><span class='line'>F2 options.msg
</span><span class='line'>F3 general.msg
</span><span class='line'>F4 param.msg
</span><span class='line'>F5 rescue.msg
</span><span class='line'>label linux
</span><span class='line'>kernel vmlinuz
</span><span class='line'>append ks=ftp://192.168.0.20/pub/ks.cfg initrd=initrd.img
</span><span class='line'>label text</span></code></pre></td></tr></table></div></figure>


<h2>安装Kickstart</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install -y *kickstart* --enablerepo=centos5.5
</span><span class='line'>system-config-kickstart</span></code></pre></td></tr></table></div></figure>


<p>_提示：所有以system-config开头的命令，都需要图形界面的支持。这不是必须的，前提是对ks的配置文件语法很熟悉啦。 _</p>

<h3>配置ks.cfg</h3>

<p>首先将 ks.cfg 保存到 /var/ftp/pub 目录下，将修改相应权限：</p>

<pre><code>chmod 707 /var/ftp/pub/ks.cfg
</code></pre>

<p>以下是偶使用的ks.cfg全文 ，请各位根据自己情况修改：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#platform=x86, AMD64, or Intel EM64T
</span><span class='line'># System authorization information
</span><span class='line'>auth --useshadow --enablemd5
</span><span class='line'># System bootloader configuration
</span><span class='line'>bootloader --location=mbr
</span><span class='line'># Partition clearing information
</span><span class='line'>clearpart --all --initlabel
</span><span class='line'># Use graphical install
</span><span class='line'>#graphical
</span><span class='line'>text
</span><span class='line'># Firewall configuration
</span><span class='line'>firewall --disabled
</span><span class='line'># Run the Setup Agent on first boot
</span><span class='line'>firstboot --disable
</span><span class='line'># System keyboard
</span><span class='line'>keyboard us
</span><span class='line'># System language
</span><span class='line'>lang en_US
</span><span class='line'># Installation logging level
</span><span class='line'>logging --level=info
</span><span class='line'># Use network installation
</span><span class='line'>url --url=&lt;strong&gt;ftp://192.168.30.210/pub/x86_64/centos5.5&lt;/strong&gt;
</span><span class='line'># Network information
</span><span class='line'>network --bootproto=dhcp --device=eth0 --onboot=on
</span><span class='line'># Reboot after installation
</span><span class='line'>reboot
</span><span class='line'>#Root password
</span><span class='line'>rootpw --iscrypted $1$R79JLo34$.Yi4OUmL5PhpsxzSTL1hX1
</span><span class='line'>
</span><span class='line'># SELinux configuration
</span><span class='line'>selinux --disabled
</span><span class='line'># System timezone
</span><span class='line'>timezone Asia/Chongqing
</span><span class='line'># Install OS instead of upgrade
</span><span class='line'>install
</span><span class='line'># X Window System configuration information
</span><span class='line'>xconfig --defaultdesktop=GNOME --depth=8 --resolution=1026x768 --startxonboot
</span><span class='line'># Disk partitioning information
</span><span class='line'>part /boot --bytes-per-inode=4096 --fstype="ext3" --size=256
</span><span class='line'>part swap --bytes-per-inode=4096 --fstype="swap" --size=2048
</span><span class='line'>#part / --bytes-per-inode=4096 --fstype="ext3" --grow --size=1
</span><span class='line'>part / --bytes-per-inode=4096 --fstype="ext3" --grow --size=102400
</span><span class='line'>
</span><span class='line'>%packages --resolvedeps
</span><span class='line'>#@system-tools
</span><span class='line'>#@gnome-desktop
</span><span class='line'>
</span><span class='line'>@base-x
</span><span class='line'>
</span><span class='line'>#@sound-and-video
</span><span class='line'>#@chinese-support
</span><span class='line'>#@graphical-internet
</span><span class='line'>#@admin-tools
</span><span class='line'>#@editors
</span><span class='line'>#key --skip
</span></code></pre></td></tr></table></div></figure>


<p>所有以井号(#)开头的为注释行.</p>

<ul>
<li>url是操作系统的镜像地址</li>
<li>part / (未注释行)是指根分区分100G, 如果你的磁盘很大，剩余的空间可在安装系统后根据您的具体需求而设。</li>
<li>@bash-x  安装最基础的系统包</li>
<li>resolvedeps 将自动解决包之间的依赖关系。</li>
</ul>


<h3>启动所有服务</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service dhcpd restart
</span><span class='line'>service xinetd restart
</span><span class='line'>service vsftpd restart</span></code></pre></td></tr></table></div></figure>


<h2>PXE安装系统</h2>

<p>当服务器一切工作准备就绪，就开始大规模安装Linux系统吧，由于各个主板对应的BIOS设置不同，此处无法满足所有的需求，通常做法是：</p>

<p>进入BIOS &ndash;> PXE boot &ndash;> enable &ndash;> save and reboot</p>

<p>如果各位有任何疑问，请留言回复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zabbix 源码安装与配置]]></title>
    <link href="http://agenge.github.io/blog/2013/05/02/zabbix-source-install-conf/"/>
    <updated>2013-05-02T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/02/zabbix-source-install-conf</id>
    <content type="html"><![CDATA[<h2>1、安装环境</h2>

<ul>
<li>操作系统：:CentOS 5.5 64位</li>
<li>Mysql：5.5.27</li>
<li>Apache httpd：2.4.4</li>
<li>Zabbix：2.0.6</li>
</ul>


<h2>2、源码安装</h2>

<h3>安装Zabbix</h3>

<h4>创建用户</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd zabbix
</span><span class='line'>useradd -g zabbix -M -s /sbin/nologin zabbix</span></code></pre></td></tr></table></div></figure>


<h3>源码安装Zabbix</h3>

<p>下载页面请点击 <a href="http://www.zabbix.com/download.php">这里</a>。下载之后按照以下步骤执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install wget curl-devel net-snmp-devel php-bcmath
</span><span class='line'>tar zxvf zabbix-2.0.6.tar.gz
</span><span class='line'>cd zabbix-2.0.6
</span><span class='line'>./configure --prefix=/data/zabbix \
</span><span class='line'>  --enable-server --enable-agent \
</span><span class='line'>  --with-mysql --with-net-snmp \
</span><span class='line'>  --with-libcurl --enable-proxy
</span><span class='line'>
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<p>如果一切顺利，安装完成。</p>

<h3>创建Zabbix 数据库</h3>

<p>这里假设你已经安装好Mysql数据库，具体的安装方法请自己到网上搜索解决。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -uroot -p
</span><span class='line'>Enter password:
</span><span class='line'>
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 63
</span><span class='line'>Server version: 5.0.95 Source distribution
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective owners.
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; create database zabbix character set utf8;
</span><span class='line'>mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix';
</span><span class='line'>Query OK, 1 row affected (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; quit
</span><span class='line'>mysql -uzabbix -p zabbix &lt; database/mysql/schema.sql
</span><span class='line'>mysql -uzabbix -p zabbix &lt; database/mysql/images.sql
</span><span class='line'>mysql -uzabbix -p zabbix &lt; database/mysql/data.sql</span></code></pre></td></tr></table></div></figure>


<h3>配置Zabbix</h3>

<p>设置服务自启动：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp misc/init.d/fedora/core/zabbix_server /etc/init.d/
</span><span class='line'>chmod +x /etc/init.d/zabbix_server</span></code></pre></td></tr></table></div></figure>


<p>修改zabbix_server中的BASEDIR=/data/zabbix</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chkconfig --add zabbix_server
</span><span class='line'>chkconfig zabbix_server on</span></code></pre></td></tr></table></div></figure>


<p>设置zabbix 配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /data/zabbix/etc/zabbix/zabbix_server.conf
</span><span class='line'>DBName=zabbix
</span><span class='line'>DBPassword=zabbix</span></code></pre></td></tr></table></div></figure>


<p>只需要修改密码即可，其他都保持默认值。当然如果你的Mysql不是安装在本地，肯定也要修改相应的IP啦。</p>

<h4>启动Zabbix Server</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/zabbix_server start</span></code></pre></td></tr></table></div></figure>


<p>确认zabbix server是否已经启动：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>netstat -antulp | grep zabbix
</span><span class='line'>
</span><span class='line'>tcp        0      0 0.0.0.0:10051               0.0.0.0:*                   LISTEN      19087/zabbix_server</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>3、安装Zabbix Web接口</h2>

<p>Zabbix前端使用PHP编写，故Web Server必须支持PHP。</p>

<h4>安装Apr</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://mirrors.cnnic.cn/apache//apr/apr-1.4.6.tar.gz
</span><span class='line'>tar zxvf apr-1.4.6.tar.gz
</span><span class='line'>cd apr-1.4.6
</span><span class='line'>./configure --prefix=/usr/local/apr
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<h4>安装Apr-utils</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://mirrors.cnnic.cn/apache//apr/apr-util-1.5.2.tar.gz
</span><span class='line'>tar zxvf apr-util-1.5.2.tar.gz
</span><span class='line'>cd apr-util-1.5.2
</span><span class='line'>./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<h4>安装pcre</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar zxvf pcre-8.32.tar.gz
</span><span class='line'>cd pcre-8.32
</span><span class='line'>./configure
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<h3>安装Apache httpd</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://labs.mop.com/apache-mirror//httpd/httpd-2.4.4.tar.bz2
</span><span class='line'>tar jxvf httpd-2.4.4.tar.bz2
</span><span class='line'>cp -rf apr-1.4.6 /data/software/httpd-2.4.4/srclib/apr
</span><span class='line'>cp -rf apr-util-1.5.2 /data/software/httpd-2.4.4/srclib/apr-util
</span><span class='line'>cd httpd-2.4.4
</span><span class='line'>./configure --prefix=/usr/local/httpd \
</span><span class='line'>  --enable-modules --enable-ssl --enable-module=so \
</span><span class='line'>  --with-apr=/usr/local/apr \
</span><span class='line'>  --with-apr-util=/usr/local/apr-util --with-included-apr \
</span><span class='line'>  --enable-mods-shared=most --with-included-apr
</span><span class='line'>
</span><span class='line'>make && make install
</span><span class='line'>/usr/local/httpd/bin/apachectl start</span></code></pre></td></tr></table></div></figure>


<h4>安装 PHP</h4>

<p>安装gettext（国际化支持）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://ftp.gnu.org/pub/gnu/gettext/gettext-0.18.2.tar.gz
</span><span class='line'>tar zxvf gettext-0.18.2.tar.gz
</span><span class='line'>cd gettext-0.18.2
</span><span class='line'>./configure
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<p>安装libpng：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar zxvf libpng-1.6.1.tar.gz
</span><span class='line'>cd libpng-1.6.1
</span><span class='line'>./configure --prefix=/usr/local/libpng --enable-shared
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<p>安装freetype：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar jxvf freetype-2.4.11.tar.bz2
</span><span class='line'>cd freetype-2.4.11
</span><span class='line'>./configure --prefix=/usr/local/freetype&lt;b&gt;&lt;/b&gt;
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<p>安装JPEG：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.ijg.org/files/jpegsrc.v9.tar.gz
</span><span class='line'>tar zxvf jpegsrc.v9.tar.gz
</span><span class='line'>cd jpeg-9/
</span><span class='line'>./configure --prefix=/usr/local/jpeg9 --enable-shared --enable-static
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<p>安装GD库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://bitbucket.org/libgd/gd-libgd/get/GD_2_0_33.tar.gz
</span><span class='line'>tar zxvf GD_2_0_33.tar.gz
</span><span class='line'>cd libgd-gd-libgd-486e81dea984/src
</span><span class='line'>./configure --with-png  --with-freetype  --with-jpeg
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<p>安装PHP：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget ftp://192.168.30.211:/pub/Tools/php-5.3.19.tar.bz2
</span><span class='line'>tar jxvf php-5.3.19.tar.bz2
</span><span class='line'>
</span><span class='line'>./configure --prefix=/usr/local/php  \
</span><span class='line'>  --with-config-file-path=/usr/local/php/etc \
</span><span class='line'>  --disable-debug --disable-rpath --with-gettext  \
</span><span class='line'>  --with-mcrypt --with-mysql=/usr/local/mysql \
</span><span class='line'>  --with-mysql-sock=/data/mysqldata/3306/mysql.sock \
</span><span class='line'>  --with-mysqli=/usr/local/mysql/bin/mysql_config \
</span><span class='line'>  --enable-mbstring --enable-pdo --with-curl \
</span><span class='line'>  --enable-inline-optimization --with-bz2 \
</span><span class='line'>  --with-zlib --enable-sockets --enable-bcmath \
</span><span class='line'>  --enable-sysvsem --enable-sysvshm --enable-pcntl \
</span><span class='line'>  --enable-mbregex --with-mhash --enable-xml \
</span><span class='line'>  --enable-zip --with-pcre-regex --with-gettext \
</span><span class='line'>  --with-apxs2=/usr/local/httpd/bin/apxs \
</span><span class='line'>  --with-gd --enable-gd-native-ttf --with-jpeg-dir=/usr/local/include \
</span><span class='line'>  --with-png-dir=/usr/local/include --with-freetype-dir=/usr/include/freetype2
</span><span class='line'>  
</span><span class='line'>make ZEND_EXTRA_LIBS='-liconv'
</span><span class='line'>make install
</span><span class='line'>cp php.ini-production /usr/local/php/etc/php.ini
</span><span class='line'>cp sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm
</span><span class='line'>chmod +x /etc/init.d/php-fpm
</span><span class='line'>chkconfig php-fpm on
</span><span class='line'>cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span></code></pre></td></tr></table></div></figure>


<p>修改时区：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /usr/local/php/etc/php.ini</span></code></pre></td></tr></table></div></figure>


<p>在 [Date] 之后增加一行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date.timezone =  Asia/Chongqing</span></code></pre></td></tr></table></div></figure>


<p>将 max_execution_time 的值修改为 300或更大值，将max_input_time的值修改为300或更大值。</p>

<p>修改httpd.conf：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /usr/local/httpd/conf/httpd.conf</span></code></pre></td></tr></table></div></figure>


<p>在最后增加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AddType application/x-httpd-php  .php
</span><span class='line'>AddType application/x-httpd-php-source  .phps</span></code></pre></td></tr></table></div></figure>


<p>并将：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DirectoryIndex index.html</span></code></pre></td></tr></table></div></figure>


<p>修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DirectoryIndex index.php index.html</span></code></pre></td></tr></table></div></figure>


<h4>配置Zabbix Web接口</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /usr/local/httpd/htdocs/zabbix
</span><span class='line'>cd frontends/php/
</span><span class='line'>cp -a . /usr/local/httpd/htdocs/zabbix/
</span><span class='line'>cd /usr/local/httpd/htdocs/zabbix/
</span><span class='line'>cp conf/zabbix.conf.php.example conf/zabbix.conf.php
</span><span class='line'>vim conf/zabbix.conf.php</span></code></pre></td></tr></table></div></figure>


<p>修改好连接Myql数据库的相关信息。</p>

<h4>安装Zabbix前台</h4>

<p>使用浏览器打开Zabbix URL: <a href="http://server_ip/zabbix">http://server_ip/zabbix</a></p>

<p>用户名：admin</p>

<p>密码：  zabbix</p>

<h2>安装Zabbix Agent</h2>

<h3>Zabbix Agent For Linux</h3>

<p>添加用户：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groupadd zabbix
</span><span class='line'>useradd -g zabbix -M -s /sbin/nologin zabbix</span></code></pre></td></tr></table></div></figure>


<p>下载 Zabbix Agent</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.zabbix.com/downloads/2.0.6/zabbix_agents_2.0.6.linux2_6.amd64.tar.gz
</span><span class='line'>tar zxvf zabbix_agents_2.0.6.linux2_6.amd64.tar.gz
</span><span class='line'>mv sbin/zabbix_agent* /usr/sbin/
</span><span class='line'>mv bin/zabbix_* /usr/bin/
</span><span class='line'>mkdir -p /etc/zabbix
</span><span class='line'>mv conf/* /etc/zabbix
</span><span class='line'>echo "zabbix_agent    10050/tcp" &gt;&gt; /etc/services
</span><span class='line'>echo "zabbix_agent    10050/udp" &gt;&gt; /etc/services
</span><span class='line'>sed -i 's/Server=127.0.0.1/Server=192.168.30.226/' /etc/zabbix/zabbix_agentd.conf
</span><span class='line'>sed -i 's/Hostname=Zabbix server/Hostname=192.168.30.226/' /etc/zabbix/zabbix_agentd.conf</span></code></pre></td></tr></table></div></figure>


<p>启动 Zabbix Agent</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf
</span><span class='line'>ps aux | grep zabbix
</span><span class='line'>echo "zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf" &gt;&gt; /etc/rc.local</span></code></pre></td></tr></table></div></figure>


<p>测试是否正确</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zabbix_get -s 192.168.30.226 -p 10050 -k agent.ping
</span><span class='line'>1</span></code></pre></td></tr></table></div></figure>


<p>如果返回1表示正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[要体现在行动上之Blog恢复]]></title>
    <link href="http://agenge.github.io/blog/2013/04/14/blog-recovery/"/>
    <updated>2013-04-14T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/04/14/blog-recovery</id>
    <content type="html"><![CDATA[<p>前几天偶打开自己<a title="agenge" href="http://agenge.com">blog</a>时，突然发现无法打开，具体点说是显示数据库连接错误，第一反应是“被黑”，故而排查的第一步就是查看系统log，然而并没有看到相关错误信息，为尽快恢复，偶先尝试重启mysql，提示没有剩余空间，难道数据库数据文件太多导致？通过du后，发现果然如此，通过将过旧的数据文件（即Mysql bin log）删除即可。以下是整个恢复过程，仅供参考。</p>

<p><strong> 1. 查看磁盘空间： </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@centos var]# df -h
</span><span class='line'>Filesystem Size Used Avail Use% Mounted on
</span><span class='line'>/dev/sda1 7.9G 7.9G 0M 100% /</span></code></pre></td></tr></table></div></figure>


<p><strong> 2. 查看Mysql binlog 大小 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@centos var]# pwd
</span><span class='line'>/usr/local/mysql/var
</span><span class='line'>[root@centos var]# ll | wc -l
</span><span class='line'>1582
</span><span class='line'>[root@centos var]# du -sh .
</span><span class='line'>4.1G .</span></code></pre></td></tr></table></div></figure>


<p>VPS的磁盘大小总共才8G，还包括操作系统所占空间，bin log占用足足4.1G。删除吧！</p>

<p><strong> 3. 删除旧数据 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@centos var]# mysql -uroot -p
</span><span class='line'>Enter password:
</span><span class='line'>Welcome to the MySQL monitor. Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 45959
</span><span class='line'>Server version: 5.1.54-log Source distribution
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; purge binary logs before '2013-01-01 00:00:00';
</span><span class='line'>Query OK, 0 rows affected (10.39 sec)
</span><span class='line'>mysql&gt; quit
</span><span class='line'>Bye
</span><span class='line'>[root@centos var]# df -h
</span><span class='line'>Filesystem Size Used Avail Use% Mounted on
</span><span class='line'>/dev/sda1 7.9G 4.3G 3.3G 57% /</span></code></pre></td></tr></table></div></figure>


<p>删除2013年1月1日之前的所有数据，剩余可用空间还有3.3G。</p>

<p><strong> 4. 后记 </strong>
如果以上操作就算完结，那无疑是在等待下一次磁盘被爆，为防止问题再次发生，必须主动监控来达到提前预防，所以偶部署了个小脚本，一旦磁盘达到90%，会mail通知偶。也许是对blog的不重视，之前一直未采取行动，或许惰性控制了我，最后问大家一个问题：如果某个东西对你非常重要，在危机来之前，各位都准备好迎接了吗？理想或想法体现到行动上了吗？</p>

<p>2013/09/27 Update:</p>

<p>如果只想写文章，而不想关心Mysql 及Http Server，甚至担心VPS被黑，偶强烈推荐使用 Octopress + Github，具体介绍及安装请见这里<a href="http://agenge.com/blog/2013/09/12/write-blog-octopress-with-github/">利用GitHub搭建免费的个人blog</a></p>
]]></content>
  </entry>
  
</feed>
