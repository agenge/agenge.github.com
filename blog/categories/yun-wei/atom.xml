<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: 运维 | TaurusHome]]></title>
  <link href="http://agenge.github.io/blog/categories/yun-wei/atom.xml" rel="self"/>
  <link href="http://agenge.github.io/"/>
  <updated>2013-09-27T10:26:20+08:00</updated>
  <id>http://agenge.github.io/</id>
  <author>
    <name><![CDATA[agenge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DRBD+Heartbeat+Mysql高可用配置]]></title>
    <link href="http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha/"/>
    <updated>2013-08-09T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>DRBD全称Distributed Replicated Block （分布式的复制块设备），属于Device公司，但是完全开源。它是一款基于块设备的文件复制解决方案，速度比文件级别的软件如NFS，samba快很多，是很多中小企业的共享存储首选解决方案。</p>

<p>DRBD工作需要在两个节点上同时准备一块一模一样的分区组成镜像，这就是为什么它叫做分布式复制块设备，它主要通过复制数据来实现文件同步（备份），主要用于集群文件共享， 我们通过它的工作原理来了解块复制和文件复制的不同。</p>

<p>首先，您需要知道，DRBD是工作在系统内核空间，而不是用户空间，它直接复制的是二进制数据，这是它速度快的根本原因。其次，DRBD至少需要两个节点来工作，一主一次。</p>

<p>DRBD的文件同步过程和普通复制过程的不同：</p>

<p>DRBD在数据进入Buffer Cache时，先经过DRBD这一层，复制一份数据经过TCP/IP协议封装，发送到另一个节点上，另一个节点通过TCP/IP协议来接受复制过来的数据，同步到次节点的DRBD设备上。</p>

<h2>准备工作</h2>

<p>1  准备至少2台服务器，且每台服务器有一块磁盘或一个单独未使用的分区，偶的环境如下：</p>

<table class="table table-bordered table-striped table-condensed">
    <tr>
        <td valign="top" width="180"></td>
        <td valign="top" width="182">主节点(Primary Node)</td>
        <td valign="top" width="183">次节点(Secondary Node)</td>
    </tr>
    <tr>
        <td valign="top" width="180">主机名</td>
        <td valign="top" width="182">drbd-01.i.12582.com</td>
        <td valign="top" width="183">drbd-02.i.12582.com</td>
    </tr>
    <tr>
        <td valign="top" width="180">操作系统</td>
        <td valign="top" width="182">CentOS 6.3 x86_64位</td>
        <td valign="top" width="183">CentOS 6.3 x86_64位</td>
    </tr>
    <tr>
        <td valign="top" width="180">硬盘分区</td>
        <td valign="top" width="182">/dev/sdb  8G</td>
        <td valign="top" width="183">/dev/sdb  8G</td>
    </tr>
    <tr>
        <td valign="top" width="180">IP地址</td>
        <td valign="top" width="182">192.168.30.234</td>
        <td valign="top" width="183">192.168.30.235</td>
    </tr>
</table>


<p>注意：如果有服务器有2块或以上网卡的同学，建议将其中一块网卡专门用来做网络心跳线，甚至接入另外一台单独的交换机，本次环境只有单网卡。</p>

<!--more-->


<h2>初始化设置</h2>

<p>1  所有节点关闭iptables和SELinux</p>

<p>2  在所有节点/etc/hosts加入以下内容：</p>

<pre><code>192.168.30.234  drbd-01.i.12582.com drbd-01
192.168.30.235  drbd-02.i.12582.com drbd-02
</code></pre>

<p>3  所有节点创建独立分区：</p>

<pre><code>fdisk /dev/sdbDevice contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x46b64833.Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.
Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)
WARNING: DOS-compatible mode is deprecated. It's strongly recommended to
switch off the mode (command 'c') and change display units to
sectors (command 'u').

Command (m for help): p
Disk /dev/sdb: 8589 MB, 8589934592 bytes
255 heads, 63 sectors/track, 1044 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x46b64833

Device Boot    Start        End        Blocks    Id    System

Command (m for help): n
Command action
e   extended
p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-1044, default 1):
Using default value 1
Last cylinder, +cylinders or +size{K,M,G} (1-1044, default 1044):
Using default value 1044

Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.
</code></pre>

<h2>安装Hearbeat</h2>

<pre><code>wget ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm
rpm -ivUh epel-release-6-5.noarch.rpm
yum --enablerepo=epel install heartbeat -y
</code></pre>

<h2>安装DRBD</h2>

<p>1  安装依赖包</p>

<pre><code>yum -y install gcc kernel-devel kernel-headers flex
</code></pre>

<p>2  安装DRBD</p>

<pre><code>wget http://oss.linbit.com/drbd/8.4/drbd-8.4.3.tar.gz
tar zxvf drbd-8.4.3.tar.gz
cd drbd-8.4.3
./configure --prefix=/usr/local/drbd --with-km --with-heartbeat
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
make install
cp -R /usr/local/drbd/etc/ha.d/resource.d/drbd* /etc/ha.d/resource.d/
</code></pre>

<p>3  其他设置</p>

<pre><code>mkdir -p /usr/local/drbd/var/run/drbd
cp /usr/local/drbd/etc/rc.d/init.d/drbd /etc/rc.d/init.d/
chkconfig --add drbdchkconfig drbd on
</code></pre>

<h2>安装DRBD模块</h2>

<pre><code>cd drbdmake 
clean
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
cp drbd.ko /lib/modules/`uname -r`/kernel/lib/
depmod
</code></pre>

<p>以上操作请在所有节点操作一次。</p>

<hr />

<h2>设置DRBD</h2>

<p><strong>配置drbd.conf</strong></p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/global_common.conf
global {
    minor-count 64;
    usage-count yes;
    # minor-count dialog-refresh disable-ip-verification
}


common {
    syncer { rate 1000M; }
    handlers {
        # These are EXAMPLE handlers only.
        # They may have severe implications,
        # like hard resetting the node under certain circumstances.
        # Be careful when chosing your poison.

        pri-on-incon-degr "/usr/lib/drbd/notify-pri-on-incon-degr.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        pri-lost-after-sb "/usr/lib/drbd/notify-pri-lost-after-sb.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        local-io-error "/usr/lib/drbd/notify-io-error.sh; /usr/lib/drbd/notify-emergency-shutdown.sh; echo o &amp;gt; /proc/sysrq-trigger ; halt -f";
        fence-peer "/usr/lib/drbd/crm-fence-peer.sh";
        pri-lost "/usr/local/drbd/lib/drbd/notify-pri-lost.sh; /usr/local/drbd/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt;/proc/sysrq-trigger ; reboot -f";
        split-brain "/usr/lib/drbd/notify-split-brain.sh root";
        out-of-sync "/usr/lib/drbd/notify-out-of-sync.sh root";
        # before-resync-target "/usr/lib/drbd/snapshot-resync-target-lvm.sh -p 15 -- -c 16k";
        # after-resync-target /usr/lib/drbd/unsnapshot-resync-target-lvm.sh;
    }

    startup {

        # wfc-timeout degr-wfc-timeout outdated-wfc-timeout wait-after-sb
        wfc-timeout 60;
        degr-wfc-timeout 120;
        outdated-wfc-timeout 2;
    }

    options {
        # cpu-mask on-no-data-accessible
        }

    disk {
        # size max-bio-bvecs on-io-error fencing disk-barrier disk-flushes
        # disk-drain md-flushes resync-rate resync-after al-extents
        # c-plan-ahead c-delay-target c-fill-target c-max-rate
        # c-min-rate disk-timeout
        on-io-error detach;
        fencing resource-only;
    }

    net {
        # protocol timeout max-epoch-size max-buffers unplug-watermark
        # connect-int ping-int sndbuf-size rcvbuf-size ko-count
        # allow-two-primaries cram-hmac-alg shared-secret after-sb-0pri
        # after-sb-1pri after-sb-2pri always-asbp rr-conflict
        # ping-timeout data-integrity-alg tcp-cork on-congestion
        # congestion-fill congestion-extents csums-alg verify-alg
        # use-rle
        protocol C;
    }
}
</code></pre>

<p>设置资源文件</p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/r0.res
resource r0 {
    on drbd-01.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.234:7788;
        meta-disk       internal;
    }

    on drbd-02.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.235:7788;
        meta-disk       internal;
    }
}
</code></pre>

<hr />

<h3>设置权限</h3>

<pre><code>chgrp haclient /sbin/drbdsetup
chmod o-x /sbin/drbdsetup
chmod u+s /sbin/drbdsetup
chgrp haclient /sbin/drbdmeta
chmod o-x /sbin/drbdmeta
chmod u+s /sbin/drbdmeta
</code></pre>

<p>加载DRBD模块与建立resource</p>

<pre><code>modprobe drbd
lsmod | grep drbd
drbd                  328626  0
libcrc32c               1246  1 drbd
</code></pre>

<p>写入一些数据到/dev/sdb1</p>

<pre><code>dd if=/dev/zero of=/dev/sdb1 bs=1M count=100
</code></pre>

<p>建立Resource</p>

<pre><code>drbdadm create-md r0
Writing meta data...
initializing activity log
NOT initializing bitmap
New drbd meta data block successfully created.
success
</code></pre>

<h3>启动DRBD</h3>

<pre><code>/etc/init.d/drbd start
Starting DRBD resources: [
      create res: r0
    prepare disk: r0
     adjust disk: r0
     adjust net: r0
]
degr-wfc-timeout has to be shorter than wfc-timeout
degr-wfc-timeout implicitly set to wfc-timeout (60s)
..........
***************************************************************
DRBD's startup script waits for the peer node(s) to appear.
- In case this node was already a degraded cluster before the
reboot the timeout is 120 seconds. [degr-wfc-timeout]
- If the peer was available before the reboot the timeout will
expire after 60 seconds. [wfc-timeout]
(These values are for resource 'r0'; 0 sec -&amp;gt; wait forever)
To abort waiting enter 'yes' [  49]:yes

.
</code></pre>

<p>节点2按以上操作执行一次。</p>

<h3>DRBD状态查看</h3>

<ol>
<li><p>Secondary/Unknown：若drbd-01服务启动而drbd-02尚未启动,则ro会出现Secondary/Unknown</p>

<pre><code> /init.d/drbd status
 drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs        ro                 ds                 p   mounted
 fstype
 0:r0   WFConnection  Secondary/Unknown  Inconsistent/DUnknown  C
</code></pre>

<p>查看drbd</p>

<pre><code>  cat /proc/drbd
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre></li>
<li><p>Inconsistent/Inconsistent：ds出現Inconsistent表示兩台node資料尚未同步。</p>

<pre><code> drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs         ro                   ds                         p  mounted  
 fstype
 0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre>

<p>查看内核</p>

<pre><code>  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r-----
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre>

<p>3  SyncSource：cs出現SyncTarget表示正在同步中，可看到目前同步時的進度．</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs          ro                 ds                     p  mounted  
  fstype
  ...    sync'ed:    26.1%              (6056/8188)M
  0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>4  Secondary/Secondary：表示尚未設定Primary Node。</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs         ro                   ds                         p  mounted  
  fstype
  0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre></li>
</ol>


<h3>设置主节点(Primary Node)</h3>

<p>在drbd-01进行以下操作:</p>

<pre><code>drbdadm -- --overwrite-data-of-peer primary r0
</code></pre>

<p>再查看下状态:</p>

<pre><code>/etc/init.d/drbd status
drbd driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-01.i.12582.com, 2013-08-08 14:00:35
m:res  cs          ro                 ds                     p  mounted  fstype
...    sync'ed:    13.1%              (7124/8188)M
0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>在drbd-02查看下状态：</p>

<pre><code>driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-02.i.12582.com, 2013-08-08 14:16:07
m:res  cs         ro                 ds                 p  mounted  fstype
0:r0   Connected  Secondary/Primary  UpToDate/UpToDate  C
</code></pre>

<p>格式化（drbd-01）</p>

<pre><code>mkfs.ext4 /dev/drbd0
</code></pre>

<p>挂载到文件系统：</p>

<pre><code>mkdir /datamount /dev/drbd0 /data
</code></pre>

<h2>测试DRBD</h2>

<h3>测试同步</h3>

<ol>
<li><p>在主节点（Primary Node）复制一些数据到/data</p>

<pre><code> cp -r drbd-8.4.3 /data/
</code></pre></li>
<li><p>在次节点（Secondary Node）执行以下步骤：</p>

<pre><code> drbdadm down r0
</code></pre>

<p>注：次节点在DRBD启动状态下是无法mount /data的，所以必须先手动停止才能mount。</p>

<pre><code>  mkdir /datamount -t ext4 /dev/sdb1 /datals -l
</code></pre>

<p>就可以看到数据已经全部同步过来。</p></li>
</ol>


<h2>Heartbeat配置</h2>

<p>主节点操作：</p>

<pre><code>vim /etc/ha.d/ha.cf
debugfile /var/log/ha-debug   # 打开错误日志报告

keepalive 2    # 2秒检测一次心跳线连接
deadtime 10    # 10秒测试不到 主节点心跳线就认为有问题

warntime 6    # 警告时间（建议在2－10之间）

initdead 120   # 初始化启动时 120秒无连接视为正常，或指定heartbeat 在启动时，

# 需要等待120秒才去启动任何资源

udpport 694     # 用udp的694端口连接，netstat -antulp | grep 694

ucast eth0 192.168.30.235      # 单播方式连接（主、从都是写对方的IP连接）

node  drbd-01.i.12582.com  # 声明主节点（uname -n）

node  drbd-02.i.12582.com  # 声明次节点（uname -n）

auto_failback on                    # 自动切换（主节点恢复后会自动切换回来）

respawn hacluster /usr/lib64/heartbeat/ipfail  #监控ipfail进程是否挂掉，否则重启它
</code></pre>

<p>&nbsp;</p>

<p>vim /etc/ha.d/authkeysauth 11 sha1 MySecret&nbsp;</p>

<p>&nbsp;</p>

<p>chmod 600 /etc/ha.d/authkeys</p>

<p>&nbsp;</p>

<p>vim /etc/ha.d/haresourcesdrbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0 drbddisk::r0 Filesystem::/dev/drbd0::/data::ext4</p>

<p>&nbsp;</p>

<p>drbd-01.i.12582.com   主节点的主机名</p>

<p>IPaddr::192.168.30.229/24/eth0    设置虚拟IP</p>

<p>drbddisk::r0                  管理资源r0</p>

<p>Filesystem::/dev/drbd0::/data::ext4   执行umount和mount操作</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>次节点操作：</p>

<p>将ha.cf中的192.168.30.235改成192.168.30.234</p>

<p>&nbsp;</p>

<h3>DRBD主从自动切换测试</h3>

<p>1）    首先在 drbd-01启动heartbeat：</p>

<p>/etc/init.d/heartbeat  start</p>

<p>2）    接着在 drbd-02 启动heartbear:</p>

<p>/etc/init.d/heartbeat  start</p>

<p>&nbsp;</p>

<p>在drbd-01输入：</p>

<p>ip a</p>

<p>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN</p>

<p>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</p>

<p>inet 127.0.0.1/8 scope host lo</p>

<p>inet6 ::1/128 scope host</p>

<p>valid_lft forever preferred_lft forever</p>

<p>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</p>

<p>link/ether 08:00:27:98:a2:6c brd ff:ff:ff:ff:ff:ff</p>

<p>inet 192.168.30.234/24 brd 192.168.30.255 scope global eth0</p>

<p>inet <b>192.168.30.229</b>/24 brd 192.168.30.255 scope global secondary eth0:0</p>

<p>inet6 fe80::a00:27ff:fe98:a26c/64 scope link</p>

<p>valid_lft forever preferred_lft forever</p>

<p>从结果可以看出，VIP已经出现。</p>

<p>&nbsp;</p>

<p>3）    停止drbd-01的heartbeat服务或将网线断掉，同时监控drbd-02的DRBD状态，</p>

<p>drbd-02操作：</p>

<p>watch -n 1 /etc/init.d/drbd status</p>

<p>如果一切正常，可以看到状态在不断变化。</p>

<p>4）    恢复drbd-01的heartbeat服务或将网线接上，同时监控drbd-02的DRBD状态，如果正常drbd-01又变为主节点（auto_failback on 决定）了。</p>

<p>&nbsp;</p>

<h2>Mysql+DRBD+Heartbeat配置</h2>

<h3>Mysql安装</h3>

<p><b>安装Mysql</b><b>依赖包</b></p>

<p>yum -y install gcc gcc-c++ ncurses-devel libtool zlib-devel bison</p>

<p>&nbsp;</p>

<p><b>创建用户与组</b></p>

<p>groupadd mysqluseradd -g mysql mysql</p>

<p><b>设置内核参数</b></p>

<p>vi /etc/security/limits.confmysql              soft    nproc   2047mysql              hard    nproc   16384mysql              soft    nofile  1024</p>

<p>mysql              hard    nofile  65536</p>

<p>&nbsp;</p>

<p><b>安装Mysql</b></p>

<p>由于源码安装Mysql5.6需要依赖cmake，必须先安装cmake：</p>

<p>mkdir ~/software; cd ~/softwarewget <a href="ftp://192.168.30.211/pub/Tools/mysql/cmake-2.8.4.tar.gztar">ftp://192.168.30.211/pub/Tools/mysql/cmake-2.8.4.tar.gztar</a> zxvf cmake-2.8.4.tar.gzcd cmake-2.8.4</p>

<p>./configure</p>

<p>gmake &amp;&amp; make install</p>

<p>&nbsp;</p>

<p>开始安装Mysql</p>

<p>cd ~/softwarewget <a href="ftp://192.168.30.211/pub/Tools/mysql/mysql-5.6.5-m8.tar.gztar">ftp://192.168.30.211/pub/Tools/mysql/mysql-5.6.5-m8.tar.gztar</a> zxvf mysql-5.6.5-m8.tar.gzcd mysql-5.6.5-m8</p>

<p>cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</p>

<p>-DDEFAULT_CHARSET=utf8 \</p>

<p>-DDEFAULT_COLLATION=utf8_general_ci \</p>

<p>-DENABLED_LOCAL_INFILE=ON \</p>

<p>-DWITH_INNOBASE_STORAGE_ENGINE=1 \</p>

<p>-DWITH_FEDERATED_STORAGE_ENGINE=1 \</p>

<p>-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</p>

<p>-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \</p>

<p>-DWITH_PARTITION_STORAGE_ENGINE=1 \</p>

<p>-DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \</p>

<p>-DCOMPILATION_COMMENT=&lsquo;agenge for mysql&rsquo; \</p>

<p>-DWITH_READLINE=ON \</p>

<p>-DMYSQL_UNIX_ADDR=/data/mysqldata/3306/mysql.sock \</p>

<p>-DSYSCONFDIR=/data/mysqldata/3306</p>

<p>make &amp;&amp; make install</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h3>Mysql设置</h3>

<p>设置权限</p>

<p>chown -R mysql:mysql /usr/local/mysql</p>

<p>设置环境变量</p>

<p>vi /etc/profileexport PATH=/usr/local/mysql/bin:$PATH</p>

<p>使环境变量马上生效</p>

<p>source /etc/profile</p>

<p>设置相关存储路径</p>

<p>cd /datamkdir -p mysqldata/3306/{data,binlog,tmp,innodb_ts,innodb_log}cd /data/mysqldata/mkdir script backup</p>

<p>chown -R mysql:mysql /data/mysqldata/</p>

<p>&nbsp;</p>

<p>创建my.cnf</p>

<p>vi /data/mysqldata/3306/my.cnf[client]port = 3306socket = /data/mysqldata/3306/mysql.sock</p>

<p>&nbsp;</p>

<h1>Here follows entries for some specific programs</h1>

<p>&nbsp;</p>

<h1>The MySQL server</h1>

<p>[mysqld]</p>

<p>port     = 3306</p>

<p>user     = mysql</p>

<p>socket   = /data/mysqldata/3306/mysql.sock</p>

<p>pid-file = /tmp/mysql.pid</p>

<p>basedir  = /usr/local/mysql</p>

<p>datadir  = /data/mysqldata/3306/data</p>

<p>tmpdir   = /data/mysqldata/3306/tmp</p>

<p>open_files_limit    = 10240</p>

<p>server-id = 333306</p>

<p>lower_case_table_names = 1</p>

<p>character-set-server = utf8</p>

<p>skip-name-resolve</p>

<p>&nbsp;</p>

<p>max_connections = 1000</p>

<p>max_connect_errors = 100000</p>

<p>max_allowed_packet = 512M</p>

<p>max_heap_table_size = 1024M</p>

<p>max_length_for_sort_data = 4096</p>

<p>back_log=100</p>

<p>interactive_timeout = 28800</p>

<p>wait_timeout = 28800</p>

<p>&nbsp;</p>

<p>default-storage-engine = InnoDB</p>

<p>&nbsp;</p>

<p>net_buffer_length = 8K</p>

<p>sort_buffer_size = 2M</p>

<p>join_buffer_size = 4M</p>

<p>read_buffer_size = 2M</p>

<p>read_rnd_buffer_size = 16M</p>

<p>&nbsp;</p>

<p>query_cache_size = 128M</p>

<p>query_cache_limit = 2M</p>

<p>query_cache_min_res_unit = 2k</p>

<p>&nbsp;</p>

<p>thread_cache_size = 300</p>

<p>table_open_cache = 1024</p>

<p>tmp_table_size = 256M</p>

<p>&nbsp;</p>

<h1><strong><strong><strong><strong><strong><em>  Logs related settings </em></strong></strong></strong></strong></strong></h1>

<p>log-bin  = ../binlog/mysql-bin</p>

<p>relay-log = ../binlog/mysql-relay-bin</p>

<p>binlog_format=mixed</p>

<p>binlog_cache_size=32m</p>

<p>max_binlog_cache_size=512m</p>

<p>max_binlog_size=512m</p>

<p>long_query_time = 1</p>

<p>log_output = FILE</p>

<p>log-error =  ../mysql-error.log</p>

<p>slow_query_log = 1</p>

<p>slow_query_log_file = ../slow_statement.log</p>

<h1>log_queries_not_using_indexes</h1>

<p>general_log = 0</p>

<p>general_log_file = ../general_statement.log</p>

<p>expire-logs-days = 14</p>

<p>&nbsp;</p>

<h1><strong><strong><strong><strong><strong><em> MyISAM Specific options </em></strong></strong></strong></strong></strong></h1>

<p>key_buffer_size = 32M</p>

<p>bulk_insert_buffer_size = 64M</p>

<p>myisam_sort_buffer_size = 128M</p>

<p>myisam_max_sort_file_size = 10G</p>

<p>myisam_repair_threads = 1</p>

<p>myisam_recover</p>

<p>&nbsp;</p>

<h1><strong><strong><strong><strong><strong><em> INNODB Specific options </em></strong></strong></strong></strong></strong></h1>

<p>innodb_file_per_table = 1</p>

<p>transaction-isolation = READ-COMMITTED</p>

<p>&nbsp;</p>

<p>innodb_additional_mem_pool_size = 16M</p>

<p>innodb_buffer_pool_size = 1192M</p>

<p>innodb_data_home_dir = ../innodb_ts</p>

<p>innodb_data_file_path = ibdata1:2048M:autoextend</p>

<p>&nbsp;</p>

<p>innodb_file_io_threads = 4</p>

<p>innodb_thread_concurrency = 8</p>

<p>innodb_log_buffer_size = 128M</p>

<p>innodb_log_file_size = 256M</p>

<p>innodb_log_files_in_group = 3</p>

<p>&nbsp;</p>

<p>innodb_log_group_home_dir = ../innodb_log</p>

<p>innodb_flush_log_at_trx_commit = 2</p>

<p>innodb_max_dirty_pages_pct = 80</p>

<p>innodb_lock_wait_timeout = 120</p>

<p>innodb_flush_method=O_DIRECT</p>

<p>performance_schema</p>

<p>&nbsp;</p>

<p>[mysqldump]</p>

<p>quick</p>

<p>max_allowed_packet = 512M</p>

<p>&nbsp;</p>

<p>[mysql]</p>

<p>no-auto-rehash</p>

<h1>Remove the next comment character if you are not familiar with SQL</h1>

<h1>safe-updates</h1>

<p>&nbsp;</p>

<p>[myisamchk]</p>

<p>key_buffer_size = 32M</p>

<p>sort_buffer_size = 20M</p>

<p>read_buffer_size = 2M</p>

<p>write_buffer_size = 2M</p>

<p>&nbsp;</p>

<p>[mysqlhotcopy]</p>

<p>interactive-timeout</p>

<p>&nbsp;</p>

<p>[mysqld_safe]</p>

<p>open-files-limit = 8192</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>安装mysql database，并启动Myql：</p>

<p>/usr/local/mysql/scripts/mysql_install_db \</p>

<p>&mdash;datadir=/data/mysqldata/3306/data \</p>

<p>&mdash;defaults-file=/data/mysqldata/3306/my.cnf \</p>

<p>&mdash;basedir=/usr/local/mysql &mdash;user=mysql</p>

<p>mysqld_safe &mdash;defaults-file=/data/mysqldata/3306/my.cnf &amp;</p>

<p>mysqladmin -uroot password &lsquo;new_password&rsquo; -S /data/mysqldata/3306/mysql.sock</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>mysql -uroot -p123456</p>

<p>mysql&gt; select user,host from mysql.user;</p>

<p>mysql&gt; delete from mysql.user where (user,host) not in (select &lsquo;root&rsquo;,&lsquo;localhost&rsquo;);</p>

<p>mysql&gt; delete from mysql.proxies_priv where host=&lsquo;localhost.localdomain&rsquo;;</p>

<p>mysql&gt; delete from mysql.db;</p>

<p>mysql&gt; flush privileges;</p>

<p>mysql&gt; quit</p>

<p>mysqladmin -uroot -p123456 shutdownrm -f /data/mysqldata/3306/mysql-error.logmysqld_safe &mdash;defaults-file=/data/mysqldata/3306/my.cnf &amp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>启动Mysql脚本</p>

<p>cp support-files/mysql.server  /etc/init.d/mysqldchmod +x /etc/init.d/mysqld</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>修改ha.cf</p>

<p>由于现在是管理Mysql，故要将mysqld由heartbeat管理（2个节点都执行）</p>

<p>cat /etc/ha.d/haresourcesdrbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0:0  drbddisk::r0 Filesystem::/dev/drbd0::/data::ext4 mysqld</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>测试</p>

<p>1）  准备Mysql数据（节点1操作）</p>

<p>mysql -uroot -pEnter password:Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2</p>

<p>Server version: 5.6.5-m8-log agenge for mysql</p>

<p>&nbsp;</p>

<p>Copyright &copy; 2000, 2012, Oracle and/or its affiliates. All rights reserved.</p>

<p>&nbsp;</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its</p>

<p>affiliates. Other names may be trademarks of their respective</p>

<p>owners.</p>

<p>&nbsp;</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>&nbsp;</p>

<p>mysql&gt; create database mydb;</p>

<p>Query OK, 1 row affected (0.02 sec)</p>

<p>&nbsp;</p>

<p>mysql&gt; use mydb;</p>

<p>Database changed</p>

<p>mysql&gt; create table t_1( id  int not null, name varchar(10));</p>

<p>Query OK, 0 rows affected (0.14 sec)</p>

<p>mysql&gt; insert into t_1 values(1,&lsquo;aaa&rsquo;);</p>

<p>Query OK, 1 row affected (0.00 sec)</p>

<p>&nbsp;</p>

<p>mysql&gt; commit;</p>

<p>Query OK, 0 rows affected (0.00 sec)</p>

<p>mysql&gt; quit;</p>

<p>Bye</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>2）  切换主、次节点，同时监控drbd-02服务器的日志</p>

<p>watch -n 1 /etc/init.d/drbd status</p>

<p>如果一切正常，可以看到ro的状态从“Secondary/Primary”变成“Primary/Secondary”。</p>

<p>例如偶切换成的状态如下：</p>

<p>drbd driver loaded OK; device status:</p>

<p>version: 8.4.3 (api:1/proto:86-101)</p>

<p>GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by root@<b>drbd-02.i.12582.com</b>, 2013-08-08 16:46:23</p>

<p>m:res  cs         ro                 ds                 p  mounted  fstype</p>

<p>0:r0   Connected  <b>Primary/Secondary</b>  UpToDate/UpToDate  C  /data    ext4</p>

<p>3）  查询数据是否丢失（drbd-02操作）</p>

<p>mysql -uroot -p</p>

<p>Enter password:</p>

<p>Welcome to the MySQL monitor.  Commands end with ; or \g.</p>

<p>Your MySQL connection id is 2</p>

<p>Server version: 5.6.5-m8-log agenge for mysql</p>

<p>&nbsp;</p>

<p>Copyright &copy; 2000, 2012, Oracle and/or its affiliates. All rights reserved.</p>

<p>&nbsp;</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its</p>

<p>affiliates. Other names may be trademarks of their respective</p>

<p>owners.</p>

<p>&nbsp;</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>&nbsp;</p>

<p>mysql&gt; use mydb;</p>

<p>Database changed</p>

<p>mysql&gt; select * from t_1;</p>

<p>+&mdash;&mdash;+&mdash;&mdash;&mdash;+</p>

<p>| id | name |</p>

<p>+&mdash;&mdash;+&mdash;&mdash;&mdash;+</p>

<p>|  1 | aaa  |</p>

<p>+&mdash;&mdash;+&mdash;&mdash;&mdash;+</p>

<p>1 row in set (0.00 sec)</p>

<h2>从结果可以看到在drbd-02上数据已经有了。</h2>

<p>layout: post
title: DRBD+Heartbeat+Mysql高可用配置
categories:
&ndash; 运维
tags:
&ndash; drbd
&ndash; heartbeat
&ndash; mysql
&ndash; 集群
&ndash; 高可用
published: true</p>

<h2>comments: true</h2>

<h2>介绍</h2>

<p>DRBD全称Distributed Replicated Block （分布式的复制块设备），属于Device公司，但是完全开源。它是一款基于块设备的文件复制解决方案，速度比文件级别的软件如NFS，samba快很多，是很多中小企业的共享存储首选解决方案。</p>

<p>DRBD工作需要在两个节点上同时准备一块一模一样的分区组成镜像，这就是为什么它叫做分布式复制块设备，它主要通过复制数据来实现文件同步（备份），主要用于集群文件共享， 我们通过它的工作原理来了解块复制和文件复制的不同。</p>

<p>首先，您需要知道，DRBD是工作在系统内核空间，而不是用户空间，它直接复制的是二进制数据，这是它速度快的根本原因。其次，DRBD至少需要两个节点来工作，一主一次。</p>

<p>DRBD的文件同步过程和普通复制过程的不同：</p>

<p>DRBD在数据进入Buffer Cache时，先经过DRBD这一层，复制一份数据经过TCP/IP协议封装，发送到另一个节点上，另一个节点通过TCP/IP协议来接受复制过来的数据，同步到次节点的DRBD设备上。</p>

<!--more-->


<h2>准备工作</h2>

<p>1  准备至少2台服务器，且每台服务器有一块磁盘或一个单独未使用的分区，偶的环境如下：</p>

<p>主节点(Primary Node)
次节点(Secondary Node)
主机名
drbd-01.i.12582.com
drbd-02.i.12582.com
操作系统
CentOS 6.3 x86_64位
CentOS 6.3 x86_64位
硬盘分区
/dev/sdb  8G
/dev/sdb  8G
IP地址
192.168.30.234
192.168.30.235</p>

<p>注意：如果有服务器有2块或以上网卡的同学，建议将其中一块网卡专门用来做网络心跳线，甚至接入另外一台单独的交换机，本次环境只有单网卡。</p>

<h2>初始化设置</h2>

<p>1  所有节点关闭iptables和SELinux</p>

<p>2  在所有节点/etc/hosts加入以下内容：</p>

<pre><code>192.168.30.234  drbd-01.i.12582.com drbd-01
192.168.30.235  drbd-02.i.12582.com drbd-02
</code></pre>

<p>3  所有节点创建独立分区：</p>

<pre><code>fdisk /dev/sdbDevice contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x46b64833.Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.
Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)
WARNING: DOS-compatible mode is deprecated. It's strongly recommended to
switch off the mode (command 'c') and change display units to
sectors (command 'u').

Command (m for help): p
Disk /dev/sdb: 8589 MB, 8589934592 bytes
255 heads, 63 sectors/track, 1044 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x46b64833

Device Boot    Start        End        Blocks    Id    System

Command (m for help): n
Command action
e   extended
p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-1044, default 1):
Using default value 1
Last cylinder, +cylinders or +size{K,M,G} (1-1044, default 1044):
Using default value 1044

Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.
</code></pre>

<h2>安装Hearbeat</h2>

<pre><code>wget ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm
rpm -ivUh epel-release-6-5.noarch.rpm
yum --enablerepo=epel install heartbeat -y
</code></pre>

<h2>安装DRBD</h2>

<p>1  安装依赖包</p>

<pre><code>yum -y install gcc kernel-devel kernel-headers flex
</code></pre>

<p>2  安装DRBD</p>

<pre><code>wget http://oss.linbit.com/drbd/8.4/drbd-8.4.3.tar.gz
tar zxvf drbd-8.4.3.tar.gz
cd drbd-8.4.3
./configure --prefix=/usr/local/drbd --with-km --with-heartbeat
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
make install
cp -R /usr/local/drbd/etc/ha.d/resource.d/drbd* /etc/ha.d/resource.d/
</code></pre>

<p>3  其他设置</p>

<pre><code>mkdir -p /usr/local/drbd/var/run/drbd
cp /usr/local/drbd/etc/rc.d/init.d/drbd /etc/rc.d/init.d/
chkconfig --add drbdchkconfig drbd on
</code></pre>

<h2>安装DRBD模块</h2>

<pre><code>cd drbdmake 
clean
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
cp drbd.ko /lib/modules/`uname -r`/kernel/lib/
depmod
</code></pre>

<p>以上操作请在所有节点操作一次。</p>

<hr />

<h2>设置DRBD</h2>

<p><strong>配置drbd.conf</strong></p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/global_common.conf
global {
    minor-count 64;
    usage-count yes;
    # minor-count dialog-refresh disable-ip-verification
}


common {
    syncer { rate 1000M; }
    handlers {
        # These are EXAMPLE handlers only.
        # They may have severe implications,
        # like hard resetting the node under certain circumstances.
        # Be careful when chosing your poison.

        pri-on-incon-degr "/usr/lib/drbd/notify-pri-on-incon-degr.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        pri-lost-after-sb "/usr/lib/drbd/notify-pri-lost-after-sb.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        local-io-error "/usr/lib/drbd/notify-io-error.sh; /usr/lib/drbd/notify-emergency-shutdown.sh; echo o &amp;gt; /proc/sysrq-trigger ; halt -f";
        fence-peer "/usr/lib/drbd/crm-fence-peer.sh";
        pri-lost "/usr/local/drbd/lib/drbd/notify-pri-lost.sh; /usr/local/drbd/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt;/proc/sysrq-trigger ; reboot -f";
        split-brain "/usr/lib/drbd/notify-split-brain.sh root";
        out-of-sync "/usr/lib/drbd/notify-out-of-sync.sh root";
        # before-resync-target "/usr/lib/drbd/snapshot-resync-target-lvm.sh -p 15 -- -c 16k";
        # after-resync-target /usr/lib/drbd/unsnapshot-resync-target-lvm.sh;
    }

    startup {

        # wfc-timeout degr-wfc-timeout outdated-wfc-timeout wait-after-sb
        wfc-timeout 60;
        degr-wfc-timeout 120;
        outdated-wfc-timeout 2;
    }

    options {
        # cpu-mask on-no-data-accessible
        }

    disk {
        # size max-bio-bvecs on-io-error fencing disk-barrier disk-flushes
        # disk-drain md-flushes resync-rate resync-after al-extents
        # c-plan-ahead c-delay-target c-fill-target c-max-rate
        # c-min-rate disk-timeout
        on-io-error detach;
        fencing resource-only;
    }

    net {
        # protocol timeout max-epoch-size max-buffers unplug-watermark
        # connect-int ping-int sndbuf-size rcvbuf-size ko-count
        # allow-two-primaries cram-hmac-alg shared-secret after-sb-0pri
        # after-sb-1pri after-sb-2pri always-asbp rr-conflict
        # ping-timeout data-integrity-alg tcp-cork on-congestion
        # congestion-fill congestion-extents csums-alg verify-alg
        # use-rle
        protocol C;
    }
}
</code></pre>

<p>设置资源文件</p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/r0.res
resource r0 {
    on drbd-01.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.234:7788;
        meta-disk       internal;
    }

    on drbd-02.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.235:7788;
        meta-disk       internal;
    }
}
</code></pre>

<hr />

<h3>设置权限</h3>

<pre><code>chgrp haclient /sbin/drbdsetup
chmod o-x /sbin/drbdsetup
chmod u+s /sbin/drbdsetup
chgrp haclient /sbin/drbdmeta
chmod o-x /sbin/drbdmeta
chmod u+s /sbin/drbdmeta
</code></pre>

<p>加载DRBD模块与建立resource</p>

<pre><code>modprobe drbd
lsmod | grep drbd
drbd                  328626  0
libcrc32c               1246  1 drbd
</code></pre>

<p>写入一些数据到/dev/sdb1</p>

<pre><code>dd if=/dev/zero of=/dev/sdb1 bs=1M count=100
</code></pre>

<p>建立Resource</p>

<pre><code>drbdadm create-md r0
Writing meta data...
initializing activity log
NOT initializing bitmap
New drbd meta data block successfully created.
success
</code></pre>

<h3>启动DRBD</h3>

<pre><code>/etc/init.d/drbd start
Starting DRBD resources: [
      create res: r0
    prepare disk: r0
     adjust disk: r0
     adjust net: r0
]
degr-wfc-timeout has to be shorter than wfc-timeout
degr-wfc-timeout implicitly set to wfc-timeout (60s)
..........
***************************************************************
DRBD's startup script waits for the peer node(s) to appear.
- In case this node was already a degraded cluster before the
reboot the timeout is 120 seconds. [degr-wfc-timeout]
- If the peer was available before the reboot the timeout will
expire after 60 seconds. [wfc-timeout]
(These values are for resource 'r0'; 0 sec -&amp;gt; wait forever)
To abort waiting enter 'yes' [  49]:yes

.
</code></pre>

<p>节点2按以上操作执行一次。</p>

<h3>DRBD状态查看</h3>

<ol>
<li><p>Secondary/Unknown：若drbd-01服务启动而drbd-02尚未启动,则ro会出现Secondary/Unknown</p>

<pre><code> /init.d/drbd status
 drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs        ro                 ds                 p   mounted
 fstype
 0:r0   WFConnection  Secondary/Unknown  Inconsistent/DUnknown  C
</code></pre>

<p>查看drbd</p>

<pre><code>  cat /proc/drbd
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre></li>
<li><p>Inconsistent/Inconsistent：ds出現Inconsistent表示兩台node資料尚未同步。</p>

<pre><code> drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs         ro                   ds                         p  mounted  
 fstype
 0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre>

<p>查看内核</p>

<pre><code>  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r-----
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre>

<p>3  SyncSource：cs出現SyncTarget表示正在同步中，可看到目前同步時的進度．</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs          ro                 ds                     p  mounted  
  fstype
  ...    sync'ed:    26.1%              (6056/8188)M
  0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>4  Secondary/Secondary：表示尚未設定Primary Node。</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs         ro                   ds                         p  mounted  
  fstype
  0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre></li>
</ol>


<h3>设置主节点(Primary Node)</h3>

<p>在drbd-01进行以下操作:</p>

<pre><code>drbdadm -- --overwrite-data-of-peer primary r0
</code></pre>

<p>再查看下状态:</p>

<pre><code>/etc/init.d/drbd status
drbd driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-01.i.12582.com, 2013-08-08 14:00:35
m:res  cs          ro                 ds                     p  mounted  fstype
...    sync'ed:    13.1%              (7124/8188)M
0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>在drbd-02查看下状态：</p>

<pre><code>driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-02.i.12582.com, 2013-08-08 14:16:07
m:res  cs         ro                 ds                 p  mounted  fstype
0:r0   Connected  Secondary/Primary  UpToDate/UpToDate  C
</code></pre>

<p>格式化（drbd-01）</p>

<pre><code>mkfs.ext4 /dev/drbd0
</code></pre>

<p>挂载到文件系统：</p>

<pre><code>mkdir /datamount /dev/drbd0 /data
</code></pre>

<h2>测试DRBD</h2>

<h3>测试同步</h3>

<ol>
<li><p>在主节点（Primary Node）复制一些数据到/data</p>

<pre><code> cp -r drbd-8.4.3 /data/
</code></pre></li>
<li><p>在次节点（Secondary Node）执行以下步骤：</p>

<pre><code> drbdadm down r0
</code></pre>

<p>注：次节点在DRBD启动状态下是无法mount /data的，所以必须先手动停止才能mount。</p>

<pre><code>  mkdir /datamount -t ext4 /dev/sdb1 /datals -l
</code></pre>

<p>就可以看到数据已经全部同步过来。</p></li>
</ol>


<h2>Heartbeat配置</h2>

<ol>
<li><p>主节点操作：</p>

<pre><code> vim /etc/ha.d/ha.cf
 debugfile /var/log/ha-debug   # 打开错误日志报告

 keepalive 2    # 2秒检测一次心跳线连接
 deadtime 10    # 10秒测试不到 主节点心跳线就认为有问题
 warntime 6    # 警告时间（建议在2－10之间）
 initdead 120   # 初始化启动时 120秒无连接视为正常，或指定heartbeat 在启动时，
 # 需要等待120秒才去启动任何资源

 udpport 694     # 用udp的694端口连接，netstat -antulp | grep 694
 ucast eth0 192.168.30.235      # 单播方式连接（主、从都是写对方的IP连接）
 node  drbd-01.i.12582.com  # 声明主节点（uname -n）
 node  drbd-02.i.12582.com  # 声明次节点（uname -n）
 auto_failback on                    # 自动切换（主节点恢复后会自动切换回来）
 respawn hacluster /usr/lib64/heartbeat/ipfail  #监控ipfail进程是否挂掉，否则重启它
</code></pre></li>
<li><p>编辑认证文件</p>

<pre><code> vim /etc/ha.d/authkeys
 auth 1
 1 sha1 MySecret&amp;nbsp;
</code></pre></li>
<li><p>权限</p>

<pre><code> chmod 600 /etc/ha.d/authkeys
</code></pre></li>
<li><p>编辑资源文件</p>

<pre><code> vim /etc/ha.d/haresources
 drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0 drbddisk::r0 
 Filesystem::/dev/drbd0::/data::ext4
</code></pre>

<p> drbd-01.i.12582.com   主节点的主机名</p>

<p> IPaddr::192.168.30.229/24/eth0    设置虚拟IP</p>

<p> drbddisk::r0                  管理资源r0</p>

<p> Filesystem::/dev/drbd0::/data::ext4   执行umount和mount操作</p></li>
<li><p>次节点操作：</p>

<p> 将ha.cf中的192.168.30.235改成192.168.30.234</p></li>
</ol>


<h3>DRBD主从自动切换测试</h3>

<ol>
<li><p>首先在 drbd-01启动heartbeat：</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>接着在 drbd-02 启动heartbear:</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>在drbd-01输入：</p>

<pre><code> ip a

 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 16436 qdisc noqueue state UNKNOWN
     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
     inet 127.0.0.1/8 scope host lo
     inet6 ::1/128 scope host
         valid_lft forever preferred_lft forever
 2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
     link/ether 08:00:27:98:a2:6c brd ff:ff:ff:ff:ff:ff
     inet 192.168.30.234/24 brd 192.168.30.255 scope global eth0
     inet &lt;b&gt;192.168.30.229&lt;/b&gt;/24 brd 192.168.30.255 scope global secondary eth0:0
     inet6 fe80::a00:27ff:fe98:a26c/64 scope link
         valid_lft forever preferred_lft forever
</code></pre>

<p>从结果可以看出，VIP已经出现。</p></li>
<li><p>停止drbd-01的heartbeat服务或将网线断掉，同时监控drbd-02的DRBD状态.</p></li>
<li><p>drbd-02操作：</p>

<pre><code> watch -n 1 /etc/init.d/drbd status
</code></pre>

<p>如果一切正常，可以看到状态在不断变化。</p></li>
<li><p>恢复drbd-01的heartbeat服务或将网线接上，同时监控drbd-02的DRBD状态，如果正常drbd-01又变为主节点（auto_failback on 决定）了。</p></li>
</ol>


<h2>Mysql+DRBD+Heartbeat配置</h2>

<h3>Mysql安装</h3>

<p><strong>安装Mysql依赖包</strong></p>

<pre><code>yum -y install gcc gcc-c++ ncurses-devel libtool zlib-devel bison
</code></pre>

<p><b>创建用户与组</b></p>

<pre><code>groupadd mysqluseradd -g mysql mysql
</code></pre>

<p><b>设置内核参数</b></p>

<pre><code>vi /etc/security/limits.conf
mysql              soft    nproc   2047
mysql              hard    nproc   16384
mysql              soft    nofile  1024
mysql              hard    nofile  65536
</code></pre>

<p><b>安装Mysql</b></p>

<p>由于源码安装Mysql5.6需要依赖cmake，必须先安装cmake：</p>

<pre><code>mkdir ~/software; cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/cmake-2.8.4.tar.gz
tar zxvf cmake-2.8.4.tar.gz
cd cmake-2.8.4
./configure
gmake &amp;&amp;  make install
</code></pre>

<p>开始安装Mysql</p>

<pre><code>cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/mysql-5.6.5-m8.tar.gz
tar zxvf mysql-5.6.5-m8.tar.gz
cd mysql-5.6.5-m8

cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
  -DDEFAULT_CHARSET=utf8 \
  -DDEFAULT_COLLATION=utf8_general_ci \
  -DENABLED_LOCAL_INFILE=ON \
  -DWITH_INNOBASE_STORAGE_ENGINE=1 \
  -DWITH_FEDERATED_STORAGE_ENGINE=1 \
  -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
  -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
  -DWITH_PARTITION_STORAGE_ENGINE=1 \
  -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \
  -DCOMPILATION_COMMENT='agenge for mysql' \
  -DWITH_READLINE=ON \
  -DMYSQL_UNIX_ADDR=/data/mysqldata/3306/mysql.sock \
  -DSYSCONFDIR=/data/mysqldata/3306
  make &amp;&amp; make install
</code></pre>

<h3>Mysql设置</h3>

<ul>
<li><p>设置权限</p>

<pre><code>  chown -R mysql:mysql /usr/local/mysql
</code></pre></li>
<li><p>设置环境变量</p>

<pre><code>  vi /etc/profileexport PATH=/usr/local/mysql/bin:$PATH
</code></pre></li>
<li><p>使环境变量马上生效</p>

<pre><code>  source /etc/profile
</code></pre></li>
<li><p>设置相关存储路径</p>

<pre><code>  cd /data
  mkdir -p mysqldata/3306/{data,binlog,tmp,innodb_ts,innodb_log}
  cd /data/mysqldata/mkdir script backup
  chown -R mysql:mysql /data/mysqldata/
</code></pre></li>
<li><p>创建my.cnf</p>

<pre><code>  vi /data/mysqldata/3306/my.cnf
  [client]
  port = 3306
  socket = /data/mysqldata/3306/mysql.sock

  # Here follows entries for some specific programs

  # The MySQL server
  [mysqld]
  port     = 3306
  user     = mysql
  socket   = /data/mysqldata/3306/mysql.sock
  pid-file = /tmp/mysql.pid
  basedir  = /usr/local/mysql
  datadir  = /data/mysqldata/3306/data
  tmpdir   = /data/mysqldata/3306/tmp
  open_files_limit    = 10240
  server-id = 333306
  lower_case_table_names = 1
  character-set-server = utf8
  skip-name-resolve
  max_connections = 1000
  max_connect_errors = 100000
  max_allowed_packet = 512M
  max_heap_table_size = 1024M
  max_length_for_sort_data = 4096
  back_log=100
  interactive_timeout = 28800
  wait_timeout = 28800

  default-storage-engine = InnoDB

  net_buffer_length = 8K
  sort_buffer_size = 2M
  join_buffer_size = 4M
  read_buffer_size = 2M
  read_rnd_buffer_size = 16M

  query_cache_size = 128M
  query_cache_limit = 2M
  query_cache_min_res_unit = 2k

  thread_cache_size = 300
  table_open_cache = 1024
  tmp_table_size = 256M

  #***********  Logs related settings ***********
  log-bin  = ../binlog/mysql-bin
  relay-log = ../binlog/mysql-relay-bin
  binlog_format=mixed
  binlog_cache_size=32m
  max_binlog_cache_size=512m
  max_binlog_size=512m
  long_query_time = 1
  log_output = FILE
  log-error =  ../mysql-error.log
  slow_query_log = 1
  slow_query_log_file = ../slow_statement.log
  #log_queries_not_using_indexes
  general_log = 0
  general_log_file = ../general_statement.log
  expire-logs-days = 14

  #*********** MyISAM Specific options ***********
  key_buffer_size = 32M
  bulk_insert_buffer_size = 64M
  myisam_sort_buffer_size = 128M
  myisam_max_sort_file_size = 10G
  myisam_repair_threads = 1
  myisam_recover

  #*********** INNODB Specific options ***********
  innodb_file_per_table = 1
  transaction-isolation = READ-COMMITTED

  innodb_additional_mem_pool_size = 16M
  innodb_buffer_pool_size = 1192M
  innodb_data_home_dir = ../innodb_ts
  innodb_data_file_path = ibdata1:2048M:autoextend

  innodb_file_io_threads = 4
  innodb_thread_concurrency = 8
  innodb_log_buffer_size = 128M
  innodb_log_file_size = 256M
  innodb_log_files_in_group = 3

  innodb_log_group_home_dir = ../innodb_log
  innodb_flush_log_at_trx_commit = 2
  innodb_max_dirty_pages_pct = 80
  innodb_lock_wait_timeout = 120
  innodb_flush_method=O_DIRECT
  performance_schema

  [mysqldump]
  quick
  max_allowed_packet = 512M

  [mysql]
  no-auto-rehash
  # Remove the next comment character if you are not familiar with SQL
  #safe-updates

  [myisamchk]
  key_buffer_size = 32M
  sort_buffer_size = 20M
  read_buffer_size = 2M
  write_buffer_size = 2M

  [mysqlhotcopy]
  interactive-timeout

  [mysqld_safe]
  open-files-limit = 8192
</code></pre></li>
<li><p>安装mysql database，并启动Myql：</p>

<pre><code>  /usr/local/mysql/scripts/mysql_install_db \
    --datadir=/data/mysqldata/3306/data \
    --defaults-file=/data/mysqldata/3306/my.cnf \
    --basedir=/usr/local/mysql --user=mysql
  mysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
  mysqladmin -uroot password 'new_password' -S /data/mysqldata/3306/mysql.sock

  mysql -uroot -p123456
  mysql&gt; select user,host from mysql.user;
  mysql&gt; delete from mysql.user where (user,host) not in (select 'root','localhost');
  mysql&gt; delete from mysql.proxies_priv where host='localhost.localdomain';
  mysql&gt; delete from mysql.db;
  mysql&gt; flush privileges;
  mysql&gt; quit
  mysqladmin -uroot -p123456 shutdownrm -f /data/mysqldata/3306/mysql-error.logmysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
</code></pre></li>
<li><p>启动Mysql脚本</p>

<pre><code>  cp support-files/mysql.server  /etc/init.d/mysqld
  chmod +x /etc/init.d/mysqld
</code></pre></li>
<li><p>修改ha.cf</p></li>
</ul>


<p> 由于现在是管理Mysql，故要将mysqld由heartbeat管理（2个节点都执行）</p>

<pre><code>    cat /etc/ha.d/haresources
    drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0:0  drbddisk::r0 
    Filesystem::/dev/drbd0::/data::ext4 mysqld
</code></pre>

<ul>
<li><p>测试</p>

<ol>
<li><p> 准备Mysql数据（节点1操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; create database mydb;
  Query OK, 1 row affected (0.02 sec)

  mysql&gt; use mydb;
  Database changed
  mysql&gt; create table t_1( id  int not null, name varchar(10));
  Query OK, 0 rows affected (0.14 sec)
  mysql&gt; insert into t_1 values(1,'aaa');
  Query OK, 1 row affected (0.00 sec)

  mysql&gt; commit;
  Query OK, 0 rows affected (0.00 sec)
  mysql&gt; quit;
  Bye
</code></pre></li>
<li><p> 切换主、次节点，同时监控drbd-02服务器的日志</p>

<pre><code>  watch -n 1 /etc/init.d/drbd status
</code></pre></li>
</ol>


<p>  如果一切正常，可以看到ro的状态从“Secondary/Primary”变成“Primary/Secondary”。</p>

<p>  例如偶切换成的状态如下：</p>

<pre><code>      drbd driver loaded OK; device status:
      version: 8.4.3 (api:1/proto:86-101)
      GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by root@&lt;b&gt;drbd-02.i.12582.com&lt;/b&gt;, 2013-08-08 16:46:23
      m:res  cs         ro                 ds                 p  mounted  fstype
      0:r0   Connected  &lt;b&gt;Primary/Secondary&lt;/b&gt;  UpToDate/UpToDate  C  /data    ext4
</code></pre>

<ol>
<li><p> 查询数据是否丢失（drbd-02操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; use mydb;
  Database changed
  mysql&gt; select * from t_1;
  +----+------+
  | id | name |
  +----+------+
  |  1 | aaa  |
  +----+------+
  1 row in set (0.00 sec)
</code></pre></li>
</ol>


<p>  以看到在drbd-02上数据已经有了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量装机---Linux无人值守之Kickstart]]></title>
    <link href="http://agenge.github.io/blog/2013/05/23/linux-kickstart/"/>
    <updated>2013-05-23T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/23/linux-kickstart</id>
    <content type="html"><![CDATA[<p>前段时间总是忙于安装系统，对于偶这种懒人来说，一天安装两遍都无法承受，别说更多，基本上有两个原因造出：</p>

<ul>
<li>时间很宝贵。</li>
<li>偶比较懒惰。</li>
</ul>


<p>一直习惯于 RedHat 家族产品，从最开始接触的RHEL，到后来同时使用的Fedora，及目前使用最多的CentOS，这无疑是偶最为熟悉的Linux，为啥偶要提这些捏？因为以下操作是基于这些Linux操作的啦，费话在此打住，以下为详细操作步骤.</p>

<h2>安装基础包</h2>

<p>_注：以下Yum操作是基于偶本地的ftp 仓库源，&mdash;enablerepo是告诉yum使用这个指定的安装源，
默认情况下，CentOS自带的仓库源也是可以用滴，优先推荐各位使用哦，有个前提条件：连网！
What？服务器不能上网？公司不许随意连公网？能说脏话吗？Fuck! _
<code>
yum -y install dhcp-* --enablerepo=centos5.5
yum -y install tftp-* --enablerepo=centos5.5
yum -y install vsftpd-* --enablerepo=centos5.5
cp /usr/share/doc/dhcp-3.0.5/dhcpd.conf.sample /etc/dhcpd.conf
</code></p>

<h2>配置dhcp</h2>

<!-- more -->


<pre><code>vi /etc/dhcpd.conf
</code></pre>

<p>添加以下信息：
<code>
filename "pxelinux.0";     # 指定bootloader文件
next-server 192.168.0.20;  # 指定索取pxelinux.0的tftp服务器IP
</code>
添加的这两行可在大括号外面，也可在里面，next-server选项可写可不写，但建议各位写上啦。
<code>
service dhcpd start   # 启动服务
cd /tftpboot
cp /mnt/isolinux/* ./
</code>
实际需要的是vmlinuz，initrd.img  *.msg 这几个文件，但为了操作方便，偶直接把isolinux目录下的文件全cp过来（偶在文章开头就说过偶比较懒惰，换成生产环境千万别这样玩）。</p>

<p><code>
mkdir pxelinux.cfg
mv isolinux.cfg pxelinux.cfg/default
cp /usr/lib/syslinux/pxelinux.0 /tftpboot
</code>
default配置文件的作用是告诉主机从哪里去加载操作系统内核，并将启动加载文件拷到/tftpboot下。修改tftp参数并启动tftp服务
```
vi /etc/xinetd.d/tftp</p>

<h1>*********************************</h1>

<p>service tftp
{</p>

<pre><code>socket_type = dgram
protocol = udp
wait = yes
user = root
server = /usr/sbin/in.tftpd
server_args = -s /tftpboot
disable = &lt;span style="color: #ff0000;"&gt;&lt;strong&gt;no&lt;/strong&gt;&lt;/span&gt;
per_source = 11
cps = 100 2
flags = IPv4
</code></pre>

<p>}</p>

<h1>*********************************</h1>

<p><code>
tftpboot 这个参数主要是指定tftp client 客户端从服务器的哪个目录去加载bootloader的pxelinux.0文件。启动服务：
</code>
service xinetd restart
chkconfig tftp on
vi /tftpboot/pxelinux.cfg/default
<code>
修改第3行，第12行.
</code>
default linux
prompt 1
timeout 10 //时间调小点
display boot.msg
F1 boot.msg
F2 options.msg
F3 general.msg
F4 param.msg
F5 rescue.msg
label linux
kernel vmlinuz
append ks=<a href="ftp://192.168.0.20/pub/ks.cfg">ftp://192.168.0.20/pub/ks.cfg</a> initrd=initrd.img
label text
```</p>

<h2>安装Kickstart</h2>

<p><code>
yum install -y *kickstart* --enablerepo=centos5.5
system-config-kickstart
</code>
_提示：所有以system-config开头的命令，都需要图形界面的支持。这不是必须的，前提是对ks的配置文件语法很熟悉啦。 _</p>

<h3>配置ks.cfg</h3>

<p>首先将 ks.cfg 保存到 /var/ftp/pub 目录下，将修改相应权限：</p>

<pre><code>chmod 707 /var/ftp/pub/ks.cfg
</code></pre>

<p>以下是偶使用的ks.cfg全文 ，请各位根据自己情况修改：</p>

<p>```</p>

<h1>platform=x86, AMD64, or Intel EM64T</h1>

<h1>System authorization information</h1>

<p>auth &mdash;useshadow &mdash;enablemd5</p>

<h1>System bootloader configuration</h1>

<p>bootloader &mdash;location=mbr</p>

<h1>Partition clearing information</h1>

<p>clearpart &mdash;all &mdash;initlabel</p>

<h1>Use graphical install</h1>

<h1>graphical</h1>

<p>text</p>

<h1>Firewall configuration</h1>

<p>firewall &mdash;disabled</p>

<h1>Run the Setup Agent on first boot</h1>

<p>firstboot &mdash;disable</p>

<h1>System keyboard</h1>

<p>keyboard us</p>

<h1>System language</h1>

<p>lang en_US</p>

<h1>Installation logging level</h1>

<p>logging &mdash;level=info</p>

<h1>Use network installation</h1>

<p>url &mdash;url=<strong><a href="ftp://192.168.30.210/pub/x86_64/centos5.5">ftp://192.168.30.210/pub/x86_64/centos5.5</a></strong></p>

<h1>Network information</h1>

<p>network &mdash;bootproto=dhcp &mdash;device=eth0 &mdash;onboot=on</p>

<h1>Reboot after installation</h1>

<p>reboot</p>

<h1>Root password</h1>

<p>rootpw &mdash;iscrypted $1$R79JLo34$.Yi4OUmL5PhpsxzSTL1hX1</p>

<h1>SELinux configuration</h1>

<p>selinux &mdash;disabled</p>

<h1>System timezone</h1>

<p>timezone Asia/Chongqing</p>

<h1>Install OS instead of upgrade</h1>

<p>install</p>

<h1>X Window System configuration information</h1>

<p>xconfig &mdash;defaultdesktop=GNOME &mdash;depth=8 &mdash;resolution=1026x768 &mdash;startxonboot</p>

<h1>Disk partitioning information</h1>

<p>part /boot &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;ext3&rdquo; &mdash;size=256
part swap &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;swap&rdquo; &mdash;size=2048</p>

<h1>part / &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;ext3&rdquo; &mdash;grow &mdash;size=1</h1>

<p>part / &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;ext3&rdquo; &mdash;grow &mdash;size=102400</p>

<p>%packages &mdash;resolvedeps</p>

<h1>@system-tools</h1>

<h1>@gnome-desktop</h1>

<p>@base-x</p>

<h1>@sound-and-video</h1>

<h1>@chinese-support</h1>

<h1>@graphical-internet</h1>

<h1>@admin-tools</h1>

<h1>@editors</h1>

<h1>key &mdash;skip</h1>

<p>```</p>

<p>所有以井号(#)开头的为注释行.</p>

<ul>
<li>url是操作系统的镜像地址</li>
<li>part / (未注释行)是指根分区分100G, 如果你的磁盘很大，剩余的空间可在安装系统后根据您的具体需求而设。</li>
<li>@bash-x  安装最基础的系统包</li>
<li>resolvedeps 将自动解决包之间的依赖关系。</li>
</ul>


<h3>启动所有服务</h3>

<p><code>
service dhcpd restart
service xinetd restart
service vsftpd restart
</code></p>

<h2>PXE安装系统</h2>

<p>当服务器一切工作准备就绪，就开始大规模安装Linux系统吧，由于各个主板对应的BIOS设置不同，此处无法满足所有的需求，通常做法是：</p>

<p>进入BIOS &ndash;> PXE boot &ndash;> enable &ndash;> save and reboot</p>

<p>如果各位有任何疑问，请留言回复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zabbix 源码安装与配置]]></title>
    <link href="http://agenge.github.io/blog/2013/05/02/zabbix-source-install-conf/"/>
    <updated>2013-05-02T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/02/zabbix-source-install-conf</id>
    <content type="html"><![CDATA[<h2>1、安装环境</h2>

<ul>
<li>操作系统：:CentOS 5.5 64位</li>
<li>Mysql：5.5.27</li>
<li>Apache httpd：2.4.4</li>
<li>Zabbix：2.0.6</li>
</ul>


<h2>2、源码安装</h2>

<h3>安装Zabbix</h3>

<h4>创建用户</h4>

<p><code>
groupadd zabbix
useradd -g zabbix -M -s /sbin/nologin zabbix
</code></p>

<h3>源码安装Zabbix</h3>

<p>下载页面请点击 <a href="http://www.zabbix.com/download.php">这里</a>。下载之后按照以下步骤执行：</p>

<p>```
yum install wget curl-devel net-snmp-devel php-bcmath
tar zxvf zabbix-2.0.6.tar.gz
cd zabbix-2.0.6
./configure &mdash;prefix=/data/zabbix \
  &mdash;enable-server &mdash;enable-agent \
  &mdash;with-mysql &mdash;with-net-snmp \
  &mdash;with-libcurl &mdash;enable-proxy</p>

<p>make &amp;&amp; make install
```
如果一切顺利，安装完成。</p>

<h3>创建Zabbix 数据库</h3>

<p>这里假设你已经安装好Mysql数据库，具体的安装方法请自己到网上搜索解决。
```
mysql -uroot -p
Enter password:</p>

<p>Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 63
Server version: 5.0.95 Source distribution</p>

<p>Copyright &copy; 2000, 2011, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql> create database zabbix character set utf8;
mysql> grant all privileges on zabbix.* to zabbix@localhost identified by &lsquo;zabbix&rsquo;;
Query OK, 1 row affected (0.00 sec)</p>

<p>mysql> quit
mysql -uzabbix -p zabbix &lt; database/mysql/schema.sql
mysql -uzabbix -p zabbix &lt; database/mysql/images.sql
mysql -uzabbix -p zabbix &lt; database/mysql/data.sql
```</p>

<h3>配置Zabbix</h3>

<p>设置服务自启动：
<code>
cp misc/init.d/fedora/core/zabbix_server /etc/init.d/
chmod +x /etc/init.d/zabbix_server
</code>
修改zabbix_server中的BASEDIR=/data/zabbix
<code>
chkconfig --add zabbix_server
chkconfig zabbix_server on
</code>
设置zabbix 配置文件：
<code>
vim /data/zabbix/etc/zabbix/zabbix_server.conf
DBName=zabbix
DBPassword=zabbix
</code></p>

<p>只需要修改密码即可，其他都保持默认值。当然如果你的Mysql不是安装在本地，肯定也要修改相应的IP啦。</p>

<h4>启动Zabbix Server</h4>

<p><code>
/etc/init.d/zabbix_server start
</code>
确认zabbix server是否已经启动：
```
netstat -antulp | grep zabbix</p>

<p>tcp        0      0 0.0.0.0:10051               0.0.0.0:*                   LISTEN      19087/zabbix_server
```</p>

<!-- more -->


<h2>3、安装Zabbix Web接口</h2>

<p>Zabbix前端使用PHP编写，故Web Server必须支持PHP。</p>

<h4>安装Apr</h4>

<p><code>
wget http://mirrors.cnnic.cn/apache//apr/apr-1.4.6.tar.gz
tar zxvf apr-1.4.6.tar.gz
cd apr-1.4.6
./configure --prefix=/usr/local/apr
make &amp;&amp; make install
</code></p>

<h4>安装Apr-utils</h4>

<p><code>
wget http://mirrors.cnnic.cn/apache//apr/apr-util-1.5.2.tar.gz
tar zxvf apr-util-1.5.2.tar.gz
cd apr-util-1.5.2
./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/
make &amp;&amp; make install
</code></p>

<h4>安装pcre</h4>

<p><code>
tar zxvf pcre-8.32.tar.gz
cd pcre-8.32
./configure
make &amp;&amp; make install
</code></p>

<h3>安装Apache httpd</h3>

<p>```
wget <a href="http://labs.mop.com/apache-mirror//httpd/httpd-2.4.4.tar.bz2">http://labs.mop.com/apache-mirror//httpd/httpd-2.4.4.tar.bz2</a>
tar jxvf httpd-2.4.4.tar.bz2
cp -rf apr-1.4.6 /data/software/httpd-2.4.4/srclib/apr
cp -rf apr-util-1.5.2 /data/software/httpd-2.4.4/srclib/apr-util
cd httpd-2.4.4
./configure &mdash;prefix=/usr/local/httpd \
  &mdash;enable-modules &mdash;enable-ssl &mdash;enable-module=so \
  &mdash;with-apr=/usr/local/apr \
  &mdash;with-apr-util=/usr/local/apr-util &mdash;with-included-apr \
  &mdash;enable-mods-shared=most &mdash;with-included-apr</p>

<p>make &amp;&amp; make install
/usr/local/httpd/bin/apachectl start
```</p>

<h4>安装 PHP</h4>

<p>安装gettext（国际化支持）：
<code>
wget http://ftp.gnu.org/pub/gnu/gettext/gettext-0.18.2.tar.gz
tar zxvf gettext-0.18.2.tar.gz
cd gettext-0.18.2
./configure
make &amp;&amp; make install
</code>
安装libpng：
<code>
tar zxvf libpng-1.6.1.tar.gz
cd libpng-1.6.1
./configure --prefix=/usr/local/libpng --enable-shared
make &amp;&amp; make install
</code>
安装freetype：
<code>
tar jxvf freetype-2.4.11.tar.bz2
cd freetype-2.4.11
./configure --prefix=/usr/local/freetype&lt;b&gt;&lt;/b&gt;
make &amp;&amp; make install
</code>
安装JPEG：
<code>
wget http://www.ijg.org/files/jpegsrc.v9.tar.gz
tar zxvf jpegsrc.v9.tar.gz
cd jpeg-9/
./configure --prefix=/usr/local/jpeg9 --enable-shared --enable-static
make &amp;&amp; make install
</code>
安装GD库：
<code>
wget https://bitbucket.org/libgd/gd-libgd/get/GD_2_0_33.tar.gz
tar zxvf GD_2_0_33.tar.gz
cd libgd-gd-libgd-486e81dea984/src
./configure --with-png  --with-freetype  --with-jpeg
make install
</code>
安装PHP：
```
wget <a href="ftp://192.168.30.211:/pub/Tools/php-5.3.19.tar.bz2">ftp://192.168.30.211:/pub/Tools/php-5.3.19.tar.bz2</a>
tar jxvf php-5.3.19.tar.bz2</p>

<p>./configure &mdash;prefix=/usr/local/php  \
  &mdash;with-config-file-path=/usr/local/php/etc \
  &mdash;disable-debug &mdash;disable-rpath &mdash;with-gettext  \
  &mdash;with-mcrypt &mdash;with-mysql=/usr/local/mysql \
  &mdash;with-mysql-sock=/data/mysqldata/3306/mysql.sock \
  &mdash;with-mysqli=/usr/local/mysql/bin/mysql_config \
  &mdash;enable-mbstring &mdash;enable-pdo &mdash;with-curl \
  &mdash;enable-inline-optimization &mdash;with-bz2 \
  &mdash;with-zlib &mdash;enable-sockets &mdash;enable-bcmath \
  &mdash;enable-sysvsem &mdash;enable-sysvshm &mdash;enable-pcntl \
  &mdash;enable-mbregex &mdash;with-mhash &mdash;enable-xml \
  &mdash;enable-zip &mdash;with-pcre-regex &mdash;with-gettext \
  &mdash;with-apxs2=/usr/local/httpd/bin/apxs \
  &mdash;with-gd &mdash;enable-gd-native-ttf &mdash;with-jpeg-dir=/usr/local/include \
  &mdash;with-png-dir=/usr/local/include &mdash;with-freetype-dir=/usr/include/freetype2</p>

<p>make ZEND_EXTRA_LIBS=&lsquo;-liconv&rsquo;
make install
cp php.ini-production /usr/local/php/etc/php.ini
cp sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm
chmod +x /etc/init.d/php-fpm
chkconfig php-fpm on
cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
<code>
修改时区：
</code>
vim /usr/local/php/etc/php.ini
<code>
在 [Date] 之后增加一行：
</code>
date.timezone =  Asia/Chongqing
```
将 max_execution_time 的值修改为 300或更大值，将max_input_time的值修改为300或更大值。</p>

<p>修改httpd.conf：
<code>
vim /usr/local/httpd/conf/httpd.conf
</code>
在最后增加：
<code>
AddType application/x-httpd-php  .php
AddType application/x-httpd-php-source  .phps
</code>
并将：
<code>
DirectoryIndex index.html
</code>
修改为：
<code>
DirectoryIndex index.php index.html
</code></p>

<h4>配置Zabbix Web接口</h4>

<p><code>
mkdir /usr/local/httpd/htdocs/zabbix
cd frontends/php/
cp -a . /usr/local/httpd/htdocs/zabbix/
cd /usr/local/httpd/htdocs/zabbix/
cp conf/zabbix.conf.php.example conf/zabbix.conf.php
vim conf/zabbix.conf.php
</code>
修改好连接Myql数据库的相关信息。</p>

<h4>安装Zabbix前台</h4>

<p>使用浏览器打开Zabbix URL: <a href="http://server_ip/zabbix">http://server_ip/zabbix</a></p>

<p>用户名：admin</p>

<p>密码：  zabbix</p>

<h2>安装Zabbix Agent</h2>

<h3>Zabbix Agent For Linux</h3>

<p>添加用户：
<code>
groupadd zabbix
useradd -g zabbix -M -s /sbin/nologin zabbix
</code>
下载 Zabbix Agent
<code>
wget http://www.zabbix.com/downloads/2.0.6/zabbix_agents_2.0.6.linux2_6.amd64.tar.gz
tar zxvf zabbix_agents_2.0.6.linux2_6.amd64.tar.gz
mv sbin/zabbix_agent* /usr/sbin/
mv bin/zabbix_* /usr/bin/
mkdir -p /etc/zabbix
mv conf/* /etc/zabbix
echo "zabbix_agent    10050/tcp" &gt;&gt; /etc/services
echo "zabbix_agent    10050/udp" &gt;&gt; /etc/services
sed -i 's/Server=127.0.0.1/Server=192.168.30.226/' /etc/zabbix/zabbix_agentd.conf
sed -i 's/Hostname=Zabbix server/Hostname=192.168.30.226/' /etc/zabbix/zabbix_agentd.conf
</code>
启动 Zabbix Agent
<code>
zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf
ps aux | grep zabbix
echo "zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf" &gt;&gt; /etc/rc.local
</code>
测试是否正确
<code>
zabbix_get -s 192.168.30.226 -p 10050 -k agent.ping
1
</code>
如果返回1表示正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Dashboard配置及apache和Nginx整合]]></title>
    <link href="http://agenge.github.io/blog/2013/04/12/puppet-dashboard-conf-with-web-server/"/>
    <updated>2013-04-12T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/04/12/puppet-dashboard-conf-with-web-server</id>
    <content type="html"><![CDATA[<p>Dashboard一个基于Ruby on Rails设计的Web控制台，便于管理Puppet Master和Agent，整个安装过程比较简单，以下是具体的安装步骤。</p>

<h2>安装前提条件</h2>

<ol>
<li>ruby版本>1.8.6，如果你是CentOS 5或是RHEL 5，可能你需要升级Ruby，官方下载地址请</li>
</ol>


<p> 点击<a href="ftp://ftp.ruby-lang.org/pub/ruby">这里</a>。具体的升级步骤由于下载的安装包已经包含，故不再介绍，本文示例基于Ruby 1.8.7。</p>

<p> <code>
 # ruby -v
 ruby 1.8.7 (2011-06-30 patchlevel 352) [x86_64-linux]
</code></p>

<ol>
<li><p>安装相关依赖包
```</p>

<h1>yum install -y mysql mysql-devel mysql-server \</h1>

  ruby ruby-devel ruby-irb ruby-mysql \
  ruby-rdoc ruby-ri
<code>
如果你已经有Mysql，此处不需要安装mysql-server包。安装后加入开机自启动并启动mysql 。
</code>

<h1>chkconfig mysqld on</h1>

<h1>/etc/init.d/mysqld start</h1>

<p>Starting mysqld:                                           [  OK  ]
```</p></li>
<li><p>升级GEM软件包安装器</p></li>
</ol>


<p> 首先检查gem版本，如果已经是1.3.5，就不需要升级：
 ```</p>

<pre><code># gem -v
1.3.5
</code></pre>

<p> <code>
如果是1.3.1，意味着你要升级gem：
</code></p>

<h1>wget <a href="http://production.cf.rubygems.org/rubygems/rubygems-1.3.5.tgz">http://production.cf.rubygems.org/rubygems/rubygems-1.3.5.tgz</a></h1>

<h1>tar zxvf rubygems-1.3.5.tgz</h1>

<h1>cd rubygems-1.3.5</h1>

<h1>ruby setup.rb</h1>

<p>```</p>

<ol>
<li>安装rake
```

<h1>gem install rake</h1>

<p>```</p></li>
</ol>


<!--more-->


<h2>数据库配置</h2>

<p>```</p>

<h1>mysql -uroot -p</h1>

<p>Enter password:</p>

<p>mysql> use dashboard
Database changed
mysql> grant all on dashboard.* to dashboard@localhost identified by &lsquo;dashboard&rsquo;;
Query OK, 0 rows affected (0.00 sec)
mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)</p>

<p>```</p>

<h2>安装Puppet Dashboard</h2>

<ul>
<li>下载Dashboard
```

<h1>cd /usr/local/</h1>

<h1>wget <a href="http://downloads.puppetlabs.com/dashboard/puppet-dashboard-1.2.20.tar.gz">http://downloads.puppetlabs.com/dashboard/puppet-dashboard-1.2.20.tar.gz</a></h1>

<h1>tar -zxvf puppet-dashboard-1.2.20.tar.gz</h1>

<h1>cd puppet-dashboard-1.2.20</h1>

<code>
创建数据库用户,此处我们使用源码方式进行安装,你可以通过yum或apt-get安装。
</code>

<h1>cp config/database.yml.example config/database.yml</h1>

<p>```</p></li>
<li><p>修改数据库配置：
```</p>

<h1>vim config/database.yml</h1>

<p>production:
database: dashboard
username: dashboard
password: dashboard
encoding: utf8
adapter: mysql
```
production代表生产环境，如果你是开发环境(development)或测试环境(test)，请修改相应的配置。</p></li>
<li><p>初始化数据库
```</p>

<h1>rake RAILS_ENV=production db:create</h1>

<h1>gem install mysql</h1>

<h1>rake RAILS_ENV=production db:migrate</h1>

<p>```</p></li>
<li><p>修改时区
默认是UTC时间，如果你在控制台看到的时区不对，那需要修改时区：
```</p>

<h1>vim config/environment.rb</h1>

<p>```
将config.time_zone = &lsquo;UTC'  修改为 config.time_zone = 'Chongqing&rsquo;</p></li>
<li><p>启动Webrick Web服务器
```</p>

<h1>cd /usr/local/puppet-dashboard-1.2.20</h1>

<h1>script/server -p 3000 -e production  -d</h1>

<p>```
上面即代表启动dashboard，端口3000，以及后台(-d)运行,通过浏览器输入： <a href="http://dashboard_server:3000%C2%A0%C2%A0">http://dashboard_server:3000%C2%A0%C2%A0</a> 即可访问。</p></li>
</ul>


<h3>Puppet Dashboard配置</h3>

<h4>服务器配置</h4>

<p>在Puppet 服务器端/etc/puppet/puppet.conf中的[main]节加入：
<code>
reports = http, store
reporturl = http://192.168.30.226:3000/reports/upload
</code>
部署lib文件：
```</p>

<h1>cp /usr/local/puppet-dashboard/ext/puppet/puppet_dashboard.rb /usr/lib/ruby/site_ruby/1.8/puppet/reports/</h1>

<p><code>
保存之后，重启puppetmaster即可。
</code></p>

<h1>/etc/init.d/puppetmaster restart</h1>

<p>```</p>

<h4>客户端配置</h4>

<p>在Puppet Agent（客户端）/etc/puppet/puppet.conf中的[main]节加入：
<code>
report = true
</code>
保存之后，重启puppet即可。
```</p>

<h1>/etc/init.d/puppet restart</h1>

<p>```</p>

<h4>控制台配置</h4>

<p>登录Dashboard后，需要自己添加： group和node</p>

<h2>Puppet Dashboard常用操作</h2>

<p><strong> 导入日志 </strong>
```</p>

<h1>cd /usr/local/puppet-dashboard</h1>

<h1>rake RAILS_ENV=production reports:import</h1>

<p><code>
** 优化数据库 **
当数据量过大时，需要优化mysql数据库：
</code></p>

<h1>cd /usr/local/puppet-dashboard</h1>

<h1>rake RAILS_ENV=production db:raw:optimize</h1>

<p>```</p>

<p><strong> 删除日志 </strong>
删除1个月之前的数据：
```</p>

<h1>cd /usr/local/puppet-dashboard</h1>

<h1>rake RAILS_ENV=production reports:prune upto=1 unit=mon</h1>

<p><code>
删除15天前的日志：
</code></p>

<h1>rake RAILS_ENV=production reports:prune upto=15 unit=day</h1>

<p>```</p>

<p><strong> 备份数据库 </strong>
```</p>

<h1>rake RAILS_ENV=production db:raw:dump</h1>

<p>mysqldump &mdash;add-locks &mdash;create-options &mdash;disable-keys &mdash;extended-insert &mdash;quick &mdash;set-charset &mdash;user=dashboard &mdash;password=dashboard dashboard > production.sql.tmp
mv production.sql.tmp production.sql</p>

<p><code>
**恢复数据库 **
</code></p>

<h1>rake RAILS_ENV=production FILE=production.sql db:raw:restore</h1>

<p>```</p>

<p><strong> Dashboard 启停脚本 </strong>
```</p>

<h1>!/bin/bash</h1>

<h1>Description: Puppet Dashboard init.d script</h1>

<h1>Get function from functions library</h1>

<p>. /etc/init.d/functions</p>

<h1>Start the service Puppet Dashboard</h1>

<p>start() {</p>

<pre><code>echo -n "Starting Puppet Dashboard: "
/usr/bin/ruby /usr/local/puppet-dashboard/script/server -e production -b 192.168.30.226 -d
### Create the lock file ###
touch /var/lock/subsys/puppetdb
success $"Puppet Dashboard startup"
echo
</code></pre>

<p>}</p>

<h1>Restart the service Puppet Dashboard</h1>

<p>stop() {</p>

<pre><code>echo -n "Stopping Puppet Dashboard: "
kill -9 `ps ax | grep "/usr/bin/ruby /usr/local/puppet-dashboard/script/server" | grep -v grep | awk '{ print $1 }' `
### Now, delete the lock file ###
rm -f /var/lock/subsys/puppetdb
success $"Puppet Dashboard shutdown"
echo
</code></pre>

<p>}</p>

<h3>main logic</h3>

<p>case &ldquo;$1&rdquo; in</p>

<pre><code>start)
    start
;;
stop)
    stop
;;
status)
    status Puppet DB
;;
restart|reload|condrestart)
    stop
    start
;;
*)
echo $"Usage: $0 {start|stop|restart|reload|status}"
exit 1
</code></pre>

<p>esac</p>

<p>exit 0</p>

<p>```</p>

<h2>使用Passenger运行Puppet Dashboard</h2>

<p>相信用过Dashboard的人都知道在访问时控制台时比较缓慢，这正是由于内置的Webrick服务器导致，不过Puppet支持与其他第三方Web Server整合，以下分别介绍整合过程。</p>

<h3>Apache整合Puppet Dashboard</h3>

<ol>
<li>安装依赖包
```

<h1>yum install ruby ruby-libs ruby-devel  http httpd</h1>

<p>```</p></li>
<li>安装Passenger
```

<h1>gem install passenger</h1>

<p>```</p></li>
<li>安装Apache的passenger模块
```

<h1>passenger-install-apache2-module</h1>

<p>```
如果安装没问题的话，就会有以下类似信息输出：</p></li>
</ol>


<p> ```
 The Apache 2 module was successfully installed.</p>

<p> Please edit your Apache configuration file, and add these lines:</p>

<pre><code>LoadModule passenger_module /usr/lib64/ruby/gems/1.8/gems/passenger-3.0.19/ext/apache2/mod_passenger.so
PassengerRoot /usr/lib64/ruby/gems/1.8/gems/passenger-3.0.19
PassengerRuby /usr/bin/ruby
</code></pre>

<p> After you restart Apache, you are ready to deploy any number of Ruby on Rails
 applications on Apache, without any further Ruby on Rails-specific
 configuration!</p>

<p> Press ENTER to continue.</p>

<p> ```
直接输入回车即可。</p>

<ol>
<li>配置Apache虚拟主机</li>
</ol>


<p> ```
 # cd /usr/local/puppet-dashboard
 # cp ext/passenger/dashboard-vhost.conf /etc/httpd/conf.d/
 # vi /etc/httpd/conf.d/dashboard-vhost.conf
 # UPDATE THESE PATHS TO SUIT YOUR ENVIRONMENT
 LoadModule passenger_module /usr/lib64/ruby/gems/1.8/gems/passenger-3.0.19/ext/apache2/mod_passenger.so
 PassengerRoot /usr/lib64/ruby/gems/1.8/gems/passenger-3.0.19
 PassengerRuby /usr/bin/ruby</p>

<p> # you may want to tune these settings
 PassengerHighPerformance on
 PassengerMaxPoolSize 12
 PassengerPoolIdleTime 1500
 # PassengerMaxRequests 1000
 PassengerStatThrottleRate 120
 RailsAutoDetect On</p>

<p> <VirtualHost *:80></p>

<pre><code>     ServerName pmaster.i.12582.com
     DocumentRoot /usr/local/puppet-dashboard/public/
     &lt;Directory /usr/local/puppet-dashboard/public/&gt;
             Options None
             Order allow,deny
             allow from all
     &lt;/Directory&gt;
</code></pre>

<p>   ErrorLog /var/log/httpd/dashboard.example.com_error.log
   LogLevel warn
   CustomLog /var/log/httpd/dashboard.example.com_access.log combined
   ServerSignature On
 </VirtualHost>
<code>
5. 重启httpd
</code></p>

<h1>/etc/init.d/httpd restart</h1>

<p>```
 此时再访问 <a href="http://pmaster.i.12582.com">http://pmaster.i.12582.com</a> 发现速度较之前快太多。</p>

<h3>Nginx整合Puppet Dashboard</h3>

<ol>
<li>安装依赖包
```

<h1>yum install ruby ruby-libs ruby-devel  http httpd</h1>

<p>```</p></li>
<li>安装Passenger
```

<h1>gem install passenger</h1>

<p>```</p></li>
<li>安装Nginx及passenger模块
```

<h1>passenger-install-nginx-module</h1>

<p>```
回车后，会有两个选择：</p></li>
<li>表示下载nginx，编译且安装，推荐这种方式安装.</li>
<li>表示自定义安装Nginx,安装之后，nginx默认存放在/opt目录.</li>
</ol>


<p> 修改/opt/nginx/conf/nginx.conf，在最后一个}之前添加以下内容：</p>

<p> ```</p>

<pre><code>server {
  listen 80;
  server_name pmaster.i.12582.com;
  root /usr/local/puppet-dashboard/public;
  passenger_enabled on;
}
</code></pre>

<p> ```</p>

<ol>
<li>重启Nginx
```

<h1>killall nginx</h1>

<h1>/opt/nginx/sbin/nginx</h1>

<p>```</p></li>
</ol>


<p>最后，你要是有任何疑问，请留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于KVM和Hyper-V的Windows系统测试报告]]></title>
    <link href="http://agenge.github.io/blog/2013/03/13/kvm-hyper-v-base-win-test/"/>
    <updated>2013-03-13T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/03/13/kvm-hyper-v-base-win-test</id>
    <content type="html"><![CDATA[<p>最近由于工作原因，要做一个KVM和Hyper-V的测试报告，
由于我们的新系统是采用的C#开发，故部署在Windows，从而</p>

<p>引发这个测试，具体介绍如下：</p>

<h2>测试环境</h2>

<ul>
<li>硬件资源</li>
</ul>


<table width="609" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td nowrap="nowrap" width="129">
<p align="center">IP
</td>
<td nowrap="nowrap" width="81">
<p align="center">功能
</td>
<td nowrap="nowrap" width="140">
<p align="center">OS
</td>
<td nowrap="nowrap" width="115">
<p align="center">CPU
</td>
<td nowrap="nowrap" width="72">
<p align="center">内存
</td>
<td nowrap="nowrap" width="72">
<p align="center">备注
</td>
</tr>
<tr>
<td nowrap="nowrap" width="129">
<p align="center">192.168.30.61
</td>
<td nowrap="nowrap" width="81">
<p align="center">宿主机
</td>
<td nowrap="nowrap" width="140">
<p align="center">CentOS 6.3 64位
</td>
<td nowrap="nowrap" width="115">
<p align="center">忽略
</td>
<td nowrap="nowrap" width="72">
<p align="center">忽略
</td>
<td rowspan="2" nowrap="nowrap" width="72">
<p align="center">KVM
</td>
</tr>
<tr>
<td nowrap="nowrap" width="129">
<p align="center">192.168.30.120
</td>
<td nowrap="nowrap" width="81">
<p align="center">Guest OS
</td>
<td nowrap="nowrap" width="140">
<p align="center">Windows 2008 64位
</td>
<td nowrap="nowrap" width="115">
<p align="center">4*VCPU
</td>
<td nowrap="nowrap" width="72">
<p align="center">8G
</td>
</tr>
<tr>
<td nowrap="nowrap" width="129">
<p align="center">192.168.30.63
</td>
<td nowrap="nowrap" width="81">
<p align="center">宿主机
</td>
<td nowrap="nowrap" width="140">
<p align="center">Windows 2008 64位
</td>
<td nowrap="nowrap" width="115">
<p align="center">忽略
</td>
<td nowrap="nowrap" width="72">
<p align="center">忽略
</td>
<td rowspan="2" nowrap="nowrap" width="72">Hyper-v</td>
</tr>
<tr>
<td nowrap="nowrap" width="129">
<p align="center">192.168.30.136
</td>
<td nowrap="nowrap" width="81">
<p align="center">Guest OS
</td>
<td nowrap="nowrap" width="140">
<p align="center">Windows 2008 64位
</td>
<td nowrap="nowrap" width="115">
<p align="center">4*VCPU
</td>
<td nowrap="nowrap" width="72">
<p align="center">4G
</td>
</tr>
</tbody>
</table>


<ul>
<li><p>版本信息</p>

<ul>
<li>Libvirtd: 0.9.10</span></li></li>
<li>Hyper-V：6.1（基于Windows Server 2008的组件）</li>
</ul>
</li>
<li><p>测试工具</p>

<ul>
<li>HD Tune Pro 5.0</li>
</ul>
</li>
</ul>


<h2>性能测试结果</h2>

<p>为了尽量保持客观及测试的准确性，本次主要测试：随机访问读、文件基准
* 随机访问读
基于KVM的Windows 2008，192.168.30.120测试结果如下：</p>

<p><img src="/images/2013/03/k-h-test_01.png"></p>

<p>基于Hyper-V的Windows 2008，192.168.30.136测试结果如下：</p>

<p><img src="/images/2013/03/k-h-test_02.png"></p>

<p>从以上两个结果集中的IOPS和平均读取速率两个参数可看出，基于Hyper-V随机读的明显要优于基于KVM随机读。</p>

<ul>
<li>文件基准
基于KVM的Windows 2008，192.168.30.120，文件大小：10G，数据随机读写，测试结果如下：</li>
</ul>


<p><img src="/images/2013/03/k-h-test_03.png"></p>

<p>基于Hyper-V的Windows 2008，192.168.30.136，文件大小：10G，数据随机读写，测试结果如下：</p>

<p><img src="/images/2013/03/k-h-test_04.png"></p>

<p>通过文件基准得出以下几个结论：</p>

<ol>
<li><p>基于KVM的小文件写要优于基于Hyper-V小文件写，而基于Hyper-V小文件读明显要好很多；</p></li>
<li><p>从整体来看，基于Hyper-V连续的小文件传输速度的IOPS要明显优于基于KVM；</p></li>
<li><p>通过块大小为64M的文件可看出，基于Hyper-V的读写都要强于基于KVM很多；</p></li>
</ol>


<p>以上的2个测试点几乎可判断出，基于Hyper-V的Windows客户机整体上来讲要占优势，如果客户机是Windows，强烈建议使用基于Hyper-V的虚拟化。最后欢迎各位吐槽。</p>
]]></content>
  </entry>
  
</feed>
