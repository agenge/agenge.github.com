<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: 运维 | TaurusHome]]></title>
  <link href="http://agenge.github.io/blog/categories/yun-wei/atom.xml" rel="self"/>
  <link href="http://agenge.github.io/"/>
  <updated>2014-01-12T20:01:53+08:00</updated>
  <id>http://agenge.github.io/</id>
  <author>
    <name><![CDATA[agenge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS 6 安装RabbitMQ]]></title>
    <link href="http://agenge.github.io/blog/2013/11/17/centos-install-rabbitmq/"/>
    <updated>2013-11-17T21:18:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/11/17/centos-install-rabbitmq</id>
    <content type="html"><![CDATA[<h2>系统信息</h2>

<ul>
<li>操作系统:  CentOS 6.3 64位</li>
<li>Erlang:    5.8.5 64位</li>
<li>RabbitMQ:  3.1.5</li>
</ul>


<h2>安装依赖包</h2>

<h3>启用并安装EPEL(Extra Packeages for Enterprise Linux)</h3>

<p><code>
wget http://mirror.neu.edu.cn/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
rpm -ivh epel-release-6-8.noarch.rpm
</code></p>

<p>添加 erlang 仓库源
由于 RabbitMQ 是erlang编写，所以要依赖它</p>

<p><code>
wget -O /etc/yum.repos.d/epel-erlang.repo http://repos.fedorapeople.org/repos/peter/erlang/epel-erlang.repo
</code></p>

<h3>安装erlang</h3>

<p><code>
yum clear all
yum install -y erlang
</code>
然后测试下erlang是否成功：
```
erl -v
Erlang R14B04 (erts-5.8.5) [source] [64-bit] [rq:1] [async-threads:0] [kernel-poll:false]</p>

<p>Eshell V5.8.5  (abort with ^G)
```
从输出结果来看，已经安装成功，版本信息为：V5.8.5</p>

<hr />

<h2>安装 RabbitMQ</h2>

<p>把依赖包安装好，就可以进行rabbitmq的安装，包名为：rabbitmq-server:
<code>
yum -y install rabbitmq-server
</code></p>

<!-- more -->


<h3>启动与设置rabbitmq</h3>

<p>安装之后，我们就可以来启动rabbitmq server，启动方式有两种：
&ndash; 通过系统服务启动
<code>
service rabbitmq-server start
Starting rabbitmq-server: SUCCESS
rabbitmq-server.
</code>
&ndash; 直接运行启动脚本(推荐使用)
<code>
/etc/init.d/rabbitmq-server start
Starting rabbitmq-server: SUCCESS
rabbitmq-server.
</code></p>

<p>除了在终端输出的信息外，还可以通过日志来查看更详细的信息，默认路径为：/var/log/rabbitmq/<a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#114;&#x61;&#x62;&#x62;&#105;&#x74;&#64;&#108;&#111;&#x63;&#x61;&#x6c;&#x68;&#x6f;&#x73;&#116;&#x2e;&#x6c;&#111;&#103;">&#x72;&#x61;&#98;&#98;&#105;&#x74;&#x40;&#108;&#x6f;&#99;&#97;&#x6c;&#104;&#111;&#x73;&#x74;&#x2e;&#108;&#x6f;&#103;</a>
```
=INFO REPORT==== 17-Nov-2013::20:44:29 ===
Starting RabbitMQ 3.1.5 on Erlang R14B04
Copyright &copy; 2007-2013 GoPivotal, Inc.
Licensed under the MPL.  See <a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
node           : rabbit@localhost
home dir       : /var/lib/rabbitmq
config file(s) : (none)
cookie hash    : GA+C2KHxoRs776SK+Ki+qg==
log            : /var/log/rabbitmq/<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x72;&#97;&#98;&#98;&#x69;&#x74;&#64;&#x6c;&#x6f;&#x63;&#97;&#108;&#104;&#x6f;&#x73;&#x74;&#46;&#108;&#111;&#x67;">&#114;&#97;&#98;&#x62;&#x69;&#116;&#64;&#108;&#x6f;&#99;&#x61;&#108;&#104;&#x6f;&#x73;&#x74;&#46;&#108;&#x6f;&#x67;</a>
sasl log       : /var/log/rabbitmq/<a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#114;&#97;&#98;&#x62;&#105;&#116;&#x40;&#x6c;&#x6f;&#99;&#x61;&#x6c;&#x68;&#x6f;&#115;&#116;&#x2d;&#115;&#97;&#115;&#108;&#x2e;&#x6c;&#x6f;&#103;">&#114;&#97;&#98;&#98;&#x69;&#x74;&#x40;&#x6c;&#111;&#x63;&#x61;&#108;&#x68;&#111;&#x73;&#116;&#45;&#115;&#x61;&#x73;&#x6c;&#x2e;&#x6c;&#x6f;&#x67;</a>
database dir   : /var/lib/rabbitmq/mnesia/rabbit@localhost</p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
Limiting to approx 924 file handles (829 sockets)</p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
Memory limit set to 398MB of 996MB total.</p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
Disk free limit set to 1000MB</p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
msg_store_transient: using rabbit_msg_store_ets_index to provide index</p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
msg_store_persistent: using rabbit_msg_store_ets_index to provide index</p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
started TCP Listener on [::]:5672</p>

<p>=INFO REPORT==== 17-Nov-2013::20:44:29 ===
Server startup complete; 0 plugins started.
```</p>

<p>除了这个日志，平常在维护及故障排除时，还可以查看其他更多的日志：
```
tree /var/log/rabbitmq/
/var/log/rabbitmq/
├── <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x72;&#97;&#x62;&#x62;&#105;&#x74;&#x40;&#x6c;&#111;&#x63;&#97;&#108;&#x68;&#x6f;&#x73;&#116;&#x2e;&#108;&#111;&#103;">&#114;&#97;&#x62;&#x62;&#x69;&#x74;&#x40;&#108;&#x6f;&#99;&#97;&#x6c;&#x68;&#x6f;&#x73;&#116;&#46;&#108;&#x6f;&#103;</a>
├── <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#114;&#97;&#x62;&#98;&#x69;&#x74;&#x40;&#x6c;&#111;&#x63;&#97;&#x6c;&#104;&#x6f;&#x73;&#x74;&#x2d;&#115;&#x61;&#115;&#x6c;&#46;&#108;&#111;&#x67;">&#114;&#97;&#x62;&#98;&#105;&#116;&#x40;&#108;&#x6f;&#99;&#x61;&#x6c;&#x68;&#x6f;&#x73;&#x74;&#45;&#115;&#x61;&#x73;&#108;&#x2e;&#x6c;&#x6f;&#x67;</a>
├── shutdown_err
├── shutdown_log
├── startup_err
└── startup_log</p>

<p>0 directories, 6 files
```</p>

<h3>设置开机启动</h3>

<p>RabbitMQ安装的默认配置是没有开机自启动的，如：
<code>
chkconfig --list rabbitmq-server
rabbitmq-server 0:off   1:off   2:off   3:off   4:off   5:off   6:off
</code></p>

<p>设置下rabbitmq为on即可：
<code>
chkconfig --list rabbitmq-server
rabbitmq-server 0:off   1:off   2:on    3:on    4:on    5:on    6:off
</code>
或者直接指定启动级别：
<code>
chkconfig --level 35 rabbitmq-server on
chkconfig --list rabbitmq-server    
rabbitmq-server 0:off   1:off   2:off   3:on    4:off   5:on    6:off
</code></p>

<p>另外，RabbitMQ默认还提供一个强大的工具：rabbitmqctl，例如查看RabbitMQ状态：
<code>
rabbitmqctl status
</code>
输出结果如下：
```
Status of node rabbit@localhost &hellip;
[{pid,1961},
 {running_applications,[{rabbit,&ldquo;RabbitMQ&rdquo;,&ldquo;3.1.5&rdquo;},</p>

<pre><code>                    {os_mon,"CPO  CXC 138 46","2.2.7"},
                    {xmerl,"XML parser","1.2.10"},
                    {mnesia,"MNESIA  CXC 138 12","4.5"},
                    {sasl,"SASL  CXC 138 11","2.1.10"},
                    {stdlib,"ERTS  CXC 138 10","1.17.5"},
                    {kernel,"ERTS  CXC 138 10","2.14.5"}]},
</code></pre>

<p> {os,{unix,linux}},
 {erlang_version,&ldquo;Erlang R14B04 (erts-5.8.5) [source] [64-bit] [rq:1] [async-threads:30] [kernel-poll:true]\n&rdquo;},
 {memory,[{total,26976648},</p>

<pre><code>      {connection_procs,2648},
      {queue_procs,5296},
      {plugins,0},
      {other_proc,9052880},
      {mnesia,56656},
      {mgmt_db,0},
      {msg_index,33664},
      {other_ets,761160},
      {binary,1872},
      {code,14419185},
      {atom,1354457},
      {other_system,1288830}]},
</code></pre>

<p> {vm_memory_high_watermark,0.4},
 {vm_memory_limit,418077081},
 {disk_free_limit,1000000000},
 {disk_free,49057206272},
 {file_descriptors,[{total_limit,924},</p>

<pre><code>                {total_used,3},
                {sockets_limit,829},
                {sockets_used,1}]},
</code></pre>

<p> {processes,[{limit,1048576},{used,122}]},
 {run_queue,0},
 {uptime,836}]
&hellip;done.
```</p>

<h3>安装管理界面插件</h3>

<p>除了命令行管理工具，还提供了一个WEB管理界面，该管理界面是以插件的方式存在，不过默认没有启用，要启用它也很简单：
<code>
/usr/lib/rabbitmq/bin/rabbitmq-plugins enable rabbitmq_management
</code>
如果启用成功，将会提示如下：
<code>
The following plugins have been enabled:
  mochiweb
  webmachine
  rabbitmq_web_dispatch
  amqp_client
  rabbitmq_management_agent
  rabbitmq_management
Plugin configuration has changed. Restart RabbitMQ for changes to take effect.
</code>
提示重启rabbitmq server:
<code>
/etc/init.d/rabbitmq-server restart
Restarting rabbitmq-server: SUCCESS
rabbitmq-server.
</code></p>

<p>通过浏览器打开: <a href="http://192.168.1.108:55672/mgmt/">http://192.168.1.108:55672/mgmt/</a> ，默认的用户名和密码都是guest.</p>

<p>RabbitMQ管理界面的截图：
<img src="/images/2013/11/rabbitmq-mg.jpg"></p>

<p>如果无法打开，可能会是以下几个问题造成的：</p>

<ul>
<li>RabbitMQ Server可能启动失败，进一步的排错可通过查看详细的日志。</li>
<li>防火墙阻挡，包括iptables和企业内部防火墙。</li>
<li>SELinux开启，禁用它即可。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRBD+Heartbeat+Mysql高可用配置]]></title>
    <link href="http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha/"/>
    <updated>2013-08-09T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>DRBD全称Distributed Replicated Block （分布式的复制块设备），属于Device公司，但是完全开源。它是一款基于块设备的文件复制解决方案，速度比文件级别的软件如NFS，samba快很多，是很多中小企业的共享存储首选解决方案。</p>

<p>DRBD工作需要在两个节点上同时准备一块一模一样的分区组成镜像，这就是为什么它叫做分布式复制块设备，它主要通过复制数据来实现文件同步（备份），主要用于集群文件共享， 我们通过它的工作原理来了解块复制和文件复制的不同。</p>

<p>首先，您需要知道，DRBD是工作在系统内核空间，而不是用户空间，它直接复制的是二进制数据，这是它速度快的根本原因。其次，DRBD至少需要两个节点来工作，一主一次。</p>

<p>DRBD的文件同步过程和普通复制过程的不同：</p>

<p>DRBD在数据进入Buffer Cache时，先经过DRBD这一层，复制一份数据经过TCP/IP协议封装，发送到另一个节点上，另一个节点通过TCP/IP协议来接受复制过来的数据，同步到次节点的DRBD设备上。</p>

<h2>准备工作</h2>

<p>准备至少2台服务器，且每台服务器有一块磁盘或一个单独未使用的分区，偶的环境如下：</p>

<p><code>
IP地址                硬盘分区        主机名                   操作系统
192.168.30.234      /dev/sdb,8G     drbd-01.i.12582.com     CentOS 6.3 x86_64位   主节点(Primary Node)
192.168.30.235      /dev/sdb,8G     drbd-02.i.12582.com     CentOS 6.3 x86_64位   次节点(Secondary Node)
</code>
注意：如果有服务器有2块或以上网卡的同学，建议将其中一块网卡专门用来做网络心跳线，甚至接入另外一台单独的交换机，本次环境只有单网卡。</p>

<h2>初始化设置</h2>

<p>1  所有节点关闭iptables和SELinux</p>

<p>2  在所有节点/etc/hosts加入以下内容：
```</p>

<pre><code>192.168.30.234  drbd-01.i.12582.com drbd-01
192.168.30.235  drbd-02.i.12582.com drbd-02
</code></pre>

<p>```</p>

<p>3  所有节点创建独立分区：</p>

<pre><code>fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disk label
Building a new DOS disk
label with disk identifier 0x46b64833.Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.
Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)
WARNING: DOS-compatible mode is deprecated. It's strongly recommended to
switch off the mode (command 'c') and change display units to
sectors (command 'u').

Command (m for help): p
Disk /dev/sdb: 8589 MB, 8589934592 bytes
255 heads, 63 sectors/track, 1044 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x46b64833

Device Boot    Start        End        Blocks    Id    System

Command (m for help): n
Command action
e   extended
p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-1044, default 1):
Using default value 1
Last cylinder, +cylinders or +size{K,M,G} (1-1044, default 1044):
Using default value 1044

Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.
</code></pre>

<!-- more -->


<h2>安装Hearbeat</h2>

<pre><code>wget ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm
rpm -ivUh epel-release-6-5.noarch.rpm
yum --enablerepo=epel install heartbeat -y
</code></pre>

<h2>安装DRBD</h2>

<p>1  安装依赖包</p>

<pre><code>yum -y install gcc kernel-devel kernel-headers flex
</code></pre>

<p>2  安装DRBD</p>

<pre><code>wget http://oss.linbit.com/drbd/8.4/drbd-8.4.3.tar.gz
tar zxvf drbd-8.4.3.tar.gz
cd drbd-8.4.3
./configure --prefix=/usr/local/drbd --with-km --with-heartbeat
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
make install
cp -R /usr/local/drbd/etc/ha.d/resource.d/drbd* /etc/ha.d/resource.d/
</code></pre>

<p>3  其他设置</p>

<pre><code>mkdir -p /usr/local/drbd/var/run/drbd
cp /usr/local/drbd/etc/rc.d/init.d/drbd /etc/rc.d/init.d/
chkconfig --add drbdchkconfig drbd on
</code></pre>

<h2>安装DRBD模块</h2>

<pre><code>cd drbdmake 
clean
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
cp drbd.ko /lib/modules/`uname -r`/kernel/lib/
depmod
</code></pre>

<p>以上操作请在所有节点操作一次。</p>

<hr />

<h2>设置DRBD</h2>

<p><strong>配置drbd.conf</strong></p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/global_common.conf
global {
    minor-count 64;
    usage-count yes;
    # minor-count dialog-refresh disable-ip-verification
}


common {
    syncer { rate 1000M; }
    handlers {
        # These are EXAMPLE handlers only.
        # They may have severe implications,
        # like hard resetting the node under certain circumstances.
        # Be careful when chosing your poison.

        pri-on-incon-degr "/usr/lib/drbd/notify-pri-on-incon-degr.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        pri-lost-after-sb "/usr/lib/drbd/notify-pri-lost-after-sb.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        local-io-error "/usr/lib/drbd/notify-io-error.sh; /usr/lib/drbd/notify-emergency-shutdown.sh; echo o &amp;gt; /proc/sysrq-trigger ; halt -f";
        fence-peer "/usr/lib/drbd/crm-fence-peer.sh";
        pri-lost "/usr/local/drbd/lib/drbd/notify-pri-lost.sh; /usr/local/drbd/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt;/proc/sysrq-trigger ; reboot -f";
        split-brain "/usr/lib/drbd/notify-split-brain.sh root";
        out-of-sync "/usr/lib/drbd/notify-out-of-sync.sh root";
        # before-resync-target "/usr/lib/drbd/snapshot-resync-target-lvm.sh -p 15 -- -c 16k";
        # after-resync-target /usr/lib/drbd/unsnapshot-resync-target-lvm.sh;
    }

    startup {

        # wfc-timeout degr-wfc-timeout outdated-wfc-timeout wait-after-sb
        wfc-timeout 60;
        degr-wfc-timeout 120;
        outdated-wfc-timeout 2;
    }

    options {
        # cpu-mask on-no-data-accessible
        }

    disk {
        # size max-bio-bvecs on-io-error fencing disk-barrier disk-flushes
        # disk-drain md-flushes resync-rate resync-after al-extents
        # c-plan-ahead c-delay-target c-fill-target c-max-rate
        # c-min-rate disk-timeout
        on-io-error detach;
        fencing resource-only;
    }

    net {
        # protocol timeout max-epoch-size max-buffers unplug-watermark
        # connect-int ping-int sndbuf-size rcvbuf-size ko-count
        # allow-two-primaries cram-hmac-alg shared-secret after-sb-0pri
        # after-sb-1pri after-sb-2pri always-asbp rr-conflict
        # ping-timeout data-integrity-alg tcp-cork on-congestion
        # congestion-fill congestion-extents csums-alg verify-alg
        # use-rle
        protocol C;
    }
}
</code></pre>

<p>设置资源文件</p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/r0.res
resource r0 {
    on drbd-01.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.234:7788;
        meta-disk       internal;
    }

    on drbd-02.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.235:7788;
        meta-disk       internal;
    }
}
</code></pre>

<hr />

<h3>设置权限</h3>

<pre><code>chgrp haclient /sbin/drbdsetup
chmod o-x /sbin/drbdsetup
chmod u+s /sbin/drbdsetup
chgrp haclient /sbin/drbdmeta
chmod o-x /sbin/drbdmeta
chmod u+s /sbin/drbdmeta
</code></pre>

<p>加载DRBD模块与建立resource</p>

<pre><code>modprobe drbd
lsmod | grep drbd
drbd                  328626  0
libcrc32c               1246  1 drbd
</code></pre>

<p>写入一些数据到/dev/sdb1</p>

<pre><code>dd if=/dev/zero of=/dev/sdb1 bs=1M count=100
</code></pre>

<p>建立Resource</p>

<pre><code>drbdadm create-md r0
Writing meta data...
initializing activity log
NOT initializing bitmap
New drbd meta data block successfully created.
success
</code></pre>

<h3>启动DRBD</h3>

<pre><code>/etc/init.d/drbd start
Starting DRBD resources: [
      create res: r0
    prepare disk: r0
     adjust disk: r0
     adjust net: r0
]
degr-wfc-timeout has to be shorter than wfc-timeout
degr-wfc-timeout implicitly set to wfc-timeout (60s)
..........
***************************************************************
DRBD's startup script waits for the peer node(s) to appear.
- In case this node was already a degraded cluster before the
reboot the timeout is 120 seconds. [degr-wfc-timeout]
- If the peer was available before the reboot the timeout will
expire after 60 seconds. [wfc-timeout]
(These values are for resource 'r0'; 0 sec -&amp;gt; wait forever)
To abort waiting enter 'yes' [  49]:yes

.
</code></pre>

<p>节点2按以上操作执行一次。</p>

<h3>DRBD状态查看</h3>

<ol>
<li><p>Secondary/Unknown：若drbd-01服务启动而drbd-02尚未启动,则ro会出现Secondary/Unknown</p>

<pre><code> /init.d/drbd status
 drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs        ro                 ds                 p   mounted
 fstype
 0:r0   WFConnection  Secondary/Unknown  Inconsistent/DUnknown  C
</code></pre>

<p>查看drbd</p>

<pre><code>  cat /proc/drbd
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre></li>
<li><p>Inconsistent/Inconsistent：ds出現Inconsistent表示兩台node資料尚未同步。</p>

<pre><code> drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs         ro                   ds                         p  mounted  
 fstype
 0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre>

<p>查看内核</p>

<pre><code>  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r-----
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre>

<p>3  SyncSource：cs出現SyncTarget表示正在同步中，可看到目前同步時的進度．</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs          ro                 ds                     p  mounted  
  fstype
  ...    sync'ed:    26.1%              (6056/8188)M
  0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>4  Secondary/Secondary：表示尚未設定Primary Node。</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs         ro                   ds                         p  mounted  
  fstype
  0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre></li>
</ol>


<h3>设置主节点(Primary Node)</h3>

<p>在drbd-01进行以下操作:</p>

<pre><code>drbdadm -- --overwrite-data-of-peer primary r0
</code></pre>

<p>再查看下状态:</p>

<pre><code>/etc/init.d/drbd status
drbd driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-01.i.12582.com, 2013-08-08 14:00:35
m:res  cs          ro                 ds                     p  mounted  fstype
...    sync'ed:    13.1%              (7124/8188)M
0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>在drbd-02查看下状态：</p>

<pre><code>driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-02.i.12582.com, 2013-08-08 14:16:07
m:res  cs         ro                 ds                 p  mounted  fstype
0:r0   Connected  Secondary/Primary  UpToDate/UpToDate  C
</code></pre>

<p>格式化（drbd-01）</p>

<pre><code>mkfs.ext4 /dev/drbd0
</code></pre>

<p>挂载到文件系统：</p>

<pre><code>mkdir /datamount /dev/drbd0 /data
</code></pre>

<h2>测试DRBD</h2>

<h3>测试同步</h3>

<ol>
<li><p>在主节点（Primary Node）复制一些数据到/data</p>

<pre><code> cp -r drbd-8.4.3 /data/
</code></pre></li>
<li><p>在次节点（Secondary Node）执行以下步骤：</p>

<pre><code> drbdadm down r0
</code></pre>

<p>注：次节点在DRBD启动状态下是无法mount /data的，所以必须先手动停止才能mount。</p>

<pre><code>  mkdir /datamount -t ext4 /dev/sdb1 /datals -l
</code></pre>

<p>就可以看到数据已经全部同步过来。</p></li>
</ol>


<h2>Heartbeat配置</h2>

<ol>
<li><p>主节点操作：</p>

<pre><code> vim /etc/ha.d/ha.cf
 debugfile /var/log/ha-debug   # 打开错误日志报告

 keepalive 2    # 2秒检测一次心跳线连接
 deadtime 10    # 10秒测试不到 主节点心跳线就认为有问题
 warntime 6    # 警告时间（建议在2－10之间）
 initdead 120   # 初始化启动时 120秒无连接视为正常，或指定heartbeat 在启动时，
 # 需要等待120秒才去启动任何资源

 udpport 694     # 用udp的694端口连接，netstat -antulp | grep 694
 ucast eth0 192.168.30.235      # 单播方式连接（主、从都是写对方的IP连接）
 node  drbd-01.i.12582.com  # 声明主节点（uname -n）
 node  drbd-02.i.12582.com  # 声明次节点（uname -n）
 auto_failback on                    # 自动切换（主节点恢复后会自动切换回来）
 respawn hacluster /usr/lib64/heartbeat/ipfail  #监控ipfail进程是否挂掉，否则重启它
</code></pre></li>
<li><p>编辑认证文件</p>

<pre><code> vim /etc/ha.d/authkeys
 auth 1
 1 sha1 MySecret&amp;nbsp;
</code></pre></li>
<li><p>权限</p>

<pre><code> chmod 600 /etc/ha.d/authkeys
</code></pre></li>
<li><p>编辑资源文件</p>

<pre><code> vim /etc/ha.d/haresources
 drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0 drbddisk::r0 
 Filesystem::/dev/drbd0::/data::ext4
</code></pre>

<p> drbd-01.i.12582.com   主节点的主机名</p>

<p> IPaddr::192.168.30.229/24/eth0    设置虚拟IP</p>

<p> drbddisk::r0                  管理资源r0</p>

<p> Filesystem::/dev/drbd0::/data::ext4   执行umount和mount操作</p></li>
<li><p>次节点操作：</p>

<p> 将ha.cf中的192.168.30.235改成192.168.30.234</p></li>
</ol>


<h3>DRBD主从自动切换测试</h3>

<ol>
<li><p>首先在 drbd-01启动heartbeat：</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>接着在 drbd-02 启动heartbear:</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>在drbd-01输入：</p>

<pre><code> ip a

 1: lo: LOOPBACK,UP,LOWER_UP&amp;gt; mtu 16436 qdisc noqueue state UNKNOWN
     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
     inet 127.0.0.1/8 scope host lo
     inet6 ::1/128 scope host
         valid_lft forever preferred_lft forever
 2: eth0:  BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
     link/ether 08:00:27:98:a2:6c brd ff:ff:ff:ff:ff:ff
     inet 192.168.30.234/24 brd 192.168.30.255 scope global eth0
     inet &lt;b&gt;192.168.30.229&lt;/b&gt;/24 brd 192.168.30.255 scope global secondary eth0:0
     inet6 fe80::a00:27ff:fe98:a26c/64 scope link
         valid_lft forever preferred_lft forever
</code></pre>

<p>从结果可以看出，VIP已经出现。</p></li>
<li><p>停止drbd-01的heartbeat服务或将网线断掉，同时监控drbd-02的DRBD状态.</p></li>
<li><p>drbd-02操作：</p>

<pre><code> watch -n 1 /etc/init.d/drbd status
</code></pre>

<p>如果一切正常，可以看到状态在不断变化。</p></li>
<li><p>恢复drbd-01的heartbeat服务或将网线接上，同时监控drbd-02的DRBD状态，如果正常drbd-01又变为主节点（auto_failback on 决定）了。</p></li>
</ol>


<h2>Mysql+DRBD+Heartbeat配置</h2>

<h3>Mysql安装</h3>

<p><strong>安装Mysql依赖包</strong></p>

<pre><code>yum -y install gcc gcc-c++ ncurses-devel libtool zlib-devel bison
</code></pre>

<p><b>创建用户与组</b></p>

<pre><code>groupadd mysqluseradd -g mysql mysql
</code></pre>

<p><b>设置内核参数</b></p>

<pre><code>vi /etc/security/limits.conf
mysql              soft    nproc   2047
mysql              hard    nproc   16384
mysql              soft    nofile  1024
mysql              hard    nofile  65536
</code></pre>

<p><b>安装Mysql</b></p>

<p>由于源码安装Mysql5.6需要依赖cmake，必须先安装cmake：</p>

<pre><code>mkdir ~/software; cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/cmake-2.8.4.tar.gz
tar zxvf cmake-2.8.4.tar.gz
cd cmake-2.8.4
./configure
gmake &amp;&amp;  make install
</code></pre>

<p>开始安装Mysql</p>

<pre><code>cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/mysql-5.6.5-m8.tar.gz
tar zxvf mysql-5.6.5-m8.tar.gz
cd mysql-5.6.5-m8

cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
  -DDEFAULT_CHARSET=utf8 \
  -DDEFAULT_COLLATION=utf8_general_ci \
  -DENABLED_LOCAL_INFILE=ON \
  -DWITH_INNOBASE_STORAGE_ENGINE=1 \
  -DWITH_FEDERATED_STORAGE_ENGINE=1 \
  -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
  -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
  -DWITH_PARTITION_STORAGE_ENGINE=1 \
  -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \
  -DCOMPILATION_COMMENT='agenge for mysql' \
  -DWITH_READLINE=ON \
  -DMYSQL_UNIX_ADDR=/data/mysqldata/3306/mysql.sock \
  -DSYSCONFDIR=/data/mysqldata/3306
  make &amp;&amp; make install
</code></pre>

<h3>Mysql设置</h3>

<ul>
<li><p>设置权限</p>

<pre><code>  chown -R mysql:mysql /usr/local/mysql
</code></pre></li>
<li><p>设置环境变量</p>

<pre><code>  vi /etc/profileexport PATH=/usr/local/mysql/bin:$PATH
</code></pre></li>
<li><p>使环境变量马上生效</p>

<pre><code>  source /etc/profile
</code></pre></li>
<li><p>设置相关存储路径</p>

<pre><code>  cd /data
  mkdir -p mysqldata/3306/{data,binlog,tmp,innodb_ts,innodb_log}
  cd /data/mysqldata/mkdir script backup
  chown -R mysql:mysql /data/mysqldata/
</code></pre></li>
<li><p>创建my.cnf</p>

<pre><code>  vi /data/mysqldata/3306/my.cnf
  [client]
  port = 3306
  socket = /data/mysqldata/3306/mysql.sock

  # Here follows entries for some specific programs

  # The MySQL server
  [mysqld]
  port     = 3306
  user     = mysql
  socket   = /data/mysqldata/3306/mysql.sock
  pid-file = /tmp/mysql.pid
  basedir  = /usr/local/mysql
  datadir  = /data/mysqldata/3306/data
  tmpdir   = /data/mysqldata/3306/tmp
  open_files_limit    = 10240
  server-id = 333306
  lower_case_table_names = 1
  character-set-server = utf8
  skip-name-resolve
  max_connections = 1000
  max_connect_errors = 100000
  max_allowed_packet = 512M
  max_heap_table_size = 1024M
  max_length_for_sort_data = 4096
  back_log=100
  interactive_timeout = 28800
  wait_timeout = 28800

  default-storage-engine = InnoDB

  net_buffer_length = 8K
  sort_buffer_size = 2M
  join_buffer_size = 4M
  read_buffer_size = 2M
  read_rnd_buffer_size = 16M

  query_cache_size = 128M
  query_cache_limit = 2M
  query_cache_min_res_unit = 2k

  thread_cache_size = 300
  table_open_cache = 1024
  tmp_table_size = 256M

  #***********  Logs related settings ***********
  log-bin  = ../binlog/mysql-bin
  relay-log = ../binlog/mysql-relay-bin
  binlog_format=mixed
  binlog_cache_size=32m
  max_binlog_cache_size=512m
  max_binlog_size=512m
  long_query_time = 1
  log_output = FILE
  log-error =  ../mysql-error.log
  slow_query_log = 1
  slow_query_log_file = ../slow_statement.log
  #log_queries_not_using_indexes
  general_log = 0
  general_log_file = ../general_statement.log
  expire-logs-days = 14

  #*********** MyISAM Specific options ***********
  key_buffer_size = 32M
  bulk_insert_buffer_size = 64M
  myisam_sort_buffer_size = 128M
  myisam_max_sort_file_size = 10G
  myisam_repair_threads = 1
  myisam_recover

  #*********** INNODB Specific options ***********
  innodb_file_per_table = 1
  transaction-isolation = READ-COMMITTED

  innodb_additional_mem_pool_size = 16M
  innodb_buffer_pool_size = 1192M
  innodb_data_home_dir = ../innodb_ts
  innodb_data_file_path = ibdata1:2048M:autoextend

  innodb_file_io_threads = 4
  innodb_thread_concurrency = 8
  innodb_log_buffer_size = 128M
  innodb_log_file_size = 256M
  innodb_log_files_in_group = 3

  innodb_log_group_home_dir = ../innodb_log
  innodb_flush_log_at_trx_commit = 2
  innodb_max_dirty_pages_pct = 80
  innodb_lock_wait_timeout = 120
  innodb_flush_method=O_DIRECT
  performance_schema

  [mysqldump]
  quick
  max_allowed_packet = 512M

  [mysql]
  no-auto-rehash
  # Remove the next comment character if you are not familiar with SQL
  #safe-updates

  [myisamchk]
  key_buffer_size = 32M
  sort_buffer_size = 20M
  read_buffer_size = 2M
  write_buffer_size = 2M

  [mysqlhotcopy]
  interactive-timeout

  [mysqld_safe]
  open-files-limit = 8192
</code></pre></li>
<li><p>安装mysql database，并启动Myql：</p>

<pre><code>  /usr/local/mysql/scripts/mysql_install_db \
    --datadir=/data/mysqldata/3306/data \
    --defaults-file=/data/mysqldata/3306/my.cnf \
    --basedir=/usr/local/mysql --user=mysql
  mysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
  mysqladmin -uroot password 'new_password' -S /data/mysqldata/3306/mysql.sock

  mysql -uroot -p123456
  mysql&gt; select user,host from mysql.user;
  mysql&gt; delete from mysql.user where (user,host) not in (select 'root','localhost');
  mysql&gt; delete from mysql.proxies_priv where host='localhost.localdomain';
  mysql&gt; delete from mysql.db;
  mysql&gt; flush privileges;
  mysql&gt; quit
  mysqladmin -uroot -p123456 shutdownrm -f /data/mysqldata/3306/mysql-error.logmysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
</code></pre></li>
<li><p>启动Mysql脚本</p>

<pre><code>  cp support-files/mysql.server  /etc/init.d/mysqld
  chmod +x /etc/init.d/mysqld
</code></pre></li>
<li><p>修改ha.cf</p></li>
</ul>


<p> 由于现在是管理Mysql，故要将mysqld由heartbeat管理（2个节点都执行）</p>

<pre><code>    cat /etc/ha.d/haresources
    drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0:0  drbddisk::r0 
    Filesystem::/dev/drbd0::/data::ext4 mysqld
</code></pre>

<ul>
<li><p>测试</p>

<ol>
<li><p> 准备Mysql数据（节点1操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; create database mydb;
  Query OK, 1 row affected (0.02 sec)

  mysql&gt; use mydb;
  Database changed
  mysql&gt; create table t_1( id  int not null, name varchar(10));
  Query OK, 0 rows affected (0.14 sec)
  mysql&gt; insert into t_1 values(1,'aaa');
  Query OK, 1 row affected (0.00 sec)

  mysql&gt; commit;
  Query OK, 0 rows affected (0.00 sec)
  mysql&gt; quit;
  Bye
</code></pre></li>
<li><p> 切换主、次节点，同时监控drbd-02服务器的日志</p>

<pre><code>  watch -n 1 /etc/init.d/drbd status
</code></pre></li>
</ol>


<p>  如果一切正常，可以看到ro的状态从“Secondary/Primary”变成“Primary/Secondary”。</p>

<p>  例如偶切换成的状态如下：</p>

<pre><code>      drbd driver loaded OK; device status:
      version: 8.4.3 (api:1/proto:86-101)
      GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by root@&lt;b&gt;drbd-02.i.12582.com&lt;/b&gt;, 2013-08-08 16:46:23
      m:res  cs         ro                 ds                 p  mounted  fstype
      0:r0   Connected  &lt;b&gt;Primary/Secondary&lt;/b&gt;  UpToDate/UpToDate  C  /data    ext4
</code></pre>

<ol>
<li><p> 查询数据是否丢失（drbd-02操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; use mydb;
  Database changed
  mysql&gt; select * from t_1;
  +----+------+
  | id | name |
  +----+------+
  |  1 | aaa  |
  +----+------+
  1 row in set (0.00 sec)
</code></pre></li>
</ol>


<p>  以看到在drbd-02上数据已经有了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zabbix配置与报警设置]]></title>
    <link href="http://agenge.github.io/blog/2013/05/29/zabbix-config-emailalert/"/>
    <updated>2013-05-29T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/29/zabbix-config-emailalert</id>
    <content type="html"><![CDATA[<p>上次偶写了一篇<a href="http://agenge.com/blog/2013/05/02/zabbix-source-install-conf">Zabbix 源码安装与配置</a> ，安装之后默认是无法监控客户端主机滴，所以偶今天专门写篇文章来介绍Zabbix配置，主要涉及到：添加主机、邮件报警及一些常见的操作流程，希望对初学者有所帮助。</p>

<h2>监控机</h2>

<p>通在安装Zabbix之后，还需要在Web管理控制台添加需要监控的主机，下列是以添加一台监控主机为例进行演示。</p>

<ol>
<li>“Configuration” &ndash;> “Hosts”，点击添加一台主机“Host”:</li>
</ol>


<p> <img src="/images/2013/05/01.jpg" title="" ></p>

<ol>
<li>需要填写的内容主要为：“主机(Host)”、“模板(Templates)”，详细操作请见下列图中所示：主机的设置如下：</li>
</ol>


<p> <img src="/images/2013/05/02.jpg" title="" >
 模板的设置如下：</p>

<p> <img src="/images/2013/05/03.jpg" title="" ></p>

<p> 点击“添加(Add)”之后，从弹出的子页面选择需要的模板，Zabbix默认已自带非常多的模板，</p>

<p> 例如Mysql、Zabbix Server、Zabbix Agentd、OS Linux等。</p>

<p>  <img src="/images/2013/05/04.jpg" title="" ></p>

<p> 勾选所需要的监控模板后，点击最下边的“选择(Select)”，回到之前的模板标签页，最后一定要记得保存(Save)。</p>

<p>  <img src="/images/2013/05/05.jpg" title="" ></p>

<ol>
<li>如果一切正常，默认在1分钟之后就会变成可用状态：
<img src="/images/2013/05/06.jpg" title="" ></li>
</ol>


<!-- more -->


<h2>报警设置</h2>

<p>在添加监控主机之后，还需要邮件报警设置，否则监控人员无法及时掌握系统状态，报警一般是邮件报警与短信报警，甚至相两者结合。 其中邮件报警又可分为自定义脚本警报和自己搭建邮件服务器进行报警，短信报警暂时不涉及，后面会有专门章节进行介绍，本章只涉及到自定义邮件报警的设置，使用一个Msmtp（兼容SendMail接口的SMTP客户端. 工具，关于它的原理介绍，请自行搜索。下面是详细的安装步骤：</p>

<h3>邮件报警设置</h3>

<ol>
<li>安装
<code>
tar jxvf msmtp-1.4.31.tar.bz2
cd msmtp-1.4.31
./configure --prefix=/usr/local/msmtp
make &amp;&amp; make install
mkdir /usr/local/msmtp/etc
touch /usr/local/msmtp/etc/msmtprc
</code></li>
<li>配置
```
vim /usr/local/msmtp/etc/msmtprc

<h6>#</h6>

defaults
account default
host smtp.139.com
port 25
from <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#116;&#x61;&#117;&#114;&#x75;&#115;&#53;&#50;&#x40;&#49;&#x33;&#x39;&#46;&#99;&#x6f;&#x6d;">&#116;&#x61;&#x75;&#114;&#x75;&#x73;&#x35;&#x32;&#x40;&#x31;&#51;&#57;&#46;&#99;&#x6f;&#109;</a>
auth login
tls off
user <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#x74;&#x61;&#x75;&#x72;&#117;&#115;&#x35;&#x32;&#64;&#49;&#x33;&#57;&#46;&#x63;&#x6f;&#109;">&#116;&#97;&#117;&#114;&#x75;&#x73;&#x35;&#x32;&#64;&#x31;&#51;&#x39;&#46;&#99;&#111;&#109;</a>
password 123456
logfile /var/log/mmlog

<h6>#</h6>

<p>```
host/from/user/password这三个字段，请根据具体情况修改。</p></li>
</ol>


<p> 安装Mutt，Mutt是一个邮件用户代理工作，其本身不发送和接收邮件，需要调用邮件传输代码(例如Msmtp或sendmail) 来发送和接收邮件.</p>

<pre><code>```
yum -y install mutt
vim /etc/Muttrc
set sendmail="/usr/local/msmtp/bin/msmtp"
set use_from=yes
set realname="taurus52@163.com"
set editor="vi"
</code></pre>

<p>```
  * /etc/Muttrc为全局设置，如果只是对某个用户设置，可以在~/muttrc中设置。
  * sendmail设置为msmtp的绝对路径
  * realname 设置你的email地址
  * editor 设置为你的编辑器，如果你中emacs忠实用户，也是可以滴。</p>

<p> 测试是否能够发送邮件：
<code>
echo "this is a test mail" &gt;&gt; /tmp/files
echo "testmail" | mutt -s "test" -a /tmp/files  test_zabbix@gmail.com
</code>
  * -a 代表添加附件
  * “testmail” 邮件正文
  * -s “test” 邮件标题
  * <a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x74;&#101;&#x73;&#x74;&#95;&#122;&#97;&#x62;&#98;&#105;&#120;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#x65;&#x73;&#x74;&#x5f;&#122;&#x61;&#98;&#x62;&#x69;&#x78;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a> 为接收的邮件人。</p>

<p> 登录邮件客户端察看确认收到邮件：</p>

<p> <img src="/images/2013/05/07.jpg" title="" ></p>

<p> 修改zabbix_server.conf以下内容：
<code>
 mkdir -p /data/zabbix/alertscripts
 vim zabbix_server.conf
 AlertScriptsPath=${datadir}/alertscripts
</code>
 创建一个监控脚本：
<code>
 vim /data/zabbix/alertscripts/zabbix_monitor
 #!/bin/bash
 $1 to mail address
 $2 mail subject
 $3 mail content
 echo "$3" | mutt -s "$2" $1
</code>
 修改权限：
<code>
 chown zabbix:zabbix /data/zabbix/alertscripts
</code>
 到目前为止，已经手动测试通过邮件报警的功能，接下来需要将它集成到zabbix监控系统中。</p>

<ol>
<li><p>点击“管理(Administration)”->“媒体类型(Media types)”，点击页面最右边的“添加媒体类型(Cretae media type)”:
<img src="/images/2013/05/08.jpg" title="" ></p></li>
<li><p>Description： 此为描述，可随意填写。</p></li>
<li>Type： 选择 “Script’。</li>
<li>Script name：填写刚才创建的shell脚本(当然，也可以是其他脚本)名称，例如zabbix_monitor。</li>
<li>Enabled： 启用此脚本。</li>
</ol>


<p> 最后记得“Save”哦。</p>

<h4>添加用户和组</h4>

<ol>
<li>添加用户组</li>
</ol>


<p> 点击“管理(Administration)”->“用户(Users)”，点击最右边的“创建用户组(Create user group)”:</p>

<p> <img src="/images/2013/05/09.jpg" title="" ></p>

<p> 用户组(User group)只需要填写“Group name”，其他默认即可。</p>

<p> <img src="/images/2013/05/10.jpg" title="" ></p>

<p> 权限(Permissions)需要添加之前新增的主机，点击“Read-write”下的“添加(Add)”，并在的子页面选择对应的主机组，例如选择“Puppet”：</p>

<p> <img src="/images/2013/05/11.jpg" title="" ></p>

<p> 点击“Select”确认。最后“保存(Save)”，即添加一个用户组(puppet)。</p>

<ol>
<li>添加用户</li>
</ol>


<p> 添加一个用户组之后，此用户组中并没有任何一个用户，必须在此用户组中增加用户才行，在用户组列表页面，点击用户组“Puppet”之后的“Users(0)”：</p>

<p>  <img src="/images/2013/05/12.jpg" title="" ></p>

<p>  在跳转后的“Users”页面最右边，点击“创建用户(Create user)”：</p>

<p>  <img src="/images/2013/05/13.jpg" title="" ></p>

<p>  之后有三个标签需要设置</p>

<ul>
<li>用户标签：</li>
</ul>


<p>  <img src="/images/2013/05/14.jpg" title="" ></p>

<ul>
<li>媒体标签：</li>
</ul>


<p>  <img src="/images/2013/05/15.jpg" title="" ></p>

<ul>
<li>权限标签(Permissions)：</li>
</ul>


<p>  <img src="/images/2013/05/16.jpg" title="" ></p>

<p>  此处就能看到之前在创建用户组时看到的权限，最后点击“保存(Save)”。</p>

<h4>触发器设置</h4>

<p>添加邮件报警设置和用户设置之后，还需要配置触发器，表示当某个触发器达到设置的值后，就会报警。</p>

<p>Action标签：</p>

<p><img src="/images/2013/05/17.jpg" title="" ></p>

<p>条件(Conditions)标签：</p>

<p><img src="/images/2013/05/18.jpg" title="" ></p>

<p><img src="/images/2013/05/19.jpg" title="" ></p>

<p>操作(Operations)标签：</p>

<p><img src="/images/2013/05/20.jpg" title="" ></p>

<p><img src="/images/2013/05/21.jpg" title="" ></p>

<p>以上就是Zabbix的基本操作流程，如果你还有疑问，可回复讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量装机---Linux无人值守之Kickstart]]></title>
    <link href="http://agenge.github.io/blog/2013/05/23/linux-kickstart/"/>
    <updated>2013-05-23T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/23/linux-kickstart</id>
    <content type="html"><![CDATA[<p>前段时间总是忙于安装系统，对于偶这种懒人来说，一天安装两遍都无法承受，别说更多，基本上有两个原因造出：</p>

<ul>
<li>时间很宝贵。</li>
<li>偶比较懒惰。</li>
</ul>


<p>一直习惯于 RedHat 家族产品，从最开始接触的RHEL，到后来同时使用的Fedora，及目前使用最多的CentOS，这无疑是偶最为熟悉的Linux，为啥偶要提这些捏？因为以下操作是基于这些Linux操作的啦，费话在此打住，以下为详细操作步骤.</p>

<h2>安装基础包</h2>

<p>_注：以下Yum操作是基于偶本地的ftp 仓库源，&mdash;enablerepo是告诉yum使用这个指定的安装源，
默认情况下，CentOS自带的仓库源也是可以用滴，优先推荐各位使用哦，有个前提条件：连网！
What？服务器不能上网？公司不许随意连公网？能说脏话吗？Fuck! _
<code>
yum -y install dhcp-* --enablerepo=centos5.5
yum -y install tftp-* --enablerepo=centos5.5
yum -y install vsftpd-* --enablerepo=centos5.5
cp /usr/share/doc/dhcp-3.0.5/dhcpd.conf.sample /etc/dhcpd.conf
</code></p>

<h2>配置dhcp</h2>

<!-- more -->


<pre><code>vi /etc/dhcpd.conf
</code></pre>

<p>添加以下信息：
<code>
filename "pxelinux.0";     # 指定bootloader文件
next-server 192.168.0.20;  # 指定索取pxelinux.0的tftp服务器IP
</code>
添加的这两行可在大括号外面，也可在里面，next-server选项可写可不写，但建议各位写上啦。
<code>
service dhcpd start   # 启动服务
cd /tftpboot
cp /mnt/isolinux/* ./
</code>
实际需要的是vmlinuz，initrd.img  *.msg 这几个文件，但为了操作方便，偶直接把isolinux目录下的文件全cp过来（偶在文章开头就说过偶比较懒惰，换成生产环境千万别这样玩）。</p>

<p><code>
mkdir pxelinux.cfg
mv isolinux.cfg pxelinux.cfg/default
cp /usr/lib/syslinux/pxelinux.0 /tftpboot
</code>
default配置文件的作用是告诉主机从哪里去加载操作系统内核，并将启动加载文件拷到/tftpboot下。修改tftp参数并启动tftp服务
```
vi /etc/xinetd.d/tftp</p>

<h1>*********************************</h1>

<p>service tftp
{</p>

<pre><code>socket_type = dgram
protocol = udp
wait = yes
user = root
server = /usr/sbin/in.tftpd
server_args = -s /tftpboot
disable = &lt;span style="color: #ff0000;"&gt;&lt;strong&gt;no&lt;/strong&gt;&lt;/span&gt;
per_source = 11
cps = 100 2
flags = IPv4
</code></pre>

<p>}</p>

<h1>*********************************</h1>

<p><code>
tftpboot 这个参数主要是指定tftp client 客户端从服务器的哪个目录去加载bootloader的pxelinux.0文件。启动服务：
</code>
service xinetd restart
chkconfig tftp on
vi /tftpboot/pxelinux.cfg/default
<code>
修改第3行，第12行.
</code>
default linux
prompt 1
timeout 10 //时间调小点
display boot.msg
F1 boot.msg
F2 options.msg
F3 general.msg
F4 param.msg
F5 rescue.msg
label linux
kernel vmlinuz
append ks=<a href="ftp://192.168.0.20/pub/ks.cfg">ftp://192.168.0.20/pub/ks.cfg</a> initrd=initrd.img
label text
```</p>

<h2>安装Kickstart</h2>

<p><code>
yum install -y *kickstart* --enablerepo=centos5.5
system-config-kickstart
</code>
_提示：所有以system-config开头的命令，都需要图形界面的支持。这不是必须的，前提是对ks的配置文件语法很熟悉啦。 _</p>

<h3>配置ks.cfg</h3>

<p>首先将 ks.cfg 保存到 /var/ftp/pub 目录下，将修改相应权限：</p>

<pre><code>chmod 707 /var/ftp/pub/ks.cfg
</code></pre>

<p>以下是偶使用的ks.cfg全文 ，请各位根据自己情况修改：</p>

<p>```</p>

<h1>platform=x86, AMD64, or Intel EM64T</h1>

<h1>System authorization information</h1>

<p>auth &mdash;useshadow &mdash;enablemd5</p>

<h1>System bootloader configuration</h1>

<p>bootloader &mdash;location=mbr</p>

<h1>Partition clearing information</h1>

<p>clearpart &mdash;all &mdash;initlabel</p>

<h1>Use graphical install</h1>

<h1>graphical</h1>

<p>text</p>

<h1>Firewall configuration</h1>

<p>firewall &mdash;disabled</p>

<h1>Run the Setup Agent on first boot</h1>

<p>firstboot &mdash;disable</p>

<h1>System keyboard</h1>

<p>keyboard us</p>

<h1>System language</h1>

<p>lang en_US</p>

<h1>Installation logging level</h1>

<p>logging &mdash;level=info</p>

<h1>Use network installation</h1>

<p>url &mdash;url=<strong><a href="ftp://192.168.30.210/pub/x86_64/centos5.5">ftp://192.168.30.210/pub/x86_64/centos5.5</a></strong></p>

<h1>Network information</h1>

<p>network &mdash;bootproto=dhcp &mdash;device=eth0 &mdash;onboot=on</p>

<h1>Reboot after installation</h1>

<p>reboot</p>

<h1>Root password</h1>

<p>rootpw &mdash;iscrypted $1$R79JLo34$.Yi4OUmL5PhpsxzSTL1hX1</p>

<h1>SELinux configuration</h1>

<p>selinux &mdash;disabled</p>

<h1>System timezone</h1>

<p>timezone Asia/Chongqing</p>

<h1>Install OS instead of upgrade</h1>

<p>install</p>

<h1>X Window System configuration information</h1>

<p>xconfig &mdash;defaultdesktop=GNOME &mdash;depth=8 &mdash;resolution=1026x768 &mdash;startxonboot</p>

<h1>Disk partitioning information</h1>

<p>part /boot &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;ext3&rdquo; &mdash;size=256
part swap &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;swap&rdquo; &mdash;size=2048</p>

<h1>part / &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;ext3&rdquo; &mdash;grow &mdash;size=1</h1>

<p>part / &mdash;bytes-per-inode=4096 &mdash;fstype=&ldquo;ext3&rdquo; &mdash;grow &mdash;size=102400</p>

<p>%packages &mdash;resolvedeps</p>

<h1>@system-tools</h1>

<h1>@gnome-desktop</h1>

<p>@base-x</p>

<h1>@sound-and-video</h1>

<h1>@chinese-support</h1>

<h1>@graphical-internet</h1>

<h1>@admin-tools</h1>

<h1>@editors</h1>

<h1>key &mdash;skip</h1>

<p>```</p>

<p>所有以井号(#)开头的为注释行.</p>

<ul>
<li>url是操作系统的镜像地址</li>
<li>part / (未注释行)是指根分区分100G, 如果你的磁盘很大，剩余的空间可在安装系统后根据您的具体需求而设。</li>
<li>@bash-x  安装最基础的系统包</li>
<li>resolvedeps 将自动解决包之间的依赖关系。</li>
</ul>


<h3>启动所有服务</h3>

<p><code>
service dhcpd restart
service xinetd restart
service vsftpd restart
</code></p>

<h2>PXE安装系统</h2>

<p>当服务器一切工作准备就绪，就开始大规模安装Linux系统吧，由于各个主板对应的BIOS设置不同，此处无法满足所有的需求，通常做法是：</p>

<p>进入BIOS &ndash;> PXE boot &ndash;> enable &ndash;> save and reboot</p>

<p>如果各位有任何疑问，请留言回复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zabbix 源码安装与配置]]></title>
    <link href="http://agenge.github.io/blog/2013/05/02/zabbix-source-install-conf/"/>
    <updated>2013-05-02T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/05/02/zabbix-source-install-conf</id>
    <content type="html"><![CDATA[<h2>1、安装环境</h2>

<ul>
<li>操作系统：:CentOS 5.5 64位</li>
<li>Mysql：5.5.27</li>
<li>Apache httpd：2.4.4</li>
<li>Zabbix：2.0.6</li>
</ul>


<h2>2、源码安装</h2>

<h3>安装Zabbix</h3>

<h4>创建用户</h4>

<p><code>
groupadd zabbix
useradd -g zabbix -M -s /sbin/nologin zabbix
</code></p>

<h3>源码安装Zabbix</h3>

<p>下载页面请点击 <a href="http://www.zabbix.com/download.php">这里</a>。下载之后按照以下步骤执行：</p>

<p>```
yum install wget curl-devel net-snmp-devel php-bcmath
tar zxvf zabbix-2.0.6.tar.gz
cd zabbix-2.0.6
./configure &mdash;prefix=/data/zabbix \
  &mdash;enable-server &mdash;enable-agent \
  &mdash;with-mysql &mdash;with-net-snmp \
  &mdash;with-libcurl &mdash;enable-proxy</p>

<p>make &amp;&amp; make install
```
如果一切顺利，安装完成。</p>

<h3>创建Zabbix 数据库</h3>

<p>这里假设你已经安装好Mysql数据库，具体的安装方法请自己到网上搜索解决。
```
mysql -uroot -p
Enter password:</p>

<p>Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 63
Server version: 5.0.95 Source distribution</p>

<p>Copyright &copy; 2000, 2011, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql> create database zabbix character set utf8;
mysql> grant all privileges on zabbix.* to zabbix@localhost identified by &lsquo;zabbix&rsquo;;
Query OK, 1 row affected (0.00 sec)</p>

<p>mysql> quit
mysql -uzabbix -p zabbix &lt; database/mysql/schema.sql
mysql -uzabbix -p zabbix &lt; database/mysql/images.sql
mysql -uzabbix -p zabbix &lt; database/mysql/data.sql
```</p>

<h3>配置Zabbix</h3>

<p>设置服务自启动：
<code>
cp misc/init.d/fedora/core/zabbix_server /etc/init.d/
chmod +x /etc/init.d/zabbix_server
</code>
修改zabbix_server中的BASEDIR=/data/zabbix
<code>
chkconfig --add zabbix_server
chkconfig zabbix_server on
</code>
设置zabbix 配置文件：
<code>
vim /data/zabbix/etc/zabbix/zabbix_server.conf
DBName=zabbix
DBPassword=zabbix
</code></p>

<p>只需要修改密码即可，其他都保持默认值。当然如果你的Mysql不是安装在本地，肯定也要修改相应的IP啦。</p>

<h4>启动Zabbix Server</h4>

<p><code>
/etc/init.d/zabbix_server start
</code>
确认zabbix server是否已经启动：
```
netstat -antulp | grep zabbix</p>

<p>tcp        0      0 0.0.0.0:10051               0.0.0.0:*                   LISTEN      19087/zabbix_server
```</p>

<!-- more -->


<h2>3、安装Zabbix Web接口</h2>

<p>Zabbix前端使用PHP编写，故Web Server必须支持PHP。</p>

<h4>安装Apr</h4>

<p><code>
wget http://mirrors.cnnic.cn/apache//apr/apr-1.4.6.tar.gz
tar zxvf apr-1.4.6.tar.gz
cd apr-1.4.6
./configure --prefix=/usr/local/apr
make &amp;&amp; make install
</code></p>

<h4>安装Apr-utils</h4>

<p><code>
wget http://mirrors.cnnic.cn/apache//apr/apr-util-1.5.2.tar.gz
tar zxvf apr-util-1.5.2.tar.gz
cd apr-util-1.5.2
./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/
make &amp;&amp; make install
</code></p>

<h4>安装pcre</h4>

<p><code>
tar zxvf pcre-8.32.tar.gz
cd pcre-8.32
./configure
make &amp;&amp; make install
</code></p>

<h3>安装Apache httpd</h3>

<p>```
wget <a href="http://labs.mop.com/apache-mirror//httpd/httpd-2.4.4.tar.bz2">http://labs.mop.com/apache-mirror//httpd/httpd-2.4.4.tar.bz2</a>
tar jxvf httpd-2.4.4.tar.bz2
cp -rf apr-1.4.6 /data/software/httpd-2.4.4/srclib/apr
cp -rf apr-util-1.5.2 /data/software/httpd-2.4.4/srclib/apr-util
cd httpd-2.4.4
./configure &mdash;prefix=/usr/local/httpd \
  &mdash;enable-modules &mdash;enable-ssl &mdash;enable-module=so \
  &mdash;with-apr=/usr/local/apr \
  &mdash;with-apr-util=/usr/local/apr-util &mdash;with-included-apr \
  &mdash;enable-mods-shared=most &mdash;with-included-apr</p>

<p>make &amp;&amp; make install
/usr/local/httpd/bin/apachectl start
```</p>

<h4>安装 PHP</h4>

<p>安装gettext（国际化支持）：
<code>
wget http://ftp.gnu.org/pub/gnu/gettext/gettext-0.18.2.tar.gz
tar zxvf gettext-0.18.2.tar.gz
cd gettext-0.18.2
./configure
make &amp;&amp; make install
</code>
安装libpng：
<code>
tar zxvf libpng-1.6.1.tar.gz
cd libpng-1.6.1
./configure --prefix=/usr/local/libpng --enable-shared
make &amp;&amp; make install
</code>
安装freetype：
<code>
tar jxvf freetype-2.4.11.tar.bz2
cd freetype-2.4.11
./configure --prefix=/usr/local/freetype&lt;b&gt;&lt;/b&gt;
make &amp;&amp; make install
</code>
安装JPEG：
<code>
wget http://www.ijg.org/files/jpegsrc.v9.tar.gz
tar zxvf jpegsrc.v9.tar.gz
cd jpeg-9/
./configure --prefix=/usr/local/jpeg9 --enable-shared --enable-static
make &amp;&amp; make install
</code>
安装GD库：
<code>
wget https://bitbucket.org/libgd/gd-libgd/get/GD_2_0_33.tar.gz
tar zxvf GD_2_0_33.tar.gz
cd libgd-gd-libgd-486e81dea984/src
./configure --with-png  --with-freetype  --with-jpeg
make install
</code>
安装PHP：
```
wget <a href="ftp://192.168.30.211:/pub/Tools/php-5.3.19.tar.bz2">ftp://192.168.30.211:/pub/Tools/php-5.3.19.tar.bz2</a>
tar jxvf php-5.3.19.tar.bz2</p>

<p>./configure &mdash;prefix=/usr/local/php  \
  &mdash;with-config-file-path=/usr/local/php/etc \
  &mdash;disable-debug &mdash;disable-rpath &mdash;with-gettext  \
  &mdash;with-mcrypt &mdash;with-mysql=/usr/local/mysql \
  &mdash;with-mysql-sock=/data/mysqldata/3306/mysql.sock \
  &mdash;with-mysqli=/usr/local/mysql/bin/mysql_config \
  &mdash;enable-mbstring &mdash;enable-pdo &mdash;with-curl \
  &mdash;enable-inline-optimization &mdash;with-bz2 \
  &mdash;with-zlib &mdash;enable-sockets &mdash;enable-bcmath \
  &mdash;enable-sysvsem &mdash;enable-sysvshm &mdash;enable-pcntl \
  &mdash;enable-mbregex &mdash;with-mhash &mdash;enable-xml \
  &mdash;enable-zip &mdash;with-pcre-regex &mdash;with-gettext \
  &mdash;with-apxs2=/usr/local/httpd/bin/apxs \
  &mdash;with-gd &mdash;enable-gd-native-ttf &mdash;with-jpeg-dir=/usr/local/include \
  &mdash;with-png-dir=/usr/local/include &mdash;with-freetype-dir=/usr/include/freetype2</p>

<p>make ZEND_EXTRA_LIBS=&lsquo;-liconv&rsquo;
make install
cp php.ini-production /usr/local/php/etc/php.ini
cp sapi/fpm/init.d.php-fpm.in /etc/init.d/php-fpm
chmod +x /etc/init.d/php-fpm
chkconfig php-fpm on
cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
<code>
修改时区：
</code>
vim /usr/local/php/etc/php.ini
<code>
在 [Date] 之后增加一行：
</code>
date.timezone =  Asia/Chongqing
```
将 max_execution_time 的值修改为 300或更大值，将max_input_time的值修改为300或更大值。</p>

<p>修改httpd.conf：
<code>
vim /usr/local/httpd/conf/httpd.conf
</code>
在最后增加：
<code>
AddType application/x-httpd-php  .php
AddType application/x-httpd-php-source  .phps
</code>
并将：
<code>
DirectoryIndex index.html
</code>
修改为：
<code>
DirectoryIndex index.php index.html
</code></p>

<h4>配置Zabbix Web接口</h4>

<p><code>
mkdir /usr/local/httpd/htdocs/zabbix
cd frontends/php/
cp -a . /usr/local/httpd/htdocs/zabbix/
cd /usr/local/httpd/htdocs/zabbix/
cp conf/zabbix.conf.php.example conf/zabbix.conf.php
vim conf/zabbix.conf.php
</code>
修改好连接Myql数据库的相关信息。</p>

<h4>安装Zabbix前台</h4>

<p>使用浏览器打开Zabbix URL: <a href="http://server_ip/zabbix">http://server_ip/zabbix</a></p>

<p>用户名：admin</p>

<p>密码：  zabbix</p>

<h2>安装Zabbix Agent</h2>

<h3>Zabbix Agent For Linux</h3>

<p>添加用户：
<code>
groupadd zabbix
useradd -g zabbix -M -s /sbin/nologin zabbix
</code>
下载 Zabbix Agent
<code>
wget http://www.zabbix.com/downloads/2.0.6/zabbix_agents_2.0.6.linux2_6.amd64.tar.gz
tar zxvf zabbix_agents_2.0.6.linux2_6.amd64.tar.gz
mv sbin/zabbix_agent* /usr/sbin/
mv bin/zabbix_* /usr/bin/
mkdir -p /etc/zabbix
mv conf/* /etc/zabbix
echo "zabbix_agent    10050/tcp" &gt;&gt; /etc/services
echo "zabbix_agent    10050/udp" &gt;&gt; /etc/services
sed -i 's/Server=127.0.0.1/Server=192.168.30.226/' /etc/zabbix/zabbix_agentd.conf
sed -i 's/Hostname=Zabbix server/Hostname=192.168.30.226/' /etc/zabbix/zabbix_agentd.conf
</code>
启动 Zabbix Agent
<code>
zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf
ps aux | grep zabbix
echo "zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf" &gt;&gt; /etc/rc.local
</code>
测试是否正确
<code>
zabbix_get -s 192.168.30.226 -p 10050 -k agent.ping
1
</code>
如果返回1表示正常。</p>
]]></content>
  </entry>
  
</feed>
