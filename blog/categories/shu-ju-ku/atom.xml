<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类: 数据库 | TaurusHome]]></title>
  <link href="http://agenge.github.io/blog/categories/shu-ju-ku/atom.xml" rel="self"/>
  <link href="http://agenge.github.io/"/>
  <updated>2014-01-12T20:01:53+08:00</updated>
  <id>http://agenge.github.io/</id>
  <author>
    <name><![CDATA[agenge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis安装与配置]]></title>
    <link href="http://agenge.github.io/blog/2013/10/08/redis-install-and-config/"/>
    <updated>2013-10-08T20:05:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/10/08/redis-install-and-config</id>
    <content type="html"><![CDATA[<h2>安装环境</h2>

<ul>
<li>操作系统：CentOS 6.3 64位</li>
<li>Redis：最新版本 2.6.14</li>
</ul>


<h2>Redis安装</h2>

<ol>
<li>下载Redis</li>
</ol>


<p><code>
yum -y install make gcc
wget http://download.redis.io/redis-stable.tar.gz
tar zxvf redis-stable.tar.gz
cd redis-stable
make
make install
</code>
 这样即完成redis的安装,整个安装是否超级简单,至少偶认为不复杂。</p>

<ol>
<li><p>启动和停止Redis
在Linux系统中，启动与停止服务也是非常简单，Redis主要提供以下几个可执行程序：</p></li>
<li><p>redis-server     看名称就明白：Redis服务器</p></li>
<li>redis-cli        Redis命令行客户端</li>
<li>redis-benchmark  Redis性能测试工具</li>
<li>redis-check-aof  AOF文件修复工具</li>
<li>redis-check-dump RDB文件检查工具</li>
</ol>


<p> <strong> 启动Redis </strong></p>

<p> 启动redis,直接在命令行输入：</p>

<p><code>
redis-server
</code></p>

<p> 如果启动正常，就会输出以下类似信息：</p>

<p>```
[2935] 08 Oct 20:29:05.156 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
[2935] 08 Oct 20:29:05.158 * Max number of open files set to 10032</p>

<pre><code>         _._                                                  
    _.-``__ ''-._                                             
</code></pre>

<p>   <em>.&ndash;<code>   `.  `_.  ''-._           Redis 2.6.14 (00000000/0) 64 bit
  .-</code> .&ndash;<code>. </code>\/    </em>.,<em> &lsquo;&rsquo;&ndash;.</em>                                 <br/>
 (    &lsquo;      ,       .&ndash;<code> |</code>,    )     Running in stand alone mode
 |<code>-._</code>&ndash;&hellip;&ndash;<code>__...-.``-._|'</code> <em>.&ndash;&rsquo;|     Port: 6379
 |    <code>-._  </code>.</em>    /     <em>.&ndash;&lsquo;    |     PID: 2935
  <code>-._   </code>&ndash;.</em>  <code>-./  _.-'    _.-'                                   
 |</code>&ndash;.<em><code>-._   </code>&ndash;.__.&ndash;&rsquo;    </em>.&ndash;&lsquo;<em>.&ndash;&rsquo;|                                <br/>
 |    <code>-._</code>&ndash;.</em>        <em>.&ndash;&lsquo;</em>.&ndash;&rsquo;    |           <a href="http://redis.io">http://redis.io</a>      <br/>
  <code>-._   </code>&ndash;.<em><code>-.__.-'_.-'    _.-'                                   
 |</code>&ndash;.</em><code>-._   </code>&ndash;.<strong>.&ndash;&lsquo;    <em>.&ndash;&rsquo;</em>.&ndash;&lsquo;|                                <br/>
 |    <code>-._</code>&ndash;.<em>        </em>.&ndash;&rsquo;<em>.&ndash;&lsquo;    |                                <br/>
  <code>-._   </code>&ndash;.</em><code>-.__.-'_.-'    _.-'                                   
  </code>&ndash;._    `&ndash;.</strong>.&ndash;&rsquo;    _.&ndash;'</p>

<pre><code>   `-._        _.-'                                           
       `-.__.-'                                               
</code></pre>

<p>[2935] 08 Oct 20:29:05.159 # Server started, Redis version 2.6.14
[2935] 08 Oct 20:29:05.159 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &lsquo;vm.overcommit_memory = 1&rsquo; to /etc/sysctl.conf and then reboot or run the command &lsquo;sysctl vm.overcommit_memory=1&rsquo; for this to take effect.
[2935] 08 Oct 20:29:05.159 * The server is now ready to accept connections on port 6379
```</p>

<p> 从输出信息可以看出redis已经启动成功，默认监听的6379端口。不过我们还有更好的办法来启动redis-server，Redis默认已经为我们提供一个系统启动脚本：</p>

<p><code>
cp utils/redis_init_script /etc/init.d/redis_server_6379
chmod +x /etc/init.d/redis_server_6379
mkdir /etc/redis
cp redis.conf /etc/redis/6379.conf
echo "vm.overcommit_memory = 1" &gt;&gt; /etc/sysctl.conf
/etc/init.d/redis_server_6379 start
</code></p>

<p> <strong> 关闭Redis </strong>
 相对启动来讲，关闭redis就更为简单，只需要输入：</p>

<p><code>
redis-cli SHUTDOWN
</code>
 此命令输入完成后，首先会断开所有客户端的连接，然后根本配置进行持久化，如果关闭正常，就会输出以下类似信息：</p>

<p><code>
[2989] 08 Oct 20:46:08.156 # User requested shutdown...
[2989] 08 Oct 20:46:08.156 * Saving the final RDB snapshot before exiting.
[2989] 08 Oct 20:46:08.175 * DB saved on disk
[2989] 08 Oct 20:46:08.175 # Redis is now ready to exit, bye bye...
</code></p>

<hr />

<h2>Redis 命令行客户端</h2>

<p>前面已经介绍过redis-cli这个工具，通过redis-cli向 Redis服务端发送命令有两种方式：</p>

<ul>
<li>将要发送的命令作为 redis-cli 的参数，例如之前介绍过的  redis-cli SHUTDOWN, 此处的SHUTDOWN即是发送命令，也是一个参数。</li>
<li>直接进入 redis-cli 交互式命令行执行命令，例如：</li>
</ul>


<p><code>
redis-cli
redis 127.0.0.1:6379&gt; ping
PONG
</code>
 其中“redis 127.0.0.1:6379>” 是redis-cli的命令提示符，类似Mysql中的“mysql> ” ，ping是Redis内置的命令，用来测试是否与服务器连接正常。</p>

<h2>Redis多数据库</h2>

<p>和Mysql一样，Redis也是支持在同一台服务器启动多个redis server，之前已经有过介绍，在启动redis时，用到/etc/redis/6379.conf 这个配置文件，下面就来介绍如何在一台服务器启动多个redis数据库</p>

<p><code>
cd /etc/redis/
cp 6379.conf 6380.conf
</code>
修改6380.conf 以下内容：</p>

<p><code>
pidfile /var/run/redis_6380.pid
port 6380
</code></p>

<p>保存退出，修改启动服务：</p>

<p><code>
cp /etc/init.d/redis_server_6379 /etc/init.d/redis_server_6380
</code>
将 REDISPORT=6379  修改为 REDISPORT=6380</p>

<p>启动redis server</p>

<p><code>
/etc/init.d/redis_server_6379 start
/etc/init.d/redis_server_6380 start
</code>
上面代表将启动两个redis 数据库，分别监听6379和6380端口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRBD+Heartbeat+Mysql高可用配置]]></title>
    <link href="http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha/"/>
    <updated>2013-08-09T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/08/09/drbd_heartbeat_mysql_ha</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>DRBD全称Distributed Replicated Block （分布式的复制块设备），属于Device公司，但是完全开源。它是一款基于块设备的文件复制解决方案，速度比文件级别的软件如NFS，samba快很多，是很多中小企业的共享存储首选解决方案。</p>

<p>DRBD工作需要在两个节点上同时准备一块一模一样的分区组成镜像，这就是为什么它叫做分布式复制块设备，它主要通过复制数据来实现文件同步（备份），主要用于集群文件共享， 我们通过它的工作原理来了解块复制和文件复制的不同。</p>

<p>首先，您需要知道，DRBD是工作在系统内核空间，而不是用户空间，它直接复制的是二进制数据，这是它速度快的根本原因。其次，DRBD至少需要两个节点来工作，一主一次。</p>

<p>DRBD的文件同步过程和普通复制过程的不同：</p>

<p>DRBD在数据进入Buffer Cache时，先经过DRBD这一层，复制一份数据经过TCP/IP协议封装，发送到另一个节点上，另一个节点通过TCP/IP协议来接受复制过来的数据，同步到次节点的DRBD设备上。</p>

<h2>准备工作</h2>

<p>准备至少2台服务器，且每台服务器有一块磁盘或一个单独未使用的分区，偶的环境如下：</p>

<p><code>
IP地址                硬盘分区        主机名                   操作系统
192.168.30.234      /dev/sdb,8G     drbd-01.i.12582.com     CentOS 6.3 x86_64位   主节点(Primary Node)
192.168.30.235      /dev/sdb,8G     drbd-02.i.12582.com     CentOS 6.3 x86_64位   次节点(Secondary Node)
</code>
注意：如果有服务器有2块或以上网卡的同学，建议将其中一块网卡专门用来做网络心跳线，甚至接入另外一台单独的交换机，本次环境只有单网卡。</p>

<h2>初始化设置</h2>

<p>1  所有节点关闭iptables和SELinux</p>

<p>2  在所有节点/etc/hosts加入以下内容：
```</p>

<pre><code>192.168.30.234  drbd-01.i.12582.com drbd-01
192.168.30.235  drbd-02.i.12582.com drbd-02
</code></pre>

<p>```</p>

<p>3  所有节点创建独立分区：</p>

<pre><code>fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disk label
Building a new DOS disk
label with disk identifier 0x46b64833.Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.
Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)
WARNING: DOS-compatible mode is deprecated. It's strongly recommended to
switch off the mode (command 'c') and change display units to
sectors (command 'u').

Command (m for help): p
Disk /dev/sdb: 8589 MB, 8589934592 bytes
255 heads, 63 sectors/track, 1044 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x46b64833

Device Boot    Start        End        Blocks    Id    System

Command (m for help): n
Command action
e   extended
p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-1044, default 1):
Using default value 1
Last cylinder, +cylinders or +size{K,M,G} (1-1044, default 1044):
Using default value 1044

Command (m for help): w
The partition table has been altered!
Calling ioctl() to re-read partition table.
Syncing disks.
</code></pre>

<!-- more -->


<h2>安装Hearbeat</h2>

<pre><code>wget ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm
rpm -ivUh epel-release-6-5.noarch.rpm
yum --enablerepo=epel install heartbeat -y
</code></pre>

<h2>安装DRBD</h2>

<p>1  安装依赖包</p>

<pre><code>yum -y install gcc kernel-devel kernel-headers flex
</code></pre>

<p>2  安装DRBD</p>

<pre><code>wget http://oss.linbit.com/drbd/8.4/drbd-8.4.3.tar.gz
tar zxvf drbd-8.4.3.tar.gz
cd drbd-8.4.3
./configure --prefix=/usr/local/drbd --with-km --with-heartbeat
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
make install
cp -R /usr/local/drbd/etc/ha.d/resource.d/drbd* /etc/ha.d/resource.d/
</code></pre>

<p>3  其他设置</p>

<pre><code>mkdir -p /usr/local/drbd/var/run/drbd
cp /usr/local/drbd/etc/rc.d/init.d/drbd /etc/rc.d/init.d/
chkconfig --add drbdchkconfig drbd on
</code></pre>

<h2>安装DRBD模块</h2>

<pre><code>cd drbdmake 
clean
make KDIR=/usr/src/kernels/2.6.32-279.el6.x86_64/
cp drbd.ko /lib/modules/`uname -r`/kernel/lib/
depmod
</code></pre>

<p>以上操作请在所有节点操作一次。</p>

<hr />

<h2>设置DRBD</h2>

<p><strong>配置drbd.conf</strong></p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/global_common.conf
global {
    minor-count 64;
    usage-count yes;
    # minor-count dialog-refresh disable-ip-verification
}


common {
    syncer { rate 1000M; }
    handlers {
        # These are EXAMPLE handlers only.
        # They may have severe implications,
        # like hard resetting the node under certain circumstances.
        # Be careful when chosing your poison.

        pri-on-incon-degr "/usr/lib/drbd/notify-pri-on-incon-degr.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        pri-lost-after-sb "/usr/lib/drbd/notify-pri-lost-after-sb.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f";
        local-io-error "/usr/lib/drbd/notify-io-error.sh; /usr/lib/drbd/notify-emergency-shutdown.sh; echo o &amp;gt; /proc/sysrq-trigger ; halt -f";
        fence-peer "/usr/lib/drbd/crm-fence-peer.sh";
        pri-lost "/usr/local/drbd/lib/drbd/notify-pri-lost.sh; /usr/local/drbd/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt;/proc/sysrq-trigger ; reboot -f";
        split-brain "/usr/lib/drbd/notify-split-brain.sh root";
        out-of-sync "/usr/lib/drbd/notify-out-of-sync.sh root";
        # before-resync-target "/usr/lib/drbd/snapshot-resync-target-lvm.sh -p 15 -- -c 16k";
        # after-resync-target /usr/lib/drbd/unsnapshot-resync-target-lvm.sh;
    }

    startup {

        # wfc-timeout degr-wfc-timeout outdated-wfc-timeout wait-after-sb
        wfc-timeout 60;
        degr-wfc-timeout 120;
        outdated-wfc-timeout 2;
    }

    options {
        # cpu-mask on-no-data-accessible
        }

    disk {
        # size max-bio-bvecs on-io-error fencing disk-barrier disk-flushes
        # disk-drain md-flushes resync-rate resync-after al-extents
        # c-plan-ahead c-delay-target c-fill-target c-max-rate
        # c-min-rate disk-timeout
        on-io-error detach;
        fencing resource-only;
    }

    net {
        # protocol timeout max-epoch-size max-buffers unplug-watermark
        # connect-int ping-int sndbuf-size rcvbuf-size ko-count
        # allow-two-primaries cram-hmac-alg shared-secret after-sb-0pri
        # after-sb-1pri after-sb-2pri always-asbp rr-conflict
        # ping-timeout data-integrity-alg tcp-cork on-congestion
        # congestion-fill congestion-extents csums-alg verify-alg
        # use-rle
        protocol C;
    }
}
</code></pre>

<p>设置资源文件</p>

<pre><code>cat /usr/local/drbd/etc/drbd.d/r0.res
resource r0 {
    on drbd-01.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.234:7788;
        meta-disk       internal;
    }

    on drbd-02.i.12582.com {
        device          /dev/drbd0;
        disk            /dev/sdb1;
        address         192.168.30.235:7788;
        meta-disk       internal;
    }
}
</code></pre>

<hr />

<h3>设置权限</h3>

<pre><code>chgrp haclient /sbin/drbdsetup
chmod o-x /sbin/drbdsetup
chmod u+s /sbin/drbdsetup
chgrp haclient /sbin/drbdmeta
chmod o-x /sbin/drbdmeta
chmod u+s /sbin/drbdmeta
</code></pre>

<p>加载DRBD模块与建立resource</p>

<pre><code>modprobe drbd
lsmod | grep drbd
drbd                  328626  0
libcrc32c               1246  1 drbd
</code></pre>

<p>写入一些数据到/dev/sdb1</p>

<pre><code>dd if=/dev/zero of=/dev/sdb1 bs=1M count=100
</code></pre>

<p>建立Resource</p>

<pre><code>drbdadm create-md r0
Writing meta data...
initializing activity log
NOT initializing bitmap
New drbd meta data block successfully created.
success
</code></pre>

<h3>启动DRBD</h3>

<pre><code>/etc/init.d/drbd start
Starting DRBD resources: [
      create res: r0
    prepare disk: r0
     adjust disk: r0
     adjust net: r0
]
degr-wfc-timeout has to be shorter than wfc-timeout
degr-wfc-timeout implicitly set to wfc-timeout (60s)
..........
***************************************************************
DRBD's startup script waits for the peer node(s) to appear.
- In case this node was already a degraded cluster before the
reboot the timeout is 120 seconds. [degr-wfc-timeout]
- If the peer was available before the reboot the timeout will
expire after 60 seconds. [wfc-timeout]
(These values are for resource 'r0'; 0 sec -&amp;gt; wait forever)
To abort waiting enter 'yes' [  49]:yes

.
</code></pre>

<p>节点2按以上操作执行一次。</p>

<h3>DRBD状态查看</h3>

<ol>
<li><p>Secondary/Unknown：若drbd-01服务启动而drbd-02尚未启动,则ro会出现Secondary/Unknown</p>

<pre><code> /init.d/drbd status
 drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs        ro                 ds                 p   mounted
 fstype
 0:r0   WFConnection  Secondary/Unknown  Inconsistent/DUnknown  C
</code></pre>

<p>查看drbd</p>

<pre><code>  cat /proc/drbd
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r----s
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre></li>
<li><p>Inconsistent/Inconsistent：ds出現Inconsistent表示兩台node資料尚未同步。</p>

<pre><code> drbd driver loaded OK; device status:
 version: 8.4.3 (api:1/proto:86-101)
 GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
 root@drbd-01.i.12582.com, 2013-08-08 14:00:35
 m:res  cs         ro                   ds                         p  mounted  
 fstype
 0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre>

<p>查看内核</p>

<pre><code>  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  0: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r-----
  ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:8385604
</code></pre>

<p>3  SyncSource：cs出現SyncTarget表示正在同步中，可看到目前同步時的進度．</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs          ro                 ds                     p  mounted  
  fstype
  ...    sync'ed:    26.1%              (6056/8188)M
  0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>4  Secondary/Secondary：表示尚未設定Primary Node。</p>

<pre><code>  drbd driver loaded OK; device status:
  version: 8.4.3 (api:1/proto:86-101)
  GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
  root@drbd-01.i.12582.com, 2013-08-08 14:00:35
  m:res  cs         ro                   ds                         p  mounted  
  fstype
  0:r0   Connected  Secondary/Secondary  Inconsistent/Inconsistent  C
</code></pre></li>
</ol>


<h3>设置主节点(Primary Node)</h3>

<p>在drbd-01进行以下操作:</p>

<pre><code>drbdadm -- --overwrite-data-of-peer primary r0
</code></pre>

<p>再查看下状态:</p>

<pre><code>/etc/init.d/drbd status
drbd driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-01.i.12582.com, 2013-08-08 14:00:35
m:res  cs          ro                 ds                     p  mounted  fstype
...    sync'ed:    13.1%              (7124/8188)M
0:r0   SyncSource  Primary/Secondary  UpToDate/Inconsistent  C
</code></pre>

<p>在drbd-02查看下状态：</p>

<pre><code>driver loaded OK; device status:
version: 8.4.3 (api:1/proto:86-101)
GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by 
root@drbd-02.i.12582.com, 2013-08-08 14:16:07
m:res  cs         ro                 ds                 p  mounted  fstype
0:r0   Connected  Secondary/Primary  UpToDate/UpToDate  C
</code></pre>

<p>格式化（drbd-01）</p>

<pre><code>mkfs.ext4 /dev/drbd0
</code></pre>

<p>挂载到文件系统：</p>

<pre><code>mkdir /datamount /dev/drbd0 /data
</code></pre>

<h2>测试DRBD</h2>

<h3>测试同步</h3>

<ol>
<li><p>在主节点（Primary Node）复制一些数据到/data</p>

<pre><code> cp -r drbd-8.4.3 /data/
</code></pre></li>
<li><p>在次节点（Secondary Node）执行以下步骤：</p>

<pre><code> drbdadm down r0
</code></pre>

<p>注：次节点在DRBD启动状态下是无法mount /data的，所以必须先手动停止才能mount。</p>

<pre><code>  mkdir /datamount -t ext4 /dev/sdb1 /datals -l
</code></pre>

<p>就可以看到数据已经全部同步过来。</p></li>
</ol>


<h2>Heartbeat配置</h2>

<ol>
<li><p>主节点操作：</p>

<pre><code> vim /etc/ha.d/ha.cf
 debugfile /var/log/ha-debug   # 打开错误日志报告

 keepalive 2    # 2秒检测一次心跳线连接
 deadtime 10    # 10秒测试不到 主节点心跳线就认为有问题
 warntime 6    # 警告时间（建议在2－10之间）
 initdead 120   # 初始化启动时 120秒无连接视为正常，或指定heartbeat 在启动时，
 # 需要等待120秒才去启动任何资源

 udpport 694     # 用udp的694端口连接，netstat -antulp | grep 694
 ucast eth0 192.168.30.235      # 单播方式连接（主、从都是写对方的IP连接）
 node  drbd-01.i.12582.com  # 声明主节点（uname -n）
 node  drbd-02.i.12582.com  # 声明次节点（uname -n）
 auto_failback on                    # 自动切换（主节点恢复后会自动切换回来）
 respawn hacluster /usr/lib64/heartbeat/ipfail  #监控ipfail进程是否挂掉，否则重启它
</code></pre></li>
<li><p>编辑认证文件</p>

<pre><code> vim /etc/ha.d/authkeys
 auth 1
 1 sha1 MySecret&amp;nbsp;
</code></pre></li>
<li><p>权限</p>

<pre><code> chmod 600 /etc/ha.d/authkeys
</code></pre></li>
<li><p>编辑资源文件</p>

<pre><code> vim /etc/ha.d/haresources
 drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0 drbddisk::r0 
 Filesystem::/dev/drbd0::/data::ext4
</code></pre>

<p> drbd-01.i.12582.com   主节点的主机名</p>

<p> IPaddr::192.168.30.229/24/eth0    设置虚拟IP</p>

<p> drbddisk::r0                  管理资源r0</p>

<p> Filesystem::/dev/drbd0::/data::ext4   执行umount和mount操作</p></li>
<li><p>次节点操作：</p>

<p> 将ha.cf中的192.168.30.235改成192.168.30.234</p></li>
</ol>


<h3>DRBD主从自动切换测试</h3>

<ol>
<li><p>首先在 drbd-01启动heartbeat：</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>接着在 drbd-02 启动heartbear:</p>

<pre><code> /etc/init.d/heartbeat  start
</code></pre></li>
<li><p>在drbd-01输入：</p>

<pre><code> ip a

 1: lo: LOOPBACK,UP,LOWER_UP&amp;gt; mtu 16436 qdisc noqueue state UNKNOWN
     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
     inet 127.0.0.1/8 scope host lo
     inet6 ::1/128 scope host
         valid_lft forever preferred_lft forever
 2: eth0:  BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
     link/ether 08:00:27:98:a2:6c brd ff:ff:ff:ff:ff:ff
     inet 192.168.30.234/24 brd 192.168.30.255 scope global eth0
     inet &lt;b&gt;192.168.30.229&lt;/b&gt;/24 brd 192.168.30.255 scope global secondary eth0:0
     inet6 fe80::a00:27ff:fe98:a26c/64 scope link
         valid_lft forever preferred_lft forever
</code></pre>

<p>从结果可以看出，VIP已经出现。</p></li>
<li><p>停止drbd-01的heartbeat服务或将网线断掉，同时监控drbd-02的DRBD状态.</p></li>
<li><p>drbd-02操作：</p>

<pre><code> watch -n 1 /etc/init.d/drbd status
</code></pre>

<p>如果一切正常，可以看到状态在不断变化。</p></li>
<li><p>恢复drbd-01的heartbeat服务或将网线接上，同时监控drbd-02的DRBD状态，如果正常drbd-01又变为主节点（auto_failback on 决定）了。</p></li>
</ol>


<h2>Mysql+DRBD+Heartbeat配置</h2>

<h3>Mysql安装</h3>

<p><strong>安装Mysql依赖包</strong></p>

<pre><code>yum -y install gcc gcc-c++ ncurses-devel libtool zlib-devel bison
</code></pre>

<p><b>创建用户与组</b></p>

<pre><code>groupadd mysqluseradd -g mysql mysql
</code></pre>

<p><b>设置内核参数</b></p>

<pre><code>vi /etc/security/limits.conf
mysql              soft    nproc   2047
mysql              hard    nproc   16384
mysql              soft    nofile  1024
mysql              hard    nofile  65536
</code></pre>

<p><b>安装Mysql</b></p>

<p>由于源码安装Mysql5.6需要依赖cmake，必须先安装cmake：</p>

<pre><code>mkdir ~/software; cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/cmake-2.8.4.tar.gz
tar zxvf cmake-2.8.4.tar.gz
cd cmake-2.8.4
./configure
gmake &amp;&amp;  make install
</code></pre>

<p>开始安装Mysql</p>

<pre><code>cd ~/software
wget ftp://192.168.30.211/pub/Tools/mysql/mysql-5.6.5-m8.tar.gz
tar zxvf mysql-5.6.5-m8.tar.gz
cd mysql-5.6.5-m8

cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
  -DDEFAULT_CHARSET=utf8 \
  -DDEFAULT_COLLATION=utf8_general_ci \
  -DENABLED_LOCAL_INFILE=ON \
  -DWITH_INNOBASE_STORAGE_ENGINE=1 \
  -DWITH_FEDERATED_STORAGE_ENGINE=1 \
  -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
  -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
  -DWITH_PARTITION_STORAGE_ENGINE=1 \
  -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \
  -DCOMPILATION_COMMENT='agenge for mysql' \
  -DWITH_READLINE=ON \
  -DMYSQL_UNIX_ADDR=/data/mysqldata/3306/mysql.sock \
  -DSYSCONFDIR=/data/mysqldata/3306
  make &amp;&amp; make install
</code></pre>

<h3>Mysql设置</h3>

<ul>
<li><p>设置权限</p>

<pre><code>  chown -R mysql:mysql /usr/local/mysql
</code></pre></li>
<li><p>设置环境变量</p>

<pre><code>  vi /etc/profileexport PATH=/usr/local/mysql/bin:$PATH
</code></pre></li>
<li><p>使环境变量马上生效</p>

<pre><code>  source /etc/profile
</code></pre></li>
<li><p>设置相关存储路径</p>

<pre><code>  cd /data
  mkdir -p mysqldata/3306/{data,binlog,tmp,innodb_ts,innodb_log}
  cd /data/mysqldata/mkdir script backup
  chown -R mysql:mysql /data/mysqldata/
</code></pre></li>
<li><p>创建my.cnf</p>

<pre><code>  vi /data/mysqldata/3306/my.cnf
  [client]
  port = 3306
  socket = /data/mysqldata/3306/mysql.sock

  # Here follows entries for some specific programs

  # The MySQL server
  [mysqld]
  port     = 3306
  user     = mysql
  socket   = /data/mysqldata/3306/mysql.sock
  pid-file = /tmp/mysql.pid
  basedir  = /usr/local/mysql
  datadir  = /data/mysqldata/3306/data
  tmpdir   = /data/mysqldata/3306/tmp
  open_files_limit    = 10240
  server-id = 333306
  lower_case_table_names = 1
  character-set-server = utf8
  skip-name-resolve
  max_connections = 1000
  max_connect_errors = 100000
  max_allowed_packet = 512M
  max_heap_table_size = 1024M
  max_length_for_sort_data = 4096
  back_log=100
  interactive_timeout = 28800
  wait_timeout = 28800

  default-storage-engine = InnoDB

  net_buffer_length = 8K
  sort_buffer_size = 2M
  join_buffer_size = 4M
  read_buffer_size = 2M
  read_rnd_buffer_size = 16M

  query_cache_size = 128M
  query_cache_limit = 2M
  query_cache_min_res_unit = 2k

  thread_cache_size = 300
  table_open_cache = 1024
  tmp_table_size = 256M

  #***********  Logs related settings ***********
  log-bin  = ../binlog/mysql-bin
  relay-log = ../binlog/mysql-relay-bin
  binlog_format=mixed
  binlog_cache_size=32m
  max_binlog_cache_size=512m
  max_binlog_size=512m
  long_query_time = 1
  log_output = FILE
  log-error =  ../mysql-error.log
  slow_query_log = 1
  slow_query_log_file = ../slow_statement.log
  #log_queries_not_using_indexes
  general_log = 0
  general_log_file = ../general_statement.log
  expire-logs-days = 14

  #*********** MyISAM Specific options ***********
  key_buffer_size = 32M
  bulk_insert_buffer_size = 64M
  myisam_sort_buffer_size = 128M
  myisam_max_sort_file_size = 10G
  myisam_repair_threads = 1
  myisam_recover

  #*********** INNODB Specific options ***********
  innodb_file_per_table = 1
  transaction-isolation = READ-COMMITTED

  innodb_additional_mem_pool_size = 16M
  innodb_buffer_pool_size = 1192M
  innodb_data_home_dir = ../innodb_ts
  innodb_data_file_path = ibdata1:2048M:autoextend

  innodb_file_io_threads = 4
  innodb_thread_concurrency = 8
  innodb_log_buffer_size = 128M
  innodb_log_file_size = 256M
  innodb_log_files_in_group = 3

  innodb_log_group_home_dir = ../innodb_log
  innodb_flush_log_at_trx_commit = 2
  innodb_max_dirty_pages_pct = 80
  innodb_lock_wait_timeout = 120
  innodb_flush_method=O_DIRECT
  performance_schema

  [mysqldump]
  quick
  max_allowed_packet = 512M

  [mysql]
  no-auto-rehash
  # Remove the next comment character if you are not familiar with SQL
  #safe-updates

  [myisamchk]
  key_buffer_size = 32M
  sort_buffer_size = 20M
  read_buffer_size = 2M
  write_buffer_size = 2M

  [mysqlhotcopy]
  interactive-timeout

  [mysqld_safe]
  open-files-limit = 8192
</code></pre></li>
<li><p>安装mysql database，并启动Myql：</p>

<pre><code>  /usr/local/mysql/scripts/mysql_install_db \
    --datadir=/data/mysqldata/3306/data \
    --defaults-file=/data/mysqldata/3306/my.cnf \
    --basedir=/usr/local/mysql --user=mysql
  mysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
  mysqladmin -uroot password 'new_password' -S /data/mysqldata/3306/mysql.sock

  mysql -uroot -p123456
  mysql&gt; select user,host from mysql.user;
  mysql&gt; delete from mysql.user where (user,host) not in (select 'root','localhost');
  mysql&gt; delete from mysql.proxies_priv where host='localhost.localdomain';
  mysql&gt; delete from mysql.db;
  mysql&gt; flush privileges;
  mysql&gt; quit
  mysqladmin -uroot -p123456 shutdownrm -f /data/mysqldata/3306/mysql-error.logmysqld_safe --defaults-file=/data/mysqldata/3306/my.cnf &amp;amp;
</code></pre></li>
<li><p>启动Mysql脚本</p>

<pre><code>  cp support-files/mysql.server  /etc/init.d/mysqld
  chmod +x /etc/init.d/mysqld
</code></pre></li>
<li><p>修改ha.cf</p></li>
</ul>


<p> 由于现在是管理Mysql，故要将mysqld由heartbeat管理（2个节点都执行）</p>

<pre><code>    cat /etc/ha.d/haresources
    drbd-01.i.12582.com IPaddr::192.168.30.229/24/eth0:0  drbddisk::r0 
    Filesystem::/dev/drbd0::/data::ext4 mysqld
</code></pre>

<ul>
<li><p>测试</p>

<ol>
<li><p> 准备Mysql数据（节点1操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; create database mydb;
  Query OK, 1 row affected (0.02 sec)

  mysql&gt; use mydb;
  Database changed
  mysql&gt; create table t_1( id  int not null, name varchar(10));
  Query OK, 0 rows affected (0.14 sec)
  mysql&gt; insert into t_1 values(1,'aaa');
  Query OK, 1 row affected (0.00 sec)

  mysql&gt; commit;
  Query OK, 0 rows affected (0.00 sec)
  mysql&gt; quit;
  Bye
</code></pre></li>
<li><p> 切换主、次节点，同时监控drbd-02服务器的日志</p>

<pre><code>  watch -n 1 /etc/init.d/drbd status
</code></pre></li>
</ol>


<p>  如果一切正常，可以看到ro的状态从“Secondary/Primary”变成“Primary/Secondary”。</p>

<p>  例如偶切换成的状态如下：</p>

<pre><code>      drbd driver loaded OK; device status:
      version: 8.4.3 (api:1/proto:86-101)
      GIT-hash: 89a294209144b68adb3ee85a73221f964d3ee515 build by root@&lt;b&gt;drbd-02.i.12582.com&lt;/b&gt;, 2013-08-08 16:46:23
      m:res  cs         ro                 ds                 p  mounted  fstype
      0:r0   Connected  &lt;b&gt;Primary/Secondary&lt;/b&gt;  UpToDate/UpToDate  C  /data    ext4
</code></pre>

<ol>
<li><p> 查询数据是否丢失（drbd-02操作）</p>

<pre><code>  mysql -uroot -p
  Enter password:
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 2
  Server version: 5.6.5-m8-log agenge for mysql

  Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql&gt; use mydb;
  Database changed
  mysql&gt; select * from t_1;
  +----+------+
  | id | name |
  +----+------+
  |  1 | aaa  |
  +----+------+
  1 row in set (0.00 sec)
</code></pre></li>
</ol>


<p>  以看到在drbd-02上数据已经有了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win8通过PLSQL连接Oracle]]></title>
    <link href="http://agenge.github.io/blog/2013/01/26/win8_plsql_conn_oracle/"/>
    <updated>2013-01-26T00:00:00+08:00</updated>
    <id>http://agenge.github.io/blog/2013/01/26/win8_plsql_conn_oracle</id>
    <content type="html"><![CDATA[<p>偶一直比较喜欢新产品并很愿意去尝试，虽说特喜欢Linux，但Win8正式版发布后，立即将公司的笔记本第一时间从Ubuntu 10.04迁移到Win8 64位企业版，本文不介绍Win8、不介绍安装Oracle11g，而是记录偶在Win8系统通过PL/SQL连接Oracle的经过，以便于各位看客少走弯路，此问题折腾偶整整一天，费话就此打住，开始：</p>

<ol>
<li><p>首先您得安装一个Oracle 11g 64位，建议只安装数据库软件，不创建数据库实例，偶安装后的路径：E:\app\agen\product\11.2.0\dbhome_1Oracle database 11g For Windows 共有2安装包，下载地址：<a href="http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_1of2.zip" title="iso1">iso1</a>  | <a href="http://download.oracle.com/otn/nt/oracle11g/112010/win64_11gR2_database_2of2.zip" title="iso2">iso2</a></p></li>
<li><p>必须再安装一个Oracle 11g 32位的客户端，下载地址：<a href="http://download.oracle.com/otn/nt/instantclient/112010/instantclient-basic-win32-11.2.0.1.0.zip" title="instantclient-basic">instantclient-basic-win32-11.2.0.1.0</a>将 instantclient_11_2 解压到：E:\app\agen\product，并把 tnsnames.ora 复制到instantclient_11_2下；</p></li>
<li><p>安装PL/SQL DEV，安装包、注册码及汉化包，请见：<a href="http://www.oracle.com.cn/viewthread.php?tid=158668" title="PLSQL DEV +注册机 + 汉">PL/SQL Dev + 注册机 + 官方简体中文</a>，安装后，在登录时选择取消，弹出PLSQL DEV的界面，选择：“工具”-&gt;“首选项”，分别设置如下：</p></li>
<li><p>Oracle 主目录名：E:\app\agen\product\instantclient_11_2</p></li>
<li><p>OCI库：E:\app\agen\product\instantclient_11_2\oci.dll</p></li>
</ol>


<p> 点击“应用”->“确定”，并关闭PL/SQL。</p>

<ol>
<li>设置环境变量：</li>
<li>在系统环境变量，选择“Path”，点击“编辑”，在最前面加入以下路径：E:\app\agen\product\instantclient_11_2，并确认。</li>
<li>新建变量名称：TNS_ADMIN， 变量值：E:\app\agen\product\instantclient_11_2(因为我们的tnsnames.ora在这里啦)。</li>
<li>新建变量名称：NLS_LANG， 变量值：SIMPLIFIED CHINESE_CHINA.ZHS16GBK</li>
</ol>


<p> 请注意,此变量值通过以下SQL语句在数据库服务器得到：
<code>
SELECT userenv(‘language’) nls_lang FROM dual;
</code>
最后启动PLSQL，如果您所有步骤顺利通过，就可连接到数据库。</p>
]]></content>
  </entry>
  
</feed>
